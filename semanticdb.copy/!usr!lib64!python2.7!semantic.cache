;; Object python2.7/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "python2.7/"
  :tables
  (list
    (semanticdb-table "urllib2.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"An extensible library for opening URLs using a variety of protocols

The simplest way to use this module is to call the urlopen function,
which accepts a string containing a URL or a Request object (described
below).  It opens the URL and returns the results as file-like
object; the returned object has some extra methods described below.

The OpenerDirector manages a collection of Handler objects that do
all the actual work.  Each Handler implements a particular protocol or
option.  The OpenerDirector is a composite object that invokes the
Handlers needed to open the requested URL.  For example, the
HTTPHandler performs HTTP GET and POST requests and deals with
non-error returns.  The HTTPRedirectHandler automatically deals with
HTTP 301, 302, 303 and 307 redirect errors, and the HTTPDigestAuthHandler
deals with digest authentication.

urlopen(url, data=None) -- Basic usage is the same as original
urllib.  pass the url and optionally data to post to an HTTP URL, and
get a file-like object back.  One difference is that you can also pass
a Request instance instead of URL.  Raises a URLError (subclass of
IOError); for HTTP errors, raises an HTTPError, which can also be
treated as a valid response.

build_opener -- Function that creates a new OpenerDirector instance.
Will install the default handlers.  Accepts one or more Handlers as
arguments, either instances or Handler classes that it will
instantiate.  If one of the argument is a subclass of the default
handler, the argument will be installed instead of the default.

install_opener -- Installs a new opener as the default opener.

objects of interest:

OpenerDirector -- Sets up the User Agent as the Python-urllib client and manages
the Handler classes, while dealing with requests and responses.

Request -- An object that encapsulates the state of a request.  The
state can be as simple as the URL.  It can also include extra HTTP
headers, e.g. a User-Agent.

BaseHandler --

exceptions:
URLError -- A subclass of IOError, individual protocols have their own
specific subclass.

HTTPError -- Also a valid HTTP response, so you can treat an HTTP error
as an exceptional event or valid response.

internals:
BaseHandler and parent
_call_chain conventions

Example usage:

import urllib2

# set up authentication info
authinfo = urllib2.HTTPBasicAuthHandler()
authinfo.add_password(realm='PDQ Application',
                      uri='https://mahler:8092/site-updates.py',
                      user='klem',
                      passwd='geheim$parole')

proxy_support = urllib2.ProxyHandler({\"http\" : \"http://ahad-haam:3128\"})

# build a new opener that adds authentication and caching FTP handlers
opener = urllib2.build_opener(proxy_support, authinfo, urllib2.CacheFTPHandler)

# install it
urllib2.install_opener(opener)

f = urllib2.urlopen('http://www.python.org/')


\"\"\"" code nil nil [1 2856])
            ("base64" include nil nil [3473 3486])
            ("hashlib" include nil nil [3487 3501])
            ("httplib" include nil nil [3502 3516])
            ("mimetools" include nil nil [3517 3533])
            ("os" include nil nil [3534 3543])
            ("posixpath" include nil nil [3544 3560])
            ("random" include nil nil [3561 3574])
            ("re" include nil nil [3575 3584])
            ("socket" include nil nil [3585 3598])
            ("sys" include nil nil [3599 3609])
            ("time" include nil nil [3610 3621])
            ("urlparse" include nil nil [3622 3637])
            ("bisect" include nil nil [3638 3651])
            ("warnings" include nil nil [3652 3667])
            ("try" code nil nil [3669 3763])
            ("" code nil nil [3783 3940])
            ("urllib" include nil nil [4003 4071])
            ("__version__" variable nil nil [4106 4135])
            ("_opener" variable nil nil [4137 4151])
            ("urlopen" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [4164 4167])
                ("data" variable nil (reparse-symbol function_parameters) [4169 4173])
                ("timeout" variable nil (reparse-symbol function_parameters) [4180 4187]))              ) nil [4152 4341])
            ("install_opener" function (:arguments 
              ( ("opener" variable nil (reparse-symbol function_parameters) [4361 4367]))              ) nil [4342 4410])
            ("URLError" type
               (:superclasses ("IOError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4947 4966])
                            ("self" variable nil (reparse-symbol indented_block_body) [4975 4995]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4924 4928])
                            ("reason" variable nil (reparse-symbol function_parameters) [4930 4936]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4911 4996])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5013 5017]))                          )
                        (reparse-symbol indented_block_body) [5001 5070]))                  
                :type "class")
                nil [4533 5070])
            ("HTTPError" type
               (:documentation "Raised when HTTP error occurs, but also acts like non-error return"
                :superclasses ("URLError" "addinfourl")
                :members 
                  ( ("__super_init" variable nil (reparse-symbol indented_block_body) [5191 5225])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5285 5301])
                            ("self" variable nil (reparse-symbol indented_block_body) [5310 5324])
                            ("self" variable nil (reparse-symbol indented_block_body) [5333 5349])
                            ("self" variable nil (reparse-symbol indented_block_body) [5358 5370])
                            ("self" variable nil (reparse-symbol indented_block_body) [5379 5398])
                            ("if" code nil (reparse-symbol indented_block_body) [5655 5725]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5244 5248])
                            ("url" variable nil (reparse-symbol function_parameters) [5250 5253])
                            ("code" variable nil (reparse-symbol function_parameters) [5255 5259])
                            ("msg" variable nil (reparse-symbol function_parameters) [5261 5264])
                            ("hdrs" variable nil (reparse-symbol function_parameters) [5266 5270])
                            ("fp" variable nil (reparse-symbol function_parameters) [5272 5274]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5231 5725])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5742 5746]))                          )
                        (reparse-symbol indented_block_body) [5730 5808])
                    ("reason" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5973 5977]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5948 6004])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6018 6022]))                          )
                        (reparse-symbol indented_block_body) [6009 6050]))                  
                :type "class")
                nil [5071 6050])
            ("_cut_port_re" variable nil nil [6078 6113])
            ("request_host" function
               (:documentation "Return request-host, as defined by RFC 2965.

    Variation from RFC: returned value is lowercased, for convenient
    comparison.

    "
                :arguments 
                  ( ("request" variable nil (reparse-symbol function_parameters) [6131 6138]))                  )
                nil [6114 6519])
            ("Request" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6721 6750])
                            ("self, self" code nil (reparse-symbol indented_block_body) [6759 6819])
                            ("self" variable nil (reparse-symbol indented_block_body) [6828 6844])
                            ("self" variable nil (reparse-symbol indented_block_body) [6918 6934])
                            ("self" variable nil (reparse-symbol indented_block_body) [6943 6959])
                            ("self" variable nil (reparse-symbol indented_block_body) [6968 6992])
                            ("self" variable nil (reparse-symbol indented_block_body) [7001 7017])
                            ("self" variable nil (reparse-symbol indented_block_body) [7026 7043])
                            ("for" code nil (reparse-symbol indented_block_body) [7052 7127])
                            ("self" variable nil (reparse-symbol indented_block_body) [7135 7162])
                            ("if" code nil (reparse-symbol indented_block_body) [7171 7248])
                            ("self" variable nil (reparse-symbol indented_block_body) [7256 7294])
                            ("self" variable nil (reparse-symbol indented_block_body) [7303 7335]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6553 6557])
                            ("url" variable nil (reparse-symbol function_parameters) [6559 6562])
                            ("data" variable nil (reparse-symbol function_parameters) [6564 6568])
                            ("headers" variable nil (reparse-symbol function_parameters) [6575 6582])
                            ("origin_req_host" variable nil (reparse-symbol function_parameters) [6604 6619])
                            ("unverifiable" variable nil (reparse-symbol function_parameters) [6626 6638]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6540 7336])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7357 7361])
                            ("attr" variable nil (reparse-symbol function_parameters) [7363 7367]))                          )
                        (reparse-symbol indented_block_body) [7341 7850])
                    ("get_method" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7870 7874]))                          )
                        (reparse-symbol indented_block_body) [7855 7970])
                    ("add_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8029 8033])
                            ("data" variable nil (reparse-symbol function_parameters) [8035 8039]))                          )
                        (reparse-symbol indented_block_body) [8016 8067])
                    ("has_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8085 8089]))                          )
                        (reparse-symbol indented_block_body) [8072 8129])
                    ("get_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8147 8151]))                          )
                        (reparse-symbol indented_block_body) [8134 8179])
                    ("get_full_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8201 8205]))                          )
                        (reparse-symbol indented_block_body) [8184 8349])
                    ("get_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8367 8371]))                          )
                        (reparse-symbol indented_block_body) [8354 8604])
                    ("get_host" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8622 8626]))                          )
                        (reparse-symbol indented_block_body) [8609 8821])
                    ("get_selector" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8843 8847]))                          )
                        (reparse-symbol indented_block_body) [8826 8879])
                    ("set_proxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8898 8902])
                            ("host" variable nil (reparse-symbol function_parameters) [8904 8908])
                            ("type" variable nil (reparse-symbol function_parameters) [8910 8914]))                          )
                        (reparse-symbol indented_block_body) [8884 9131])
                    ("has_proxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9150 9154]))                          )
                        (reparse-symbol indented_block_body) [9136 9205])
                    ("get_origin_req_host" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9234 9238]))                          )
                        (reparse-symbol indented_block_body) [9210 9277])
                    ("is_unverifiable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9302 9306]))                          )
                        (reparse-symbol indented_block_body) [9282 9342])
                    ("add_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9362 9366])
                            ("key" variable nil (reparse-symbol function_parameters) [9368 9371])
                            ("val" variable nil (reparse-symbol function_parameters) [9373 9376]))                          )
                        (reparse-symbol indented_block_body) [9347 9475])
                    ("add_unredirected_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9508 9512])
                            ("key" variable nil (reparse-symbol function_parameters) [9514 9517])
                            ("val" variable nil (reparse-symbol function_parameters) [9519 9522]))                          )
                        (reparse-symbol indented_block_body) [9480 9632])
                    ("has_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9652 9656])
                            ("header_name" variable nil (reparse-symbol function_parameters) [9658 9669]))                          )
                        (reparse-symbol indented_block_body) [9637 9774])
                    ("get_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9794 9798])
                            ("header_name" variable nil (reparse-symbol function_parameters) [9800 9811])
                            ("default" variable nil (reparse-symbol function_parameters) [9813 9820]))                          )
                        (reparse-symbol indented_block_body) [9779 9948])
                    ("header_items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9970 9974]))                          )
                        (reparse-symbol indented_block_body) [9953 10084]))                  
                :type "class")
                nil [6520 10084])
            ("OpenerDirector" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("client_version" code nil (reparse-symbol indented_block_body) [10139 10188])
                            ("self" variable nil (reparse-symbol indented_block_body) [10197 10247])
                            ("self" variable nil (reparse-symbol indented_block_body) [10324 10342])
                            ("self" variable nil (reparse-symbol indented_block_body) [10392 10413])
                            ("self" variable nil (reparse-symbol indented_block_body) [10422 10444])
                            ("self" variable nil (reparse-symbol indented_block_body) [10453 10479])
                            ("self" variable nil (reparse-symbol indented_block_body) [10488 10513]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10124 10128]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10111 10514])
                    ("add_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10535 10539])
                            ("handler" variable nil (reparse-symbol function_parameters) [10541 10548]))                          )
                        (reparse-symbol indented_block_body) [10519 12077])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12092 12096]))                          )
                        (reparse-symbol indented_block_body) [12082 12163])
                    ("_call_chain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12184 12188])
                            ("chain" variable nil (reparse-symbol function_parameters) [12190 12195])
                            ("kind" variable nil (reparse-symbol function_parameters) [12197 12201])
                            ("meth_name" variable nil (reparse-symbol function_parameters) [12203 12212])
                            ("args" variable nil (reparse-symbol function_parameters) [12214 12219]))                          )
                        (reparse-symbol indented_block_body) [12168 12641])
                    ("open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12655 12659])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [12661 12668])
                            ("data" variable nil (reparse-symbol function_parameters) [12670 12674])
                            ("timeout" variable nil (reparse-symbol function_parameters) [12681 12688]))                          )
                        (reparse-symbol indented_block_body) [12646 13535])
                    ("_open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13550 13554])
                            ("req" variable nil (reparse-symbol function_parameters) [13556 13559])
                            ("data" variable nil (reparse-symbol function_parameters) [13561 13565]))                          )
                        (reparse-symbol indented_block_body) [13540 14052])
                    ("error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14067 14071])
                            ("proto" variable nil (reparse-symbol function_parameters) [14073 14078])
                            ("args" variable nil (reparse-symbol function_parameters) [14080 14085]))                          )
                        (reparse-symbol indented_block_body) [14057 14786]))                  
                :type "class")
                nil [10085 14786])
            ("build_opener" function
               (:documentation "Create an opener object from a list of handlers.

    The opener will use several default handlers, including support
    for HTTP, FTP and when applicable, HTTPS.

    If any of the handlers passed as arguments are subclasses of the
    default handlers, the default handlers will not be used.
    "
                :arguments 
                  ( ("handlers" variable nil (reparse-symbol function_parameters) [14974 14983]))                  )
                nil [14957 16220])
            ("BaseHandler" type
               (:members 
                  ( ("handler_order" variable nil (reparse-symbol indented_block_body) [16244 16263])
                    ("add_parent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16284 16288])
                            ("parent" variable nil (reparse-symbol function_parameters) [16290 16296]))                          )
                        (reparse-symbol indented_block_body) [16269 16328])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16343 16347]))                          )
                        (reparse-symbol indented_block_body) [16333 16413])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16429 16433])
                            ("other" variable nil (reparse-symbol function_parameters) [16435 16440]))                          )
                        (reparse-symbol indented_block_body) [16418 16774]))                  
                :type "class")
                nil [16221 16774])
            ("HTTPErrorProcessor" type
               (:documentation "Process HTTP error responses."
                :superclasses ("BaseHandler")
                :members 
                  ( ("handler_order" variable nil (reparse-symbol indented_block_body) [16859 16879])
                    ("http_response" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16933 16937])
                            ("request" variable nil (reparse-symbol function_parameters) [16939 16946])
                            ("response" variable nil (reparse-symbol function_parameters) [16948 16956]))                          )
                        (reparse-symbol indented_block_body) [16915 17337])
                    ("https_response" variable nil (reparse-symbol indented_block_body) [17342 17372]))                  
                :type "class")
                nil [16776 17373])
            ("HTTPDefaultErrorHandler" type
               (:superclasses ("BaseHandler")
                :members 
                  ( ("http_error_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17445 17449])
                            ("req" variable nil (reparse-symbol function_parameters) [17451 17454])
                            ("fp" variable nil (reparse-symbol function_parameters) [17456 17458])
                            ("code" variable nil (reparse-symbol function_parameters) [17460 17464])
                            ("msg" variable nil (reparse-symbol function_parameters) [17466 17469])
                            ("hdrs" variable nil (reparse-symbol function_parameters) [17471 17475]))                          )
                        (reparse-symbol indented_block_body) [17422 17543]))                  
                :type "class")
                nil [17374 17543])
            ("HTTPRedirectHandler" type
               (:superclasses ("BaseHandler")
                :members 
                  ( ("max_repeats" variable nil (reparse-symbol indented_block_body) [17708 17723])
                    ("max_redirections" variable nil (reparse-symbol indented_block_body) [17829 17850])
                    ("redirect_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17877 17881])
                            ("req" variable nil (reparse-symbol function_parameters) [17883 17886])
                            ("fp" variable nil (reparse-symbol function_parameters) [17888 17890])
                            ("code" variable nil (reparse-symbol function_parameters) [17892 17896])
                            ("msg" variable nil (reparse-symbol function_parameters) [17898 17901])
                            ("headers" variable nil (reparse-symbol function_parameters) [17903 17910])
                            ("newurl" variable nil (reparse-symbol function_parameters) [17912 17918]))                          
                        :documentation "Return a Request or None in response to a redirect.

        This is called by the http_error_30x methods when a
        redirection response is received.  If a redirection should
        take place, return a new Request to allow http_error_30x to
        perform the redirect.  Otherwise, raise HTTPError if no-one
        else should try to handle this url.  Return None if you can't
        but another Handler might.
        ")
                        (reparse-symbol indented_block_body) [17856 19401])
                    ("http_error_302" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19661 19665])
                            ("req" variable nil (reparse-symbol function_parameters) [19667 19670])
                            ("fp" variable nil (reparse-symbol function_parameters) [19672 19674])
                            ("code" variable nil (reparse-symbol function_parameters) [19676 19680])
                            ("msg" variable nil (reparse-symbol function_parameters) [19682 19685])
                            ("headers" variable nil (reparse-symbol function_parameters) [19687 19694]))                          )
                        (reparse-symbol indented_block_body) [19642 21918])
                    ("http_error_301" variable nil (reparse-symbol indented_block_body) [21923 21988])
                    ("inf_msg" variable nil (reparse-symbol indented_block_body) [21994 22157]))                  
                :type "class")
                nil [17544 22158])
            ("_parse_proxy" function
               (:documentation "Return (scheme, user, password, host/port) given a URL or an authority.

    If a URL is supplied, it must have an authority (host:port) component.
    According to RFC 3986, having an authority component means the URL must
    have two slashes after the scheme:

    >>> _parse_proxy('file:/ftp.example.com/')
    Traceback (most recent call last):
    ValueError: proxy URL with no authority: 'file:/ftp.example.com/'

    The first three items of the returned tuple may be None.

    Examples of authority parsing:

    >>> _parse_proxy('proxy.example.com')
    (None, None, None, 'proxy.example.com')
    >>> _parse_proxy('proxy.example.com:3128')
    (None, None, None, 'proxy.example.com:3128')

    The authority component may optionally include userinfo (assumed to be
    username:password):

    >>> _parse_proxy('joe:password@proxy.example.com')
    (None, 'joe', 'password', 'proxy.example.com')
    >>> _parse_proxy('joe:password@proxy.example.com:3128')
    (None, 'joe', 'password', 'proxy.example.com:3128')

    Same examples, but with URLs instead:

    >>> _parse_proxy('http://proxy.example.com/')
    ('http', None, None, 'proxy.example.com')
    >>> _parse_proxy('http://proxy.example.com:3128/')
    ('http', None, None, 'proxy.example.com:3128')
    >>> _parse_proxy('http://joe:password@proxy.example.com/')
    ('http', 'joe', 'password', 'proxy.example.com')
    >>> _parse_proxy('http://joe:password@proxy.example.com:3128')
    ('http', 'joe', 'password', 'proxy.example.com:3128')

    Everything after the authority is ignored:

    >>> _parse_proxy('ftp://joe:password@proxy.example.com/rubbish:3128')
    ('ftp', 'joe', 'password', 'proxy.example.com')

    Test for no trailing '/' case:

    >>> _parse_proxy('http://joe:password@proxy.example.com')
    ('http', 'joe', 'password', 'proxy.example.com')

    "
                :arguments 
                  ( ("proxy" variable nil (reparse-symbol function_parameters) [22177 22182]))                  )
                nil [22160 24773])
            ("ProxyHandler" type
               (:superclasses ("BaseHandler")
                :members 
                  ( ("handler_order" variable nil (reparse-symbol indented_block_body) [24842 24861])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [24909 24964])
                            ("assert" code nil (reparse-symbol indented_block_body) [24972 25035])
                            ("self" variable nil (reparse-symbol indented_block_body) [25044 25066])
                            ("for" code nil (reparse-symbol indented_block_body) [25075 25271]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24880 24884])
                            ("proxies" variable nil (reparse-symbol function_parameters) [24886 24893]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24867 25271])
                    ("proxy_open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25291 25295])
                            ("req" variable nil (reparse-symbol function_parameters) [25297 25300])
                            ("proxy" variable nil (reparse-symbol function_parameters) [25302 25307])
                            ("type" variable nil (reparse-symbol function_parameters) [25309 25313]))                          )
                        (reparse-symbol indented_block_body) [25276 26425]))                  
                :type "class")
                nil [24774 26425])
            ("HTTPPasswordMgr" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [26482 26498]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26467 26471]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [26454 26499])
                    ("add_password" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26521 26525])
                            ("realm" variable nil (reparse-symbol function_parameters) [26527 26532])
                            ("uri" variable nil (reparse-symbol function_parameters) [26534 26537])
                            ("user" variable nil (reparse-symbol function_parameters) [26539 26543])
                            ("passwd" variable nil (reparse-symbol function_parameters) [26545 26551]))                          )
                        (reparse-symbol indented_block_body) [26504 26941])
                    ("find_user_password" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26969 26973])
                            ("realm" variable nil (reparse-symbol function_parameters) [26975 26980])
                            ("authuri" variable nil (reparse-symbol function_parameters) [26982 26989]))                          )
                        (reparse-symbol indented_block_body) [26946 27362])
                    ("reduce_uri" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27382 27386])
                            ("uri" variable nil (reparse-symbol function_parameters) [27388 27391])
                            ("default_port" variable nil (reparse-symbol function_parameters) [27393 27405]))                          
                        :documentation "Accept authority or URI and extract only the authority and path.")
                        (reparse-symbol indented_block_body) [27367 28176])
                    ("is_suburi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28195 28199])
                            ("base" variable nil (reparse-symbol function_parameters) [28201 28205])
                            ("test" variable nil (reparse-symbol function_parameters) [28207 28211]))                          
                        :documentation "Check if test is below base in a URI tree

        Both args must be URIs in reduced form.
        ")
                        (reparse-symbol indented_block_body) [28181 28578]))                  
                :type "class")
                nil [26426 28578])
            ("HTTPPasswordMgrWithDefaultRealm" type
               (:superclasses ("HTTPPasswordMgr")
                :members 
                  ( ("find_user_password" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28664 28668])
                            ("realm" variable nil (reparse-symbol function_parameters) [28670 28675])
                            ("authuri" variable nil (reparse-symbol function_parameters) [28677 28684]))                          )
                        (reparse-symbol indented_block_body) [28641 28963]))                  
                :type "class")
                nil [28580 28963])
            ("AbstractBasicAuthHandler" type
               (:members 
                  ( ("rx" variable nil (reparse-symbol indented_block_body) [29246 29349])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [29567 29637])
                            ("self" variable nil (reparse-symbol indented_block_body) [29645 29671])
                            ("self" variable nil (reparse-symbol indented_block_body) [29680 29724])
                            ("self" variable nil (reparse-symbol indented_block_body) [29733 29749]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29533 29537])
                            ("password_mgr" variable nil (reparse-symbol function_parameters) [29539 29551]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29520 29750])
                    ("reset_retry_count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29777 29781]))                          )
                        (reparse-symbol indented_block_body) [29755 29809])
                    ("http_error_auth_reqed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29840 29844])
                            ("authreq" variable nil (reparse-symbol function_parameters) [29846 29853])
                            ("host" variable nil (reparse-symbol function_parameters) [29855 29859])
                            ("req" variable nil (reparse-symbol function_parameters) [29861 29864])
                            ("headers" variable nil (reparse-symbol function_parameters) [29866 29873]))                          )
                        (reparse-symbol indented_block_body) [29814 30887])
                    ("retry_http_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30918 30922])
                            ("host" variable nil (reparse-symbol function_parameters) [30924 30928])
                            ("req" variable nil (reparse-symbol function_parameters) [30930 30933])
                            ("realm" variable nil (reparse-symbol function_parameters) [30935 30940]))                          )
                        (reparse-symbol indented_block_body) [30892 31390]))                  
                :type "class")
                nil [28965 31390])
            ("HTTPBasicAuthHandler" type
               (:superclasses ("AbstractBasicAuthHandler" "BaseHandler")
                :members 
                  ( ("auth_header" variable nil (reparse-symbol indented_block_body) [31464 31493])
                    ("http_error_401" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31518 31522])
                            ("req" variable nil (reparse-symbol function_parameters) [31524 31527])
                            ("fp" variable nil (reparse-symbol function_parameters) [31529 31531])
                            ("code" variable nil (reparse-symbol function_parameters) [31533 31537])
                            ("msg" variable nil (reparse-symbol function_parameters) [31539 31542])
                            ("headers" variable nil (reparse-symbol function_parameters) [31544 31551]))                          )
                        (reparse-symbol indented_block_body) [31499 31775]))                  
                :type "class")
                nil [31392 31775])
            ("ProxyBasicAuthHandler" type
               (:superclasses ("AbstractBasicAuthHandler" "BaseHandler")
                :members 
                  ( ("auth_header" variable nil (reparse-symbol indented_block_body) [31850 31885])
                    ("http_error_407" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31910 31914])
                            ("req" variable nil (reparse-symbol function_parameters) [31916 31919])
                            ("fp" variable nil (reparse-symbol function_parameters) [31921 31923])
                            ("code" variable nil (reparse-symbol function_parameters) [31925 31929])
                            ("msg" variable nil (reparse-symbol function_parameters) [31931 31934])
                            ("headers" variable nil (reparse-symbol function_parameters) [31936 31943]))                          )
                        (reparse-symbol indented_block_body) [31891 32425]))                  
                :type "class")
                nil [31777 32425])
            ("randombytes" function
               (:documentation "Return n random bytes."
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [32443 32444]))                  )
                nil [32427 32914])
            ("AbstractDigestAuthHandler" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [33331 33389])
                            ("self" variable nil (reparse-symbol indented_block_body) [33397 33417])
                            ("self" variable nil (reparse-symbol indented_block_body) [33426 33470])
                            ("self" variable nil (reparse-symbol indented_block_body) [33479 33495])
                            ("self" variable nil (reparse-symbol indented_block_body) [33504 33524])
                            ("self" variable nil (reparse-symbol indented_block_body) [33533 33555]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33303 33307])
                            ("passwd" variable nil (reparse-symbol function_parameters) [33309 33315]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33290 33556])
                    ("reset_retry_count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33583 33587]))                          )
                        (reparse-symbol indented_block_body) [33561 33615])
                    ("http_error_auth_reqed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33646 33650])
                            ("auth_header" variable nil (reparse-symbol function_parameters) [33652 33663])
                            ("host" variable nil (reparse-symbol function_parameters) [33665 33669])
                            ("req" variable nil (reparse-symbol function_parameters) [33671 33674])
                            ("headers" variable nil (reparse-symbol function_parameters) [33676 33683]))                          )
                        (reparse-symbol indented_block_body) [33620 34419])
                    ("retry_http_digest_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34451 34455])
                            ("req" variable nil (reparse-symbol function_parameters) [34457 34460])
                            ("auth" variable nil (reparse-symbol function_parameters) [34462 34466]))                          )
                        (reparse-symbol indented_block_body) [34424 34932])
                    ("get_cnonce" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34952 34956])
                            ("nonce" variable nil (reparse-symbol function_parameters) [34958 34963]))                          )
                        (reparse-symbol indented_block_body) [34937 35484])
                    ("get_authorization" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35511 35515])
                            ("req" variable nil (reparse-symbol function_parameters) [35517 35520])
                            ("chal" variable nil (reparse-symbol function_parameters) [35522 35526]))                          )
                        (reparse-symbol indented_block_body) [35489 37637])
                    ("get_algorithm_impls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37666 37670])
                            ("algorithm" variable nil (reparse-symbol function_parameters) [37672 37681]))                          )
                        (reparse-symbol indented_block_body) [37642 38121])
                    ("get_entity_digest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38148 38152])
                            ("data" variable nil (reparse-symbol function_parameters) [38154 38158])
                            ("chal" variable nil (reparse-symbol function_parameters) [38160 38164]))                          )
                        (reparse-symbol indented_block_body) [38126 38221]))                  
                :type "class")
                nil [32915 38221])
            ("HTTPDigestAuthHandler" type
               (:documentation "An authentication protocol defined by RFC 2069

    Digest authentication improves on basic authentication because it
    does not transmit passwords in the clear.
    "
                :superclasses ("BaseHandler" "AbstractDigestAuthHandler")
                :members 
                  ( ("auth_header" variable nil (reparse-symbol indented_block_body) [38476 38505])
                    ("handler_order" variable nil (reparse-symbol indented_block_body) [38510 38529])
                    ("http_error_401" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38575 38579])
                            ("req" variable nil (reparse-symbol function_parameters) [38581 38584])
                            ("fp" variable nil (reparse-symbol function_parameters) [38586 38588])
                            ("code" variable nil (reparse-symbol function_parameters) [38590 38594])
                            ("msg" variable nil (reparse-symbol function_parameters) [38596 38599])
                            ("headers" variable nil (reparse-symbol function_parameters) [38601 38608]))                          )
                        (reparse-symbol indented_block_body) [38556 38847]))                  
                :type "class")
                nil [38223 38847])
            ("ProxyDigestAuthHandler" type
               (:superclasses ("BaseHandler" "AbstractDigestAuthHandler")
                :members 
                  ( ("auth_header" variable nil (reparse-symbol indented_block_body) [38924 38959])
                    ("handler_order" variable nil (reparse-symbol indented_block_body) [38964 38983])
                    ("http_error_407" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39029 39033])
                            ("req" variable nil (reparse-symbol function_parameters) [39035 39038])
                            ("fp" variable nil (reparse-symbol function_parameters) [39040 39042])
                            ("code" variable nil (reparse-symbol function_parameters) [39044 39048])
                            ("msg" variable nil (reparse-symbol function_parameters) [39050 39053])
                            ("headers" variable nil (reparse-symbol function_parameters) [39055 39062]))                          )
                        (reparse-symbol indented_block_body) [39010 39277]))                  
                :type "class")
                nil [38849 39277])
            ("AbstractHTTPHandler" type
               (:superclasses ("BaseHandler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [39365 39394]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39336 39340])
                            ("debuglevel" variable nil (reparse-symbol function_parameters) [39342 39352]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39323 39395])
                    ("set_http_debuglevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39424 39428])
                            ("level" variable nil (reparse-symbol function_parameters) [39430 39435]))                          )
                        (reparse-symbol indented_block_body) [39400 39471])
                    ("do_request_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39492 39496])
                            ("request" variable nil (reparse-symbol function_parameters) [39498 39505]))                          )
                        (reparse-symbol indented_block_body) [39476 40533])
                    ("do_open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40550 40554])
                            ("http_class" variable nil (reparse-symbol function_parameters) [40556 40566])
                            ("req" variable nil (reparse-symbol function_parameters) [40568 40571]))                          
                        :documentation "Return an addinfourl object for the request, using http_class.

        http_class must implement the HTTPConnection API from httplib.
        The addinfourl return value is a file-like object.  It also
        has methods and attributes including:
            - info(): return a mimetools.Message object for the headers
            - geturl(): return the original request URL
            - code: HTTP status code
        ")
                        (reparse-symbol indented_block_body) [40538 43393]))                  
                :type "class")
                nil [39278 43393])
            ("HTTPHandler" type
               (:superclasses ("AbstractHTTPHandler")
                :members 
                  ( ("http_open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43454 43458])
                            ("req" variable nil (reparse-symbol function_parameters) [43460 43463]))                          )
                        (reparse-symbol indented_block_body) [43440 43523])
                    ("http_request" variable nil (reparse-symbol indented_block_body) [43528 43574]))                  
                :type "class")
                nil [43395 43575])
            ("if" code nil nil [43576 43806])
            ("HTTPCookieProcessor" type
               (:superclasses ("BaseHandler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("cookielib" include nil (reparse-symbol indented_block_body) [43895 43911])
                            ("if" code nil (reparse-symbol indented_block_body) [43920 43988])
                            ("self" variable nil (reparse-symbol indented_block_body) [43996 44022]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43864 43868])
                            ("cookiejar" variable nil (reparse-symbol function_parameters) [43870 43879]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43851 44023])
                    ("http_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44045 44049])
                            ("request" variable nil (reparse-symbol function_parameters) [44051 44058]))                          )
                        (reparse-symbol indented_block_body) [44028 44134])
                    ("http_response" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44157 44161])
                            ("request" variable nil (reparse-symbol function_parameters) [44163 44170])
                            ("response" variable nil (reparse-symbol function_parameters) [44172 44180]))                          )
                        (reparse-symbol indented_block_body) [44139 44265])
                    ("https_request" variable nil (reparse-symbol indented_block_body) [44270 44298])
                    ("https_response" variable nil (reparse-symbol indented_block_body) [44303 44333]))                  
                :type "class")
                nil [43807 44334])
            ("UnknownHandler" type
               (:superclasses ("BaseHandler")
                :members 
                  ( ("unknown_open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44391 44395])
                            ("req" variable nil (reparse-symbol function_parameters) [44397 44400]))                          )
                        (reparse-symbol indented_block_body) [44374 44487]))                  
                :type "class")
                nil [44335 44487])
            ("parse_keqv_list" function
               (:documentation "Parse list of key=value strings where keys are not duplicated."
                :arguments 
                  ( ("l" variable nil (reparse-symbol function_parameters) [44508 44509]))                  )
                nil [44488 44757])
            ("parse_http_list" function
               (:documentation "Parse lists as described by RFC 2068 Section 2.

    In particular, parse comma-separated lists where the elements of
    the list may include quoted-strings.  A quoted-string could
    contain a comma.  A non-quoted string could have quotes in the
    middle.  Neither commas nor quotes count if they are escaped.
    Only double-quotes count, not single-quotes.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [44778 44779]))                  )
                nil [44758 48000])
            ("FTPHandler" type
               (:superclasses ("BaseHandler")
                :members 
                  ( ("ftp_open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48049 48053])
                            ("req" variable nil (reparse-symbol function_parameters) [48055 48058]))                          )
                        (reparse-symbol indented_block_body) [48036 49901])
                    ("connect_ftp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49922 49926])
                            ("user" variable nil (reparse-symbol function_parameters) [49928 49932])
                            ("passwd" variable nil (reparse-symbol function_parameters) [49934 49940])
                            ("host" variable nil (reparse-symbol function_parameters) [49942 49946])
                            ("port" variable nil (reparse-symbol function_parameters) [49948 49952])
                            ("dirs" variable nil (reparse-symbol function_parameters) [49954 49958])
                            ("timeout" variable nil (reparse-symbol function_parameters) [49960 49967]))                          )
                        (reparse-symbol indented_block_body) [49906 50130]))                  
                :type "class")
                nil [48001 50130])
            ("CacheFTPHandler" type
               (:superclasses ("FTPHandler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [50308 50323])
                            ("self" variable nil (reparse-symbol indented_block_body) [50332 50349])
                            ("self" variable nil (reparse-symbol indented_block_body) [50358 50374])
                            ("self" variable nil (reparse-symbol indented_block_body) [50383 50398])
                            ("self" variable nil (reparse-symbol indented_block_body) [50407 50426]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50293 50297]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [50280 50427])
                    ("setTimeout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50447 50451])
                            ("t" variable nil (reparse-symbol function_parameters) [50453 50454]))                          )
                        (reparse-symbol indented_block_body) [50432 50480])
                    ("setMaxConns" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50501 50505])
                            ("m" variable nil (reparse-symbol function_parameters) [50507 50508]))                          )
                        (reparse-symbol indented_block_body) [50485 50538])
                    ("connect_ftp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50559 50563])
                            ("user" variable nil (reparse-symbol function_parameters) [50565 50569])
                            ("passwd" variable nil (reparse-symbol function_parameters) [50571 50577])
                            ("host" variable nil (reparse-symbol function_parameters) [50579 50583])
                            ("port" variable nil (reparse-symbol function_parameters) [50585 50589])
                            ("dirs" variable nil (reparse-symbol function_parameters) [50591 50595])
                            ("timeout" variable nil (reparse-symbol function_parameters) [50597 50604]))                          )
                        (reparse-symbol indented_block_body) [50543 50961])
                    ("check_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50982 50986]))                          )
                        (reparse-symbol indented_block_body) [50966 51639])
                    ("clear_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51660 51664]))                          )
                        (reparse-symbol indented_block_body) [51644 51789]))                  
                :type "class")
                nil [50131 51789]))          
      :file "urllib2.py"
      :pointmax 51789
      :fsize 51788
      :lastmodtime '(21149 51618 187875 940000)
      :unmatched-syntax '((INDENT_BLOCK 47919 . 47951) (NEWLINE 47842 . 47843) (COLON 47841 . 47842)))
    (semanticdb-table "re.py"
      :major-mode 'python-mode
      :tags 
        '( ("r\"\"\"Support for regular expressions (RE).

This module provides regular expression matching operations similar to
those found in Perl.  It supports both 8-bit and Unicode strings; both
the pattern and the strings being processed can contain null bytes and
characters outside the US ASCII range.

Regular expressions can contain both special and ordinary characters.
Most ordinary characters, like \"A\", \"a\", or \"0\", are the simplest
regular expressions; they simply match themselves.  You can
concatenate ordinary characters, so last matches the string 'last'.

The special characters are:
    \".\"      Matches any character except a newline.
    \"^\"      Matches the start of the string.
    \"$\"      Matches the end of the string or just before the newline at
             the end of the string.
    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.
             Greedy means that it will match as many repetitions as possible.
    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.
    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the previous three special characters.
    {m,n}    Matches from m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    \"\\\\\"     Either escapes special characters or signals a special sequence.
    []       Indicates a set of characters.
             A \"^\" as the first character indicates a complementing set.
    \"|\"      A|B, creates an RE that will match either A or B.
    (...)    Matches the RE inside the parentheses.
             The contents can be retrieved or matched later in the string.
    (?iLmsux) Set the I, L, M, S, U, or X flag for the RE (see below).
    (?:...)  Non-grouping version of regular parentheses.
    (?P<name>...) The substring matched by the group is accessible by name.
    (?P=name)     Matches the text matched earlier by the group named name.
    (?#...)  A comment; ignored.
    (?=...)  Matches if ... matches next, but doesn't consume the string.
    (?!...)  Matches if ... doesn't match next.
    (?<=...) Matches if preceded by ... (must be fixed length).
    (?<!...) Matches if not preceded by ... (must be fixed length).
    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                       the (optional) no pattern otherwise.

The special sequences consist of \"\\\\\" and a character from the list
below.  If the ordinary character is not on the list, then the
resulting RE will match the second character.
    \\number  Matches the contents of the group of the same number.
    \\A       Matches only at the start of the string.
    \\Z       Matches only at the end of the string.
    \\b       Matches the empty string, but only at the start or end of a word.
    \\B       Matches the empty string, but not at the start or end of a word.
    \\d       Matches any decimal digit; equivalent to the set [0-9].
    \\D       Matches any non-digit character; equivalent to the set [^0-9].
    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v].
    \\S       Matches any non-whitespace character; equiv. to [^ \\t\\n\\r\\f\\v].
    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_].
             With LOCALE, it will match the set [0-9_] plus characters defined
             as letters for the current locale.
    \\W       Matches the complement of \\w.
    \\\\       Matches a literal backslash.

This module exports the following functions:
    match    Match a regular expression pattern to the beginning of a string.
    search   Search a string for the presence of a pattern.
    sub      Substitute occurrences of a pattern found in a string.
    subn     Same as sub, but also return the number of substitutions made.
    split    Split a string by the occurrences of a pattern.
    findall  Find all occurrences of a pattern in a string.
    finditer Return an iterator yielding a match object for each match.
    compile  Compile a pattern into a RegexObject.
    purge    Clear the regular expression cache.
    escape   Backslash all non-alphanumerics in a string.

Some of the functions in this module takes flags as optional parameters:
    I  IGNORECASE  Perform case-insensitive matching.
    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.
    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)
                   as well as the string.
                   \"$\" matches the end of lines (before a newline) as well
                   as the end of the string.
    S  DOTALL      \".\" matches any character at all, including the newline.
    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
    U  UNICODE     Make \\w, \\W, \\b, \\B, dependent on the Unicode locale.

This module also defines an exception 'error'.

\"\"\"" code nil nil [501 5342])
            ("sys" include nil nil [5344 5354])
            ("sre_compile" include nil nil [5355 5373])
            ("sre_parse" include nil nil [5374 5390])
            ("__all__" variable nil nil [5409 5637])
            ("__version__" variable nil nil [5639 5660])
            ("I" variable nil nil [5670 5718])
            ("L" variable nil nil [5733 5773])
            ("U" variable nil nil [5804 5846])
            ("M" variable nil nil [5871 5917])
            ("S" variable nil nil [5950 5990])
            ("X" variable nil nil [6016 6058])
            ("T" variable nil nil [6146 6190])
            ("DEBUG" variable nil nil [6214 6248])
            ("error" variable nil nil [6299 6324])
            ("match" function
               (:documentation "Try to apply the pattern at the start of the string, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6427 6434])
                    ("string" variable nil (reparse-symbol function_parameters) [6436 6442])
                    ("flags" variable nil (reparse-symbol function_parameters) [6444 6449]))                  )
                nil [6417 6628])
            ("search" function
               (:documentation "Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6640 6647])
                    ("string" variable nil (reparse-symbol function_parameters) [6649 6655])
                    ("flags" variable nil (reparse-symbol function_parameters) [6657 6662]))                  )
                nil [6629 6845])
            ("sub" function
               (:documentation "Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it's passed the match object and must return
    a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6854 6861])
                    ("repl" variable nil (reparse-symbol function_parameters) [6863 6867])
                    ("string" variable nil (reparse-symbol function_parameters) [6869 6875])
                    ("count" variable nil (reparse-symbol function_parameters) [6877 6882])
                    ("flags" variable nil (reparse-symbol function_parameters) [6886 6891]))                  )
                nil [6846 7314])
            ("subn" function
               (:documentation "Return a 2-tuple containing (new_string, number).
    new_string is the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in the source
    string by the replacement repl.  number is the number of
    substitutions that were made. repl can be either a string or a
    callable; if a string, backslash escapes in it are processed.
    If it is a callable, it's passed the match object and must
    return a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7324 7331])
                    ("repl" variable nil (reparse-symbol function_parameters) [7333 7337])
                    ("string" variable nil (reparse-symbol function_parameters) [7339 7345])
                    ("count" variable nil (reparse-symbol function_parameters) [7347 7352])
                    ("flags" variable nil (reparse-symbol function_parameters) [7356 7361]))                  )
                nil [7315 7914])
            ("split" function
               (:documentation "Split the source string by the occurrences of the pattern,
    returning a list containing the resulting substrings."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7925 7932])
                    ("string" variable nil (reparse-symbol function_parameters) [7934 7940])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [7942 7950])
                    ("flags" variable nil (reparse-symbol function_parameters) [7954 7959]))                  )
                nil [7915 8151])
            ("findall" function
               (:documentation "Return a list of all non-overlapping matches in the string.

    If one or more groups are present in the pattern, return a
    list of groups; this will be a list of tuples if the pattern
    has more than one group.

    Empty matches are included in the result."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [8164 8171])
                    ("string" variable nil (reparse-symbol function_parameters) [8173 8179])
                    ("flags" variable nil (reparse-symbol function_parameters) [8181 8186]))                  )
                nil [8152 8518])
            ("if" code nil nil [8519 8878])
            ("compile" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [8891 8898])
                ("flags" variable nil (reparse-symbol function_parameters) [8900 8905]))              ) nil [8879 9018])
            ("purge" function nil nil [9019 9116])
            ("template" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9130 9137])
                ("flags" variable nil (reparse-symbol function_parameters) [9139 9144]))              ) nil [9117 9248])
            ("_alphanum" variable nil nil [9249 9341])
            ("escape" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9354 9361]))              ) nil [9343 12960]))          
      :file "re.py"
      :pointmax 12960
      :fsize 12959
      :lastmodtime '(21149 51618 90875 490000)
      :unmatched-syntax nil)
    (semanticdb-table "tempfile.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Temporary files.

This module provides generic, low- and high-level interfaces for
creating temporary files and directories.  The interfaces listed
as \"safe\" just below can be used without fear of race conditions.
Those listed as \"unsafe\" cannot, and are provided for backward
compatibility only.

This module also provides some data items to the user:

  TMP_MAX  - maximum number of names that will be tried before
             giving up.
  template - the default prefix for all temporary names.
             You may change this to control the default prefix.
  tempdir  - If this is set to a string before the first use of
             any routine from this module, it will be considered as
             another candidate location to store temporary files.
\"\"\"" code nil nil [1 767])
            ("__all__" variable nil nil [769 1112])
            ("io" include nil nil [1127 1143])
            ("os" include nil nil [1144 1160])
            ("errno" include nil nil [1161 1183])
            ("random" include nil nil [1184 1220])
            ("try" code nil nil [1222 1342])
            ("try" code nil nil [1343 1727])
            ("try" code nil nil [1729 1818])
            ("_allocate_lock" variable nil nil [1818 1856])
            ("_text_openflags" code nil nil [1858 1913])
            ("if" code nil nil [1914 1985])
            ("if" code nil nil [1985 2054])
            ("_bin_openflags" variable nil nil [2055 2087])
            ("if" code nil nil [2088 2152])
            ("if" code nil nil [2153 2233])
            ("template" variable nil nil [2234 2250])
            ("_once_lock" variable nil nil [2274 2303])
            ("if" code nil nil [2305 2630])
            ("_exists" function (:arguments 
              ( ("fn" variable nil (reparse-symbol function_parameters) [2643 2645]))              ) nil [2631 2748])
            ("_RandomNameSequence" type
               (:documentation "An instance of _RandomNameSequence generates an endless
    sequence of unpredictable strings which can safely be incorporated
    into file names.  Each string is six characters long.  Multiple
    threads can safely use the same instance at the same time.

    _RandomNameSequence is an iterator."
                :members 
                  ( ("characters" variable nil (reparse-symbol indented_block_body) [3090 3216])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3250 3279])
                            ("self" variable nil (reparse-symbol indented_block_body) [3288 3321]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3235 3239]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3222 3322])
                    ("rng" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3349 3353]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3327 3537])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3555 3559]))                          )
                        (reparse-symbol indented_block_body) [3542 3582])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3596 3600]))                          )
                        (reparse-symbol indented_block_body) [3587 3866]))                  
                :type "class")
                nil [2749 3866])
            ("_candidate_tempdir_list" function (:documentation "Generate a list of candidate temporary directories which
    _get_default_tempdir will try.") nil [3867 4700])
            ("_get_default_tempdir" function (:documentation "Calculate the default directory to use for temporary files.
    This routine should be called exactly once.

    We determine whether or not a candidate temp dir is usable by
    trying to create and write to a file in that directory.  If this
    is successful, the test file is deleted.  To prevent denial of
    service, the name of the test file must be randomized.") nil [4701 6174])
            ("_name_sequence" variable nil nil [6175 6196])
            ("_get_candidate_names" function (:documentation "Common setup sequence for all user-callable interfaces.") nil [6198 6562])
            ("_mkstemp_inner" function
               (:documentation "Code common to mkstemp, TemporaryFile, and NamedTemporaryFile."
                :arguments 
                  ( ("dir" variable nil (reparse-symbol function_parameters) [6583 6586])
                    ("pre" variable nil (reparse-symbol function_parameters) [6588 6591])
                    ("suf" variable nil (reparse-symbol function_parameters) [6593 6596])
                    ("flags" variable nil (reparse-symbol function_parameters) [6598 6603]))                  )
                nil [6564 7399])
            ("gettempprefix" function (:documentation "Accessor for tempdir.template.") nil [7429 7511])
            ("tempdir" variable nil nil [7512 7526])
            ("gettempdir" function (:documentation "Accessor for tempfile.tempdir.") nil [7528 7822])
            ("mkstemp" function
               (:documentation "User-callable function to create and return a unique temporary
    file.  The return value is a pair (fd, name) where fd is the
    file descriptor returned by os.open, and name is the filename.

    If 'suffix' is specified, the file name will end with that suffix,
    otherwise there will be no suffix.

    If 'prefix' is specified, the file name will begin with that prefix,
    otherwise a default prefix is used.

    If 'dir' is specified, the file will be created in that directory,
    otherwise a default directory is used.

    If 'text' is specified and true, the file is opened in text
    mode.  Else (the default) the file is opened in binary mode.  On
    some operating systems, this makes no difference.

    The file is readable and writable only by the creating user ID.
    If the operating system uses permission bits to indicate whether a
    file is executable, the file is executable by no one. The file
    descriptor is not inherited by children of this process.

    Caller is responsible for deleting the file when done with it.
    "
                :arguments 
                  ( ("suffix" variable nil (reparse-symbol function_parameters) [7835 7841])
                    ("prefix" variable nil (reparse-symbol function_parameters) [7846 7852])
                    ("dir" variable nil (reparse-symbol function_parameters) [7863 7866])
                    ("text" variable nil (reparse-symbol function_parameters) [7873 7877]))                  )
                nil [7823 9150])
            ("mkdtemp" function
               (:documentation "User-callable function to create and return a unique temporary
    directory.  The return value is the pathname of the directory.

    Arguments are as for mkstemp, except that the 'text' argument is
    not accepted.

    The directory is readable, writable, and searchable only by the
    creating user.

    Caller is responsible for deleting the directory when done with it.
    "
                :arguments 
                  ( ("suffix" variable nil (reparse-symbol function_parameters) [9164 9170])
                    ("prefix" variable nil (reparse-symbol function_parameters) [9175 9181])
                    ("dir" variable nil (reparse-symbol function_parameters) [9192 9195]))                  )
                nil [9152 10074])
            ("mktemp" function
               (:documentation "User-callable function to return a unique temporary file name.  The
    file is not created.

    Arguments are as for mkstemp, except that the 'text' argument is
    not accepted.

    This function is unsafe and should not be used.  The file name
    refers to a file that did not exist at some point, but by the time
    you get around to creating it, someone else may have beaten you to
    the punch.
    "
                :arguments 
                  ( ("suffix" variable nil (reparse-symbol function_parameters) [10086 10092])
                    ("prefix" variable nil (reparse-symbol function_parameters) [10097 10103])
                    ("dir" variable nil (reparse-symbol function_parameters) [10114 10117]))                  )
                nil [10075 11027])
            ("_TemporaryFileWrapper" type
               (:documentation "Temporary file wrapper

    This class provides a wrapper around files opened for
    temporary use.  In particular, it seeks to automatically
    remove the file when it is no longer needed.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11323 11339])
                            ("self" variable nil (reparse-symbol indented_block_body) [11348 11364])
                            ("self" variable nil (reparse-symbol indented_block_body) [11373 11398])
                            ("self" variable nil (reparse-symbol indented_block_body) [11407 11427]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11283 11287])
                            ("file" variable nil (reparse-symbol function_parameters) [11289 11293])
                            ("name" variable nil (reparse-symbol function_parameters) [11295 11299])
                            ("delete" variable nil (reparse-symbol function_parameters) [11301 11307]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11270 11428])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11449 11453])
                            ("name" variable nil (reparse-symbol function_parameters) [11455 11459]))                          )
                        (reparse-symbol indented_block_body) [11433 11802])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11939 11943]))                          )
                        (reparse-symbol indented_block_body) [11925 11996])
                    ("if" code nil (reparse-symbol indented_block_body) [12208 13183]))                  
                :type "class")
                nil [11029 13183])
            ("NamedTemporaryFile" function
               (:documentation "Create and return a temporary file.
    Arguments:
    'prefix', 'suffix', 'dir' -- as for mkstemp.
    'mode' -- the mode argument to os.fdopen (default \"w+b\").
    'bufsize' -- the buffer size argument to os.fdopen (default -1).
    'delete' -- whether the file is deleted on close (default True).
    The file is created as mkstemp() would do it.

    Returns an object with a file-like interface; the name of the file
    is accessible as file.name.  The file will be automatically deleted
    when it is closed unless the 'delete' argument is set to False.
    "
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [13208 13212])
                    ("bufsize" variable nil (reparse-symbol function_parameters) [13220 13227])
                    ("suffix" variable nil (reparse-symbol function_parameters) [13232 13238])
                    ("prefix" variable nil (reparse-symbol function_parameters) [13266 13272])
                    ("dir" variable nil (reparse-symbol function_parameters) [13283 13286])
                    ("delete" variable nil (reparse-symbol function_parameters) [13293 13299]))                  )
                nil [13185 14384])
            ("if" code nil nil [14385 15528])
            ("SpooledTemporaryFile" type
               (:documentation "Temporary file wrapper, specialized to switch from
    StringIO to a real file when it exceeds a certain size or
    when a fileno is needed.
    "
                :members 
                  ( ("_rolled" variable nil (reparse-symbol indented_block_body) [15718 15733])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [15858 15882])
                            ("self" variable nil (reparse-symbol indented_block_body) [15891 15916])
                            ("self" variable nil (reparse-symbol indented_block_body) [15925 15945])
                            ("self" variable nil (reparse-symbol indented_block_body) [15954 16016]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15752 15756])
                            ("max_size" variable nil (reparse-symbol function_parameters) [15758 15766])
                            ("mode" variable nil (reparse-symbol function_parameters) [15770 15774])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [15782 15789])
                            ("suffix" variable nil (reparse-symbol function_parameters) [15811 15817])
                            ("prefix" variable nil (reparse-symbol function_parameters) [15822 15828])
                            ("dir" variable nil (reparse-symbol function_parameters) [15839 15842]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15739 16017])
                    ("_check" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16033 16037])
                            ("file" variable nil (reparse-symbol function_parameters) [16039 16043]))                          )
                        (reparse-symbol indented_block_body) [16022 16188])
                    ("rollover" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16206 16210]))                          )
                        (reparse-symbol indented_block_body) [16193 16484])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16732 16736]))                          )
                        (reparse-symbol indented_block_body) [16718 16859])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16877 16881])
                            ("exc" variable nil (reparse-symbol function_parameters) [16883 16886])
                            ("value" variable nil (reparse-symbol function_parameters) [16888 16893])
                            ("tb" variable nil (reparse-symbol function_parameters) [16895 16897]))                          )
                        (reparse-symbol indented_block_body) [16864 16927])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16965 16969]))                          )
                        (reparse-symbol indented_block_body) [16952 17009])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17024 17028]))                          )
                        (reparse-symbol indented_block_body) [17014 17058])
                    ("closed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17088 17092]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17063 17128])
                    ("fileno" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17144 17148]))                          )
                        (reparse-symbol indented_block_body) [17133 17210])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17225 17229]))                          )
                        (reparse-symbol indented_block_body) [17215 17259])
                    ("isatty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17275 17279]))                          )
                        (reparse-symbol indented_block_body) [17264 17317])
                    ("mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17345 17349]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17322 17477])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17505 17509]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17482 17615])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17629 17633]))                          )
                        (reparse-symbol indented_block_body) [17620 17667])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17681 17685])
                            ("args" variable nil (reparse-symbol function_parameters) [17687 17692]))                          )
                        (reparse-symbol indented_block_body) [17672 17733])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17751 17755])
                            ("args" variable nil (reparse-symbol function_parameters) [17757 17762]))                          )
                        (reparse-symbol indented_block_body) [17738 17807])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17826 17830])
                            ("args" variable nil (reparse-symbol function_parameters) [17832 17837]))                          )
                        (reparse-symbol indented_block_body) [17812 17883])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17897 17901])
                            ("args" variable nil (reparse-symbol function_parameters) [17903 17908]))                          )
                        (reparse-symbol indented_block_body) [17888 17942])
                    ("softspace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17975 17979]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17947 18018])
                    ("tell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18032 18036]))                          )
                        (reparse-symbol indented_block_body) [18023 18072])
                    ("truncate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18090 18094]))                          )
                        (reparse-symbol indented_block_body) [18077 18127])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18142 18146])
                            ("s" variable nil (reparse-symbol function_parameters) [18148 18149]))                          )
                        (reparse-symbol indented_block_body) [18132 18249])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18269 18273])
                            ("iterable" variable nil (reparse-symbol function_parameters) [18275 18283]))                          )
                        (reparse-symbol indented_block_body) [18254 18395])
                    ("xreadlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18415 18419])
                            ("args" variable nil (reparse-symbol function_parameters) [18421 18426]))                          )
                        (reparse-symbol indented_block_body) [18400 18605]))                  
                :type "class")
                nil [15529 18605]))          
      :file "tempfile.py"
      :pointmax 18605
      :fsize 18604
      :lastmodtime '(21149 51618 169875 856000)
      :unmatched-syntax '((INDENT_BLOCK 5921 . 6062) (NEWLINE 5920 . 5921) (COLON 5919 . 5920) (TRY 5496 . 5499) (AS 5915 . 5917)))
    (semanticdb-table "os.py"
      :major-mode 'python-mode
      :tags 
        '( ("r\"\"\"OS routines for Mac, NT, or Posix depending on what system we're on.

This exports:
  - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.
  - os.path is one of the modules posixpath, or ntpath
  - os.name is 'posix', 'nt', 'os2', 'ce' or 'riscos'
  - os.curdir is a string representing the current directory ('.' or ':')
  - os.pardir is a string representing the parent directory ('..' or '::')
  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\\\')
  - os.extsep is the extension separator ('.' or '/')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms.  Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).
\"\"\"" code nil nil [1 1163])
            ("errno" include nil nil [1169 1186])
            ("sys" include nil nil [1169 1186])
            ("_names" variable nil nil [1188 1221])
            ("__all__" variable nil nil [1271 1446])
            ("_get_exports_list" function (:arguments 
              ( ("module" variable nil (reparse-symbol function_parameters) [1470 1476]))              ) nil [1448 1606])
            ("if" code nil nil [1607 3137])
            ("sys" variable nil nil [3138 3167])
            ("" code nil nil [3188 3256])
            ("del" code nil nil [3258 3268])
            ("SEEK_SET" variable nil nil [3390 3402])
            ("SEEK_CUR" variable nil nil [3403 3415])
            ("SEEK_END" variable nil nil [3416 3428])
            ("makedirs" function
               (:documentation "makedirs(path [, mode=0777])

    Super-mkdir; create a leaf directory and all intermediate ones.
    Works like mkdir, except that any intermediate path segment (not
    just the rightmost) will be created if it does not exist.  This is
    recursive.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3538 3542])
                    ("mode" variable nil (reparse-symbol function_parameters) [3544 3548]))                  )
                nil [3525 4277])
            ("removedirs" function
               (:documentation "removedirs(path)

    Super-rmdir; remove a leaf directory and all empty intermediate
    ones.  Works like rmdir except that, if the leaf directory is
    successfully removed, directories corresponding to rightmost path
    segments will be pruned away until either the whole path is
    consumed or an error occurs.  Errors during this latter phase are
    ignored -- they generally mean that a directory was not empty.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4293 4297]))                  )
                nil [4278 4984])
            ("renames" function
               (:documentation "renames(old, new)

    Super-rename; create directories as necessary and delete any left
    empty.  Works like rename, except creation of any intermediate
    directories needed to make the new pathname good is attempted
    first.  After the rename, directories corresponding to rightmost
    path segments of the old name will be pruned way until either the
    whole path is consumed or a nonempty directory is found.

    Note: this function can fail with the new directory structure made
    if you lack permissions needed to unlink the leaf directory or
    file.

    "
                :arguments 
                  ( ("old" variable nil (reparse-symbol function_parameters) [4997 5000])
                    ("new" variable nil (reparse-symbol function_parameters) [5002 5005]))                  )
                nil [4985 5856])
            ("__all__" code nil nil [5857 5910])
            ("walk" function
               (:documentation "Directory tree generator.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), yields a 3-tuple

        dirpath, dirnames, filenames

    dirpath is a string, the path to the directory.  dirnames is a list of
    the names of the subdirectories in dirpath (excluding '.' and '..').
    filenames is a list of the names of the non-directory files in dirpath.
    Note that the names in the lists are just names, with no path components.
    To get a full path (which begins with top) to a file or directory in
    dirpath, do os.path.join(dirpath, name).

    If optional arg 'topdown' is true or not specified, the triple for a
    directory is generated before the triples for any of its subdirectories
    (directories are generated top down).  If topdown is false, the triple
    for a directory is generated after the triples for all of its
    subdirectories (directories are generated bottom up).

    When topdown is true, the caller can modify the dirnames list in-place
    (e.g., via del or slice assignment), and walk will only recurse into the
    subdirectories whose names remain in dirnames; this can be used to prune
    the search, or to impose a specific order of visiting.  Modifying
    dirnames when topdown is false is ineffective, since the directories in
    dirnames have already been generated by the time dirnames itself is
    generated.

    By default errors from the os.listdir() call are ignored.  If
    optional arg 'onerror' is specified, it should be a function; it
    will be called with one argument, an os.error instance.  It can
    report the error to continue with the walk, or raise the exception
    to abort the walk.  Note that the filename is available as the
    filename attribute of the exception object.

    By default, os.walk does not follow symbolic links to subdirectories on
    systems that support them.  In order to get this functionality, set the
    optional argument 'followlinks' to true.

    Caution:  if you pass a relative pathname for top, don't change the
    current working directory between resumptions of walk.  walk never
    changes the current directory, and assumes that the client doesn't
    either.

    Example:

    import os
    from os.path import join, getsize
    for root, dirs, files in os.walk('python/Lib/email'):
        print root, \"consumes\",
        print sum([getsize(join(root, name)) for name in files]),
        print \"bytes in\", len(files), \"non-directory files\"
        if 'CVS' in dirs:
            dirs.remove('CVS')  # don't visit CVS directories
    "
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [5921 5924])
                    ("topdown" variable nil (reparse-symbol function_parameters) [5926 5933])
                    ("onerror" variable nil (reparse-symbol function_parameters) [5940 5947])
                    ("followlinks" variable nil (reparse-symbol function_parameters) [5954 5965]))                  )
                nil [5912 9693])
            ("__all__" code nil nil [9694 9716])
            ("try" code nil nil [9758 9810])
            ("execl" function
               (:documentation "execl(file, *args)

    Execute the executable file with argument list args, replacing the
    current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9821 9825])
                    ("args" variable nil (reparse-symbol function_parameters) [9827 9832]))                  )
                nil [9811 9980])
            ("execle" function
               (:documentation "execle(file, *args, env)

    Execute the executable file with argument list args and
    environment env, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9992 9996])
                    ("args" variable nil (reparse-symbol function_parameters) [9998 10003]))                  )
                nil [9981 10207])
            ("execlp" function
               (:documentation "execlp(file, *args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10219 10223])
                    ("args" variable nil (reparse-symbol function_parameters) [10225 10230]))                  )
                nil [10208 10416])
            ("execlpe" function
               (:documentation "execlpe(file, *args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env, replacing the current
    process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10429 10433])
                    ("args" variable nil (reparse-symbol function_parameters) [10435 10440]))                  )
                nil [10417 10686])
            ("execvp" function
               (:documentation "execvp(file, args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10698 10702])
                    ("args" variable nil (reparse-symbol function_parameters) [10704 10708]))                  )
                nil [10687 10939])
            ("execvpe" function
               (:documentation "execvpe(file, args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env , replacing the
    current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10952 10956])
                    ("args" variable nil (reparse-symbol function_parameters) [10958 10962])
                    ("env" variable nil (reparse-symbol function_parameters) [10964 10967]))                  )
                nil [10940 11234])
            ("__all__" code nil nil [11235 11307])
            ("_execvpe" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [11322 11326])
                ("args" variable nil (reparse-symbol function_parameters) [11328 11332])
                ("env" variable nil (reparse-symbol function_parameters) [11334 11337]))              ) nil [11309 12177])
            ("try" code nil nil [12239 16448])
            ("getenv" function
               (:documentation "Get an environment variable, return None if it doesn't exist.
    The optional second argument can specify an alternate default."
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [16460 16463])
                    ("default" variable nil (reparse-symbol function_parameters) [16465 16472]))                  )
                nil [16449 16656])
            ("__all__" code nil nil [16656 16680])
            ("_exists" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [16694 16698]))              ) nil [16682 16730])
            ("if" code nil nil [16774 19677])
            ("if" code nil nil [19678 20675])
            ("if" code nil nil [20677 21783])
            ("if" code nil nil [21817 25083])
            ("copy_reg" include nil nil [25084 25112])
            ("_make_stat_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25136 25139])
                ("dict" variable nil (reparse-symbol function_parameters) [25141 25145]))              ) nil [25114 25182])
            ("_pickle_stat_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25207 25209]))              ) nil [25183 25284])
            ("try" code nil nil [25285 25419])
            ("_make_statvfs_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25445 25448])
                ("dict" variable nil (reparse-symbol function_parameters) [25450 25454]))              ) nil [25420 25494])
            ("_pickle_statvfs_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25522 25524]))              ) nil [25495 25602])
            ("try" code nil nil [25603 25770]))          
      :file "os.py"
      :pointmax 25770
      :fsize 25769
      :lastmodtime '(21149 51618 42875 267000)
      :unmatched-syntax nil)
    (semanticdb-table "optparse.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"A powerful, extensible, and easy-to-use option parser.

By Greg Ward <gward@python.net>

Originally distributed as Optik.

For support, use the optik-users@lists.sourceforge.net mailing list
(http://lists.sourceforge.net/lists/listinfo/optik-users).

Simple usage example:

   from optparse import OptionParser

   parser = OptionParser()
   parser.add_option(\"-f\", \"--file\", dest=\"filename\",
                     help=\"write report to FILE\", metavar=\"FILE\")
   parser.add_option(\"-q\", \"--quiet\",
                     action=\"store_false\", dest=\"verbose\", default=True,
                     help=\"don't print status messages to stdout\")

   (options, args) = parser.parse_args()
\"\"\"" code nil nil [1 686])
            ("__version__" variable nil nil [688 709])
            ("__all__" variable nil nil [711 1164])
            ("__copyright__" variable nil nil [1166 2758])
            ("os" include nil nil [2760 2774])
            ("sys" include nil nil [2760 2774])
            ("types" include nil nil [2775 2787])
            ("textwrap" include nil nil [2788 2803])
            ("_repr" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [2815 2819]))                  )
                nil [2805 2896])
            ("try" code nil nil [3130 3236])
            ("_" variable nil nil [3236 3247])
            ("OptParseError" type
               (:superclasses ("Exception")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3320 3334]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3300 3304])
                            ("msg" variable nil (reparse-symbol function_parameters) [3306 3309]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3287 3335])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3352 3356]))                          )
                        (reparse-symbol indented_block_body) [3340 3383]))                  
                :type "class")
                nil [3250 3383])
            ("OptionError" type
               (:documentation "
    Raised if an Option instance is created with invalid or
    inconsistent arguments.
    "
                :superclasses ("OptParseError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3570 3584])
                            ("self" variable nil (reparse-symbol indented_block_body) [3593 3621]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3542 3546])
                            ("msg" variable nil (reparse-symbol function_parameters) [3548 3551])
                            ("option" variable nil (reparse-symbol function_parameters) [3553 3559]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3529 3622])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3639 3643]))                          )
                        (reparse-symbol indented_block_body) [3627 3779]))                  
                :type "class")
                nil [3385 3779])
            ("OptionConflictError" type
               (:documentation "
    Raised if conflicting options are added to an OptionParser.
    "
                :superclasses ("OptionError")
                :type "class")
                nil [3780 3901])
            ("OptionValueError" type
               (:documentation "
    Raised if an invalid option value is encountered on the command
    line.
    "
                :superclasses ("OptParseError")
                :type "class")
                nil [3902 4036])
            ("BadOptionError" type
               (:documentation "
    Raised if an invalid option is seen on the command line.
    "
                :superclasses ("OptParseError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4193 4215]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4169 4173])
                            ("opt_str" variable nil (reparse-symbol function_parameters) [4175 4182]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4156 4216])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4233 4237]))                          )
                        (reparse-symbol indented_block_body) [4221 4294]))                  
                :type "class")
                nil [4037 4294])
            ("AmbiguousOptionError" type
               (:documentation "
    Raised if an ambiguous option is seen on the command line.
    "
                :superclasses ("BadOptionError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("BadOptionError" code nil (reparse-symbol indented_block_body) [4475 4513])
                            ("self" variable nil (reparse-symbol indented_block_body) [4522 4556]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4436 4440])
                            ("opt_str" variable nil (reparse-symbol function_parameters) [4442 4449])
                            ("possibilities" variable nil (reparse-symbol function_parameters) [4451 4464]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4423 4557])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4574 4578]))                          )
                        (reparse-symbol indented_block_body) [4562 4694]))                  
                :type "class")
                nil [4295 4694])
            ("HelpFormatter" type
               (:documentation "
    Abstract base class for formatting option help.  OptionParser
    instances should use one of the HelpFormatter subclasses for
    formatting help; by default IndentedHelpFormatter is used.

    Instance attributes:
      parser : OptionParser
        the controlling OptionParser instance
      indent_increment : int
        the number of columns to indent per nesting level
      max_help_position : int
        the maximum starting column for option help text
      help_position : int
        the calculated starting column for option help text;
        initially the same as the maximum
      width : int
        total number of columns for output (pass None to constructor for
        this value to be taken from the $COLUMNS environment variable)
      level : int
        current indentation level
      current_indent : int
        current indentation level (in columns)
      help_width : int
        number of columns available for option help text (calculated)
      default_tag : str
        text to replace with each option's default value, \"%default\"
        by default.  Set to false value to disable default value expansion.
      option_strings : { Option : str }
        maps Option instances to the snippet of help text explaining
        the syntax of that option, e.g. \"-h, --help\" or
        \"-fFILE, --file=FILE\"
      _short_opt_fmt : str
        format string controlling how short options with values are
        printed in help text.  Must be either \"%s%s\" (\"-fFILE\") or
        \"%s %s\" (\"-f FILE\"), because those are the two syntaxes that
        Optik supports.
      _long_opt_fmt : str
        similar but for long options; must be either \"%s %s\" (\"--file FILE\")
        or \"%s=%s\" (\"--file=FILE\").
    "
                :members 
                  ( ("NO_DEFAULT_VALUE" variable nil (reparse-symbol indented_block_body) [6475 6500])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6659 6677])
                            ("self" variable nil (reparse-symbol indented_block_body) [6686 6726])
                            ("self" variable nil (reparse-symbol indented_block_body) [6735 6798])
                            ("if" code nil (reparse-symbol indented_block_body) [6807 6986])
                            ("self" variable nil (reparse-symbol indented_block_body) [6994 7012])
                            ("self" variable nil (reparse-symbol indented_block_body) [7021 7044])
                            ("self" variable nil (reparse-symbol indented_block_body) [7053 7067])
                            ("self" variable nil (reparse-symbol indented_block_body) [7076 7098])
                            ("self" variable nil (reparse-symbol indented_block_body) [7133 7163])
                            ("self" variable nil (reparse-symbol indented_block_body) [7172 7201])
                            ("self" variable nil (reparse-symbol indented_block_body) [7210 7234])
                            ("self" variable nil (reparse-symbol indented_block_body) [7243 7272])
                            ("self" variable nil (reparse-symbol indented_block_body) [7281 7309]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6519 6523])
                            ("indent_increment" variable nil (reparse-symbol function_parameters) [6542 6558])
                            ("max_help_position" variable nil (reparse-symbol function_parameters) [6577 6594])
                            ("width" variable nil (reparse-symbol function_parameters) [6613 6618])
                            ("short_first" variable nil (reparse-symbol function_parameters) [6637 6648]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6506 7310])
                    ("set_parser" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7330 7334])
                            ("parser" variable nil (reparse-symbol function_parameters) [7336 7342]))                          )
                        (reparse-symbol indented_block_body) [7315 7374])
                    ("set_short_opt_delimiter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7407 7411])
                            ("delim" variable nil (reparse-symbol function_parameters) [7413 7418]))                          )
                        (reparse-symbol indented_block_body) [7379 7611])
                    ("set_long_opt_delimiter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7643 7647])
                            ("delim" variable nil (reparse-symbol function_parameters) [7649 7654]))                          )
                        (reparse-symbol indented_block_body) [7616 7846])
                    ("indent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7862 7866]))                          )
                        (reparse-symbol indented_block_body) [7851 7946])
                    ("dedent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7962 7966]))                          )
                        (reparse-symbol indented_block_body) [7951 8115])
                    ("format_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8137 8141])
                            ("usage" variable nil (reparse-symbol function_parameters) [8143 8148]))                          )
                        (reparse-symbol indented_block_body) [8120 8214])
                    ("format_heading" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8238 8242])
                            ("heading" variable nil (reparse-symbol function_parameters) [8244 8251]))                          )
                        (reparse-symbol indented_block_body) [8219 8317])
                    ("_format_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8339 8343])
                            ("text" variable nil (reparse-symbol function_parameters) [8345 8349]))                          
                        :documentation "
        Format a paragraph of free-form text for inclusion in the
        help output at the current indentation level.
        ")
                        (reparse-symbol indented_block_body) [8322 8774])
                    ("format_description" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8802 8806])
                            ("description" variable nil (reparse-symbol function_parameters) [8808 8819]))                          )
                        (reparse-symbol indented_block_body) [8779 8939])
                    ("format_epilog" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8962 8966])
                            ("epilog" variable nil (reparse-symbol function_parameters) [8968 8974]))                          )
                        (reparse-symbol indented_block_body) [8944 9091])
                    ("expand_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9116 9120])
                            ("option" variable nil (reparse-symbol function_parameters) [9122 9128]))                          )
                        (reparse-symbol indented_block_body) [9097 9470])
                    ("format_option" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9493 9497])
                            ("option" variable nil (reparse-symbol function_parameters) [9499 9505]))                          )
                        (reparse-symbol indented_block_body) [9475 11085])
                    ("store_option_strings" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11115 11119])
                            ("parser" variable nil (reparse-symbol function_parameters) [11121 11127]))                          )
                        (reparse-symbol indented_block_body) [11090 11846])
                    ("format_option_strings" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11877 11881])
                            ("option" variable nil (reparse-symbol function_parameters) [11883 11889]))                          
                        :documentation "Return a comma-separated list of option strings & metavariables.")
                        (reparse-symbol indented_block_body) [11851 12564]))                  
                :type "class")
                nil [4696 12564])
            ("IndentedHelpFormatter" type
               (:documentation "Format help with indented section bodies.
    "
                :superclasses ("HelpFormatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HelpFormatter" code nil (reparse-symbol indented_block_body) [12837 12935]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12685 12689])
                            ("indent_increment" variable nil (reparse-symbol function_parameters) [12708 12724])
                            ("max_help_position" variable nil (reparse-symbol function_parameters) [12745 12762])
                            ("width" variable nil (reparse-symbol function_parameters) [12784 12789])
                            ("short_first" variable nil (reparse-symbol function_parameters) [12813 12824]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12672 12936])
                    ("format_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12958 12962])
                            ("usage" variable nil (reparse-symbol function_parameters) [12964 12969]))                          )
                        (reparse-symbol indented_block_body) [12941 13012])
                    ("format_heading" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13036 13040])
                            ("heading" variable nil (reparse-symbol function_parameters) [13042 13049]))                          )
                        (reparse-symbol indented_block_body) [13017 13115]))                  
                :type "class")
                nil [12565 13115])
            ("TitledHelpFormatter" type
               (:documentation "Format help with underlined section headers.
    "
                :superclasses ("HelpFormatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HelpFormatter" code nil (reparse-symbol indented_block_body) [13390 13489]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13238 13242])
                            ("indent_increment" variable nil (reparse-symbol function_parameters) [13261 13277])
                            ("max_help_position" variable nil (reparse-symbol function_parameters) [13298 13315])
                            ("width" variable nil (reparse-symbol function_parameters) [13337 13342])
                            ("short_first" variable nil (reparse-symbol function_parameters) [13366 13377]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13225 13490])
                    ("format_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13512 13516])
                            ("usage" variable nil (reparse-symbol function_parameters) [13518 13523]))                          )
                        (reparse-symbol indented_block_body) [13495 13595])
                    ("format_heading" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13619 13623])
                            ("heading" variable nil (reparse-symbol function_parameters) [13625 13632]))                          )
                        (reparse-symbol indented_block_body) [13600 13706]))                  
                :type "class")
                nil [13117 13706])
            ("_parse_num" function (:arguments 
              ( ("val" variable nil (reparse-symbol function_parameters) [13723 13726])
                ("type" variable nil (reparse-symbol function_parameters) [13728 13732]))              ) nil [13708 14108])
            ("_parse_int" function (:arguments 
              ( ("val" variable nil (reparse-symbol function_parameters) [14124 14127]))              ) nil [14109 14162])
            ("_parse_long" function (:arguments 
              ( ("val" variable nil (reparse-symbol function_parameters) [14179 14182]))              ) nil [14163 14218])
            ("_builtin_cvt" variable nil nil [14219 14443])
            ("check_builtin" function (:arguments 
              ( ("option" variable nil (reparse-symbol function_parameters) [14463 14469])
                ("opt" variable nil (reparse-symbol function_parameters) [14471 14474])
                ("value" variable nil (reparse-symbol function_parameters) [14476 14481]))              ) nil [14445 14689])
            ("check_choice" function (:arguments 
              ( ("option" variable nil (reparse-symbol function_parameters) [14707 14713])
                ("opt" variable nil (reparse-symbol function_parameters) [14715 14718])
                ("value" variable nil (reparse-symbol function_parameters) [14720 14725]))              ) nil [14690 14979])
            ("NO_DEFAULT" variable nil nil [15090 15120])
            ("Option" type
               (:documentation "
    Instance attributes:
      _short_opts : [string]
      _long_opts : [string]

      action : string
      type : string
      dest : string
      default : any
      nargs : int
      const : any
      choices : [string]
      callback : function
      callback_args : (any*)
      callback_kwargs : { string : any }
      help : string
      metavar : string
    "
                :members 
                  ( ("ATTRS" variable nil (reparse-symbol indented_block_body) [15624 15908])
                    ("ACTIONS" variable nil (reparse-symbol indented_block_body) [16043 16307])
                    ("STORE_ACTIONS" variable nil (reparse-symbol indented_block_body) [16507 16737])
                    ("TYPED_ACTIONS" variable nil (reparse-symbol indented_block_body) [16880 16969])
                    ("ALWAYS_TYPED_ACTIONS" variable nil (reparse-symbol indented_block_body) [17095 17165])
                    ("CONST_ACTIONS" variable nil (reparse-symbol indented_block_body) [17228 17296])
                    ("TYPES" variable nil (reparse-symbol indented_block_body) [17414 17477])
                    ("TYPE_CHECKER" variable nil (reparse-symbol indented_block_body) [18187 18437])
                    ("CHECK_METHODS" variable nil (reparse-symbol indented_block_body) [18958 18978])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [19236 19257])
                            ("self" variable nil (reparse-symbol indented_block_body) [19266 19286])
                            ("opts" variable nil (reparse-symbol indented_block_body) [19295 19331])
                            ("self" code nil (reparse-symbol indented_block_body) [19340 19367])
                            ("self" code nil (reparse-symbol indented_block_body) [19446 19468])
                            ("for" code nil (reparse-symbol indented_block_body) [19831 19892]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19072 19076])
                            ("opts" variable nil (reparse-symbol function_parameters) [19078 19083])
                            ("attrs" variable nil (reparse-symbol function_parameters) [19085 19092]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19059 19892])
                    ("_check_opt_strings" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19920 19924])
                            ("opts" variable nil (reparse-symbol function_parameters) [19926 19930]))                          )
                        (reparse-symbol indented_block_body) [19897 20242])
                    ("_set_opt_strings" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20268 20272])
                            ("opts" variable nil (reparse-symbol function_parameters) [20274 20278]))                          )
                        (reparse-symbol indented_block_body) [20247 21157])
                    ("_set_attrs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21177 21181])
                            ("attrs" variable nil (reparse-symbol function_parameters) [21183 21188]))                          )
                        (reparse-symbol indented_block_body) [21162 21707])
                    ("_check_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21805 21809]))                          )
                        (reparse-symbol indented_block_body) [21787 21996])
                    ("_check_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22017 22021]))                          )
                        (reparse-symbol indented_block_body) [22001 23377])
                    ("_check_choice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23400 23404]))                          )
                        (reparse-symbol indented_block_body) [23382 23985])
                    ("_check_dest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24006 24010]))                          )
                        (reparse-symbol indented_block_body) [23990 24656])
                    ("_check_const" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24678 24682]))                          )
                        (reparse-symbol indented_block_body) [24661 24891])
                    ("_check_nargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24913 24917]))                          )
                        (reparse-symbol indented_block_body) [24896 25198])
                    ("_check_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25223 25227]))                          )
                        (reparse-symbol indented_block_body) [25203 26506])
                    ("CHECK_METHODS" variable nil (reparse-symbol indented_block_body) [26512 26755])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26848 26852]))                          )
                        (reparse-symbol indented_block_body) [26836 26915])
                    ("__repr__" variable nil (reparse-symbol indented_block_body) [26920 26936])
                    ("takes_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26958 26962]))                          )
                        (reparse-symbol indented_block_body) [26942 27002])
                    ("get_opt_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27026 27030]))                          )
                        (reparse-symbol indented_block_body) [27007 27152])
                    ("check_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27248 27252])
                            ("opt" variable nil (reparse-symbol function_parameters) [27254 27257])
                            ("value" variable nil (reparse-symbol function_parameters) [27259 27264]))                          )
                        (reparse-symbol indented_block_body) [27232 27430])
                    ("convert_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27453 27457])
                            ("opt" variable nil (reparse-symbol function_parameters) [27459 27462])
                            ("value" variable nil (reparse-symbol function_parameters) [27464 27469]))                          )
                        (reparse-symbol indented_block_body) [27435 27676])
                    ("process" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27693 27697])
                            ("opt" variable nil (reparse-symbol function_parameters) [27699 27702])
                            ("value" variable nil (reparse-symbol function_parameters) [27704 27709])
                            ("values" variable nil (reparse-symbol function_parameters) [27711 27717])
                            ("parser" variable nil (reparse-symbol function_parameters) [27719 27725]))                          )
                        (reparse-symbol indented_block_body) [27681 28134])
                    ("take_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28155 28159])
                            ("action" variable nil (reparse-symbol function_parameters) [28161 28167])
                            ("dest" variable nil (reparse-symbol function_parameters) [28169 28173])
                            ("opt" variable nil (reparse-symbol function_parameters) [28175 28178])
                            ("value" variable nil (reparse-symbol function_parameters) [28180 28185])
                            ("values" variable nil (reparse-symbol function_parameters) [28187 28193])
                            ("parser" variable nil (reparse-symbol function_parameters) [28195 28201]))                          )
                        (reparse-symbol indented_block_body) [28139 29280]))                  
                :type "class")
                nil [15123 29280])
            ("SUPPRESS_HELP" code nil nil [29298 29331])
            ("SUPPRESS_USAGE" code nil nil [29332 29367])
            ("try" code nil nil [29369 29572])
            ("Values" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [29635 29738]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29605 29609])
                            ("defaults" variable nil (reparse-symbol function_parameters) [29611 29619]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29592 29738])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29755 29759]))                          )
                        (reparse-symbol indented_block_body) [29743 29796])
                    ("__repr__" variable nil (reparse-symbol indented_block_body) [29801 29817])
                    ("__cmp__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29835 29839])
                            ("other" variable nil (reparse-symbol function_parameters) [29841 29846]))                          )
                        (reparse-symbol indented_block_body) [29823 30070])
                    ("_update_careful" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30095 30099])
                            ("dict" variable nil (reparse-symbol function_parameters) [30101 30105]))                          
                        :documentation "
        Update the option values from an arbitrary dictionary, but only
        use keys from dict that already have a corresponding attribute
        in self.  Any keys in dict without a corresponding attribute
        are silently ignored.
        ")
                        (reparse-symbol indented_block_body) [30075 30551])
                    ("_update_loose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30574 30578])
                            ("dict" variable nil (reparse-symbol function_parameters) [30580 30584]))                          
                        :documentation "
        Update the option values from an arbitrary dictionary,
        using all keys from the dictionary regardless of whether
        they have a corresponding attribute in self or not.
        ")
                        (reparse-symbol indented_block_body) [30556 30834])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30851 30855])
                            ("dict" variable nil (reparse-symbol function_parameters) [30857 30861])
                            ("mode" variable nil (reparse-symbol function_parameters) [30863 30867]))                          )
                        (reparse-symbol indented_block_body) [30839 31083])
                    ("read_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31104 31108])
                            ("modname" variable nil (reparse-symbol function_parameters) [31110 31117])
                            ("mode" variable nil (reparse-symbol function_parameters) [31119 31123]))                          )
                        (reparse-symbol indented_block_body) [31088 31237])
                    ("read_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31256 31260])
                            ("filename" variable nil (reparse-symbol function_parameters) [31262 31270])
                            ("mode" variable nil (reparse-symbol function_parameters) [31272 31276]))                          )
                        (reparse-symbol indented_block_body) [31242 31373])
                    ("ensure_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31395 31399])
                            ("attr" variable nil (reparse-symbol function_parameters) [31401 31405])
                            ("value" variable nil (reparse-symbol function_parameters) [31407 31412]))                          )
                        (reparse-symbol indented_block_body) [31378 31556]))                  
                :type "class")
                nil [29573 31556])
            ("OptionContainer" type
               (:documentation "
    Abstract base class.

    Class attributes:
      standard_option_list : [Option]
        list of standard options that will be accepted by all instances
        of this parser class (intended to be overridden by subclasses).

    Instance attributes:
      option_list : [Option]
        the list of Option objects contained by this OptionContainer
      _short_opt : { string : Option }
        dictionary mapping short option strings, eg. \"-f\" or \"-X\",
        to the Option instances that implement them.  If an Option
        has multiple short option strings, it will appears in this
        dictionary multiple times. [1]
      _long_opt : { string : Option }
        dictionary mapping long option strings, eg. \"--file\" or
        \"--exclude\", to the Option instances that implement them.
        Again, a given Option can occur multiple times in this
        dictionary. [1]
      defaults : { string : any }
        dictionary mapping option destination names to default
        values for each destination [1]

    [1] These mappings are common to (shared by) all components of the
        controlling OptionParser, where they are initially created.

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" code nil (reparse-symbol indented_block_body) [33095 33121])
                            ("self" variable nil (reparse-symbol indented_block_body) [33131 33163])
                            ("self" code nil (reparse-symbol indented_block_body) [33172 33215])
                            ("self" code nil (reparse-symbol indented_block_body) [33224 33257]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32782 32786])
                            ("option_class" variable nil (reparse-symbol function_parameters) [32788 32800])
                            ("conflict_handler" variable nil (reparse-symbol function_parameters) [32802 32818])
                            ("description" variable nil (reparse-symbol function_parameters) [32820 32831]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32769 33258])
                    ("_create_option_mappings" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33291 33295]))                          )
                        (reparse-symbol indented_block_body) [33263 33686])
                    ("_share_option_mappings" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33719 33723])
                            ("parser" variable nil (reparse-symbol function_parameters) [33725 33731]))                          )
                        (reparse-symbol indented_block_body) [33692 33995])
                    ("set_conflict_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34025 34029])
                            ("handler" variable nil (reparse-symbol function_parameters) [34031 34038]))                          )
                        (reparse-symbol indented_block_body) [34000 34208])
                    ("set_description" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34233 34237])
                            ("description" variable nil (reparse-symbol function_parameters) [34239 34250]))                          )
                        (reparse-symbol indented_block_body) [34213 34292])
                    ("get_description" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34317 34321]))                          )
                        (reparse-symbol indented_block_body) [34297 34356])
                    ("destroy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34374 34378]))                          
                        :documentation "see OptionParser.destroy().")
                        (reparse-symbol indented_block_body) [34362 34504])
                    ("_check_conflict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34604 34608])
                            ("option" variable nil (reparse-symbol function_parameters) [34610 34616]))                          )
                        (reparse-symbol indented_block_body) [34584 35749])
                    ("add_option" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35769 35773])
                            ("args" variable nil (reparse-symbol function_parameters) [35775 35780])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [35782 35790]))                          
                        :documentation "add_option(Option)
           add_option(opt_str, ..., kwarg=val, ...)
        ")
                        (reparse-symbol indented_block_body) [35754 36828])
                    ("add_options" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36849 36853])
                            ("option_list" variable nil (reparse-symbol function_parameters) [36855 36866]))                          )
                        (reparse-symbol indented_block_body) [36833 36940])
                    ("get_option" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37034 37038])
                            ("opt_str" variable nil (reparse-symbol function_parameters) [37040 37047]))                          )
                        (reparse-symbol indented_block_body) [37019 37143])
                    ("has_option" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37163 37167])
                            ("opt_str" variable nil (reparse-symbol function_parameters) [37169 37176]))                          )
                        (reparse-symbol indented_block_body) [37148 37268])
                    ("remove_option" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37291 37295])
                            ("opt_str" variable nil (reparse-symbol function_parameters) [37297 37304]))                          )
                        (reparse-symbol indented_block_body) [37273 37719])
                    ("format_option_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37822 37826])
                            ("formatter" variable nil (reparse-symbol function_parameters) [37828 37837]))                          )
                        (reparse-symbol indented_block_body) [37799 38098])
                    ("format_description" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38126 38130])
                            ("formatter" variable nil (reparse-symbol function_parameters) [38132 38141]))                          )
                        (reparse-symbol indented_block_body) [38103 38212])
                    ("format_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38233 38237])
                            ("formatter" variable nil (reparse-symbol function_parameters) [38239 38248]))                          )
                        (reparse-symbol indented_block_body) [38217 38486]))                  
                :type "class")
                nil [31558 38486])
            ("OptionGroup" type
               (:superclasses ("OptionContainer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [38591 38611])
                            ("OptionContainer" code nil (reparse-symbol indented_block_body) [38620 38722])
                            ("self" variable nil (reparse-symbol indented_block_body) [38731 38749]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38543 38547])
                            ("parser" variable nil (reparse-symbol function_parameters) [38549 38555])
                            ("title" variable nil (reparse-symbol function_parameters) [38557 38562])
                            ("description" variable nil (reparse-symbol function_parameters) [38564 38575]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38530 38750])
                    ("_create_option_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38779 38783]))                          )
                        (reparse-symbol indented_block_body) [38755 38865])
                    ("set_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38884 38888])
                            ("title" variable nil (reparse-symbol function_parameters) [38890 38895]))                          )
                        (reparse-symbol indented_block_body) [38870 38925])
                    ("destroy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38942 38946]))                          
                        :documentation "see OptionParser.destroy().")
                        (reparse-symbol indented_block_body) [38930 39058])
                    ("format_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39153 39157])
                            ("formatter" variable nil (reparse-symbol function_parameters) [39159 39168]))                          )
                        (reparse-symbol indented_block_body) [39137 39364]))                  
                :type "class")
                nil [38488 39364])
            ("OptionParser" type
               (:documentation "
    Class attributes:
      standard_option_list : [Option]
        list of standard options that will be accepted by all instances
        of this parser class (intended to be overridden by subclasses).

    Instance attributes:
      usage : string
        a usage string for your program.  Before it is displayed
        to the user, \"%prog\" will be expanded to the name of
        your program (self.prog or os.path.basename(sys.argv[0])).
      prog : string
        the name of the current program (to override
        os.path.basename(sys.argv[0])).
      description : string
        A paragraph of text giving a brief overview of your program.
        optparse reformats this paragraph to fit the current terminal
        width and prints it when the user requests help (after usage,
        but before the list of options).
      epilog : string
        paragraph of help text to print after option help

      option_groups : [OptionGroup]
        list of option groups in this parser (option groups are
        irrelevant for parsing the command-line, but very useful
        for generating help)

      allow_interspersed_args : bool = true
        if true, positional arguments may be interspersed with options.
        Assuming -a and -b each take a single argument, the command-line
          -ablah foo bar -bboo baz
        will be interpreted the same as
          -ablah -bboo -- foo bar baz
        If this flag were false, that command line would be interpreted as
          -ablah -- foo bar -bboo baz
        -- ie. we stop processing options as soon as we see the first
        non-option argument.  (This is the tradition followed by
        Python's getopt module, Perl's Getopt::Std, and other argument-
        parsing libraries, but it is generally annoying to users.)

      process_default_values : bool = true
        if true, option default values are processed similarly to option
        values from the command line: that is, they are passed to the
        type-checking function for the option's type (as long as the
        default value is a string).  (This really only matters if you
        have defined custom types; see SF bug #955889.)  Set it to false
        to restore the behaviour of Optik 1.4.1 and earlier.

      rargs : [string]
        the argument list currently being parsed.  Only set when
        parse_args() is active, and continually trimmed down as
        we consume arguments.  Mainly there for the benefit of
        callback options.
      largs : [string]
        the list of leftover arguments that we have skipped while
        parsing options.  If allow_interspersed_args is false, this
        list is always empty.
      values : Values
        the set of option values currently being accumulated.  Only
        set when parse_args() is active.  Also mainly for callbacks.

    Because of the 'rargs', 'largs', and 'values' attributes,
    OptionParser is not thread-safe.  If, for some perverse reason, you
    need to parse command-line arguments simultaneously in different
    threads, use different OptionParser instances.

    "
                :superclasses ("OptionContainer")
                :members 
                  ( ("standard_option_list" variable nil (reparse-symbol indented_block_body) [42529 42554])
                    ("__init__" function
                       (:suite 
                          ( ("OptionContainer" code nil (reparse-symbol indented_block_body) [42929 43017])
                            ("self" code nil (reparse-symbol indented_block_body) [43026 43047])
                            ("self" variable nil (reparse-symbol indented_block_body) [43056 43072])
                            ("self" variable nil (reparse-symbol indented_block_body) [43081 43103])
                            ("self" variable nil (reparse-symbol indented_block_body) [43112 43147])
                            ("self" variable nil (reparse-symbol indented_block_body) [43156 43190])
                            ("if" code nil (reparse-symbol indented_block_body) [43199 43269])
                            ("self" variable nil (reparse-symbol indented_block_body) [43277 43303])
                            ("self" code nil (reparse-symbol indented_block_body) [43312 43343])
                            ("self" variable nil (reparse-symbol indented_block_body) [43352 43372])
                            ("self" code nil (reparse-symbol indented_block_body) [43616 43716])
                            ("self" code nil (reparse-symbol indented_block_body) [43726 43752]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42573 42577])
                            ("usage" variable nil (reparse-symbol function_parameters) [42596 42601])
                            ("option_list" variable nil (reparse-symbol function_parameters) [42625 42636])
                            ("option_class" variable nil (reparse-symbol function_parameters) [42660 42672])
                            ("version" variable nil (reparse-symbol function_parameters) [42698 42705])
                            ("conflict_handler" variable nil (reparse-symbol function_parameters) [42729 42745])
                            ("description" variable nil (reparse-symbol function_parameters) [42772 42783])
                            ("formatter" variable nil (reparse-symbol function_parameters) [42807 42816])
                            ("add_help_option" variable nil (reparse-symbol function_parameters) [42840 42855])
                            ("prog" variable nil (reparse-symbol function_parameters) [42879 42883])
                            ("epilog" variable nil (reparse-symbol function_parameters) [42907 42913]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [42560 43753])
                    ("destroy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43771 43775]))                          
                        :documentation "
        Declare that you are done with this OptionParser.  This cleans up
        reference cycles so the OptionParser (and all objects referenced by
        it) can be garbage-collected promptly.  After calling destroy(), the
        OptionParser is unusable.
        ")
                        (reparse-symbol indented_block_body) [43759 44385])
                    ("_create_option_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44414 44418]))                          )
                        (reparse-symbol indented_block_body) [44390 44522])
                    ("_add_help_option" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44548 44552]))                          )
                        (reparse-symbol indented_block_body) [44527 44701])
                    ("_add_version_option" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44730 44734]))                          )
                        (reparse-symbol indented_block_body) [44706 44890])
                    ("_populate_option_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44921 44925])
                            ("option_list" variable nil (reparse-symbol function_parameters) [44927 44938])
                            ("add_help" variable nil (reparse-symbol function_parameters) [44940 44948]))                          )
                        (reparse-symbol indented_block_body) [44895 45237])
                    ("_init_parsing_state" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45266 45270]))                          )
                        (reparse-symbol indented_block_body) [45242 45426])
                    ("set_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45520 45524])
                            ("usage" variable nil (reparse-symbol function_parameters) [45526 45531]))                          )
                        (reparse-symbol indented_block_body) [45506 45870])
                    ("enable_interspersed_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45904 45908]))                          
                        :documentation "Set parsing to not stop on the first non-option, allowing
        interspersing switches with command arguments. This is the
        default behavior. See also disable_interspersed_args() and the
        class documentation description of the attribute
        allow_interspersed_args.")
                        (reparse-symbol indented_block_body) [45875 46255])
                    ("disable_interspersed_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46290 46294]))                          
                        :documentation "Set parsing to stop on the first non-option. Use this if
        you have a command processor which runs another command that
        has options of its own and you want to make sure these options
        don't get confused.
        ")
                        (reparse-symbol indented_block_body) [46260 46590])
                    ("set_process_default_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46626 46630])
                            ("process" variable nil (reparse-symbol function_parameters) [46632 46639]))                          )
                        (reparse-symbol indented_block_body) [46595 46688])
                    ("set_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46709 46713])
                            ("dest" variable nil (reparse-symbol function_parameters) [46715 46719])
                            ("value" variable nil (reparse-symbol function_parameters) [46721 46726]))                          )
                        (reparse-symbol indented_block_body) [46693 46765])
                    ("set_defaults" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46787 46791])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [46793 46801]))                          )
                        (reparse-symbol indented_block_body) [46770 46841])
                    ("_get_all_options" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46867 46871]))                          )
                        (reparse-symbol indented_block_body) [46846 47022])
                    ("get_default_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47050 47054]))                          )
                        (reparse-symbol indented_block_body) [47027 47520])
                    ("add_option_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47621 47625])
                            ("args" variable nil (reparse-symbol function_parameters) [47627 47632])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [47634 47642]))                          )
                        (reparse-symbol indented_block_body) [47600 48246])
                    ("get_option_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48272 48276])
                            ("opt_str" variable nil (reparse-symbol function_parameters) [48278 48285]))                          )
                        (reparse-symbol indented_block_body) [48251 48493])
                    ("_get_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48587 48591])
                            ("args" variable nil (reparse-symbol function_parameters) [48593 48597]))                          )
                        (reparse-symbol indented_block_body) [48573 48740])
                    ("parse_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48760 48764])
                            ("args" variable nil (reparse-symbol function_parameters) [48766 48770])
                            ("values" variable nil (reparse-symbol function_parameters) [48777 48783]))                          
                        :documentation "
        parse_args(args : [string] = sys.argv[1:],
                   values : Values = None)
        -> (values : Values, args : [string])

        Parse the command-line options found in 'args' (default:
        sys.argv[1:]).  Any errors result in a call to 'error()', which
        by default prints the usage message to stderr and calls
        sys.exit() with an error message.  On success returns a pair
        (values, args) where 'values' is an Values instance (with all
        your option values) and 'args' is the list of arguments left
        over after parsing options.
        ")
                        (reparse-symbol indented_block_body) [48745 50263])
                    ("check_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50285 50289])
                            ("values" variable nil (reparse-symbol function_parameters) [50291 50297])
                            ("args" variable nil (reparse-symbol function_parameters) [50299 50303]))                          
                        :documentation "
        check_values(values : Values, args : [string])
        -> (values : Values, args : [string])

        Check that the supplied option values and leftover arguments are
        valid.  Returns the option values and leftover arguments
        (possibly adjusted, possibly completely new -- whatever you
        like).  Default implementation just returns the passed-in
        values; subclasses may override as desired.
        ")
                        (reparse-symbol indented_block_body) [50268 50786])
                    ("_process_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50809 50813])
                            ("largs" variable nil (reparse-symbol function_parameters) [50815 50820])
                            ("rargs" variable nil (reparse-symbol function_parameters) [50822 50827])
                            ("values" variable nil (reparse-symbol function_parameters) [50829 50835]))                          
                        :documentation "_process_args(largs : [string],
                         rargs : [string],
                         values : Values)

        Process command-line arguments and populate 'values', consuming
        options and arguments from 'rargs'.  If 'allow_interspersed_args' is
        false, stop at the first non-option argument.  If true, accumulate any
        interspersed non-option arguments in 'largs'.
        ")
                        (reparse-symbol indented_block_body) [50791 52187])
                    ("_match_long_opt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53127 53131])
                            ("opt" variable nil (reparse-symbol function_parameters) [53133 53136]))                          
                        :documentation "_match_long_opt(opt : string) -> string

        Determine which long option string 'opt' matches, ie. which one
        it is an unambiguous abbreviation for.  Raises BadOptionError if
        'opt' doesn't unambiguously match any long option string.
        ")
                        (reparse-symbol indented_block_body) [53107 53464])
                    ("_process_long_opt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53491 53495])
                            ("rargs" variable nil (reparse-symbol function_parameters) [53497 53502])
                            ("values" variable nil (reparse-symbol function_parameters) [53504 53510]))                          )
                        (reparse-symbol indented_block_body) [53469 54627])
                    ("_process_short_opts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54656 54660])
                            ("rargs" variable nil (reparse-symbol function_parameters) [54662 54667])
                            ("values" variable nil (reparse-symbol function_parameters) [54669 54675]))                          )
                        (reparse-symbol indented_block_body) [54632 55983])
                    ("get_prog_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56081 56085]))                          )
                        (reparse-symbol indented_block_body) [56063 56210])
                    ("expand_prog_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56236 56240])
                            ("s" variable nil (reparse-symbol function_parameters) [56242 56243]))                          )
                        (reparse-symbol indented_block_body) [56215 56302])
                    ("get_description" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56327 56331]))                          )
                        (reparse-symbol indented_block_body) [56307 56389])
                    ("exit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56403 56407])
                            ("status" variable nil (reparse-symbol function_parameters) [56409 56415])
                            ("msg" variable nil (reparse-symbol function_parameters) [56419 56422]))                          )
                        (reparse-symbol indented_block_body) [56394 56505])
                    ("error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56520 56524])
                            ("msg" variable nil (reparse-symbol function_parameters) [56526 56529]))                          
                        :documentation "error(msg : string)

        Print a usage message incorporating 'msg' to stderr and exit.
        If you override this in a subclass, it should not return -- it
        should either exit or raise an exception.
        ")
                        (reparse-symbol indented_block_body) [56510 56874])
                    ("get_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56893 56897]))                          )
                        (reparse-symbol indented_block_body) [56879 57058])
                    ("print_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57079 57083])
                            ("file" variable nil (reparse-symbol function_parameters) [57085 57089]))                          
                        :documentation "print_usage(file : file = stdout)

        Print the usage message for the current program (self.usage) to
        'file' (default stdout).  Any occurrence of the string \"%prog\" in
        self.usage is replaced with the name of the current program
        (basename of sys.argv[0]).  Does nothing if self.usage is empty
        or not defined.
        ")
                        (reparse-symbol indented_block_body) [57063 57531])
                    ("get_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57552 57556]))                          )
                        (reparse-symbol indented_block_body) [57536 57675])
                    ("print_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57698 57702])
                            ("file" variable nil (reparse-symbol function_parameters) [57704 57708]))                          
                        :documentation "print_version(file : file = stdout)

        Print the version message for this program (self.version) to
        'file' (default stdout).  As with print_usage(), any occurrence
        of \"%prog\" in self.version is replaced by the current program's
        name.  Does nothing if self.version is empty or undefined.
        ")
                        (reparse-symbol indented_block_body) [57680 58126])
                    ("format_option_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58154 58158])
                            ("formatter" variable nil (reparse-symbol function_parameters) [58160 58169]))                          )
                        (reparse-symbol indented_block_body) [58131 58808])
                    ("format_epilog" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58831 58835])
                            ("formatter" variable nil (reparse-symbol function_parameters) [58837 58846]))                          )
                        (reparse-symbol indented_block_body) [58813 58901])
                    ("format_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58922 58926])
                            ("formatter" variable nil (reparse-symbol function_parameters) [58928 58937]))                          )
                        (reparse-symbol indented_block_body) [58906 59348])
                    ("_get_encoding" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59396 59400])
                            ("file" variable nil (reparse-symbol function_parameters) [59402 59406]))                          )
                        (reparse-symbol indented_block_body) [59378 59557])
                    ("print_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59577 59581])
                            ("file" variable nil (reparse-symbol function_parameters) [59583 59587]))                          
                        :documentation "print_help(file : file = stdout)

        Print an extended help message, listing all options and any
        help text provided with them, to 'file' (default stdout).
        ")
                        (reparse-symbol indented_block_body) [59562 59952]))                  
                :type "class")
                nil [39366 59952])
            ("_match_abbrev" function
               (:documentation "_match_abbrev(s : string, wordmap : {string : Option}) -> string

    Return the string key in 'wordmap' for which 's' is an unambiguous
    abbreviation.  If 's' is found to be ambiguous or doesn't match any of
    'words', raise BadOptionError.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [59994 59995])
                    ("wordmap" variable nil (reparse-symbol function_parameters) [59997 60004]))                  )
                nil [59976 60883])
            ("make_option" variable nil nil [61105 61125]))          
      :file "optparse.py"
      :pointmax 61126
      :fsize 61125
      :lastmodtime '(21149 51618 38875 248000)
      :unmatched-syntax nil)
    (semanticdb-table "subprocess.py"
      :major-mode 'python-mode
      :tags 
        '( ("r\"\"\"subprocess - Subprocesses with accessible I/O streams

This module allows you to spawn processes, connect to their
input/output/error pipes, and obtain their return codes.  This module
intends to replace several other, older modules and functions, like:

os.system
os.spawn*
os.popen*
popen2.*
commands.*

Information about how the subprocess module can be used to replace these
modules and functions can be found below.



Using the subprocess module
===========================
This module defines one class called Popen:

class Popen(args, bufsize=0, executable=None,
            stdin=None, stdout=None, stderr=None,
            preexec_fn=None, close_fds=False, shell=False,
            cwd=None, env=None, universal_newlines=False,
            startupinfo=None, creationflags=0):


Arguments are:

args should be a string, or a sequence of program arguments.  The
program to execute is normally the first item in the args sequence or
string, but can be explicitly set by using the executable argument.

On UNIX, with shell=False (default): In this case, the Popen class
uses os.execvp() to execute the child program.  args should normally
be a sequence.  A string will be treated as a sequence with the string
as the only item (the program to execute).

On UNIX, with shell=True: If args is a string, it specifies the
command string to execute through the shell.  If args is a sequence,
the first item specifies the command string, and any additional items
will be treated as additional shell arguments.

On Windows: the Popen class uses CreateProcess() to execute the child
program, which operates on strings.  If args is a sequence, it will be
converted to a string using the list2cmdline method.  Please note that
not all MS Windows applications interpret the command line the same
way: The list2cmdline is designed for applications using the same
rules as the MS C runtime.

bufsize, if given, has the same meaning as the corresponding argument
to the built-in open() function: 0 means unbuffered, 1 means line
buffered, any other positive value means use a buffer of
(approximately) that size.  A negative bufsize means to use the system
default, which usually means fully buffered.  The default value for
bufsize is 0 (unbuffered).

stdin, stdout and stderr specify the executed programs' standard
input, standard output and standard error file handles, respectively.
Valid values are PIPE, an existing file descriptor (a positive
integer), an existing file object, and None.  PIPE indicates that a
new pipe to the child should be created.  With None, no redirection
will occur; the child's file handles will be inherited from the
parent.  Additionally, stderr can be STDOUT, which indicates that the
stderr data from the applications should be captured into the same
file handle as for stdout.

If preexec_fn is set to a callable object, this object will be called
in the child process just before the child is executed.

If close_fds is true, all file descriptors except 0, 1 and 2 will be
closed before the child process is executed.

if shell is true, the specified command will be executed through the
shell.

If cwd is not None, the current directory will be changed to cwd
before the child is executed.

If env is not None, it defines the environment variables for the new
process.

If universal_newlines is true, the file objects stdout and stderr are
opened as a text files, but lines may be terminated by any of '\\n',
the Unix end-of-line convention, '\\r', the Macintosh convention or
'\\r\\n', the Windows convention.  All of these external representations
are seen as '\\n' by the Python program.  Note: This feature is only
available if Python is built with universal newline support (the
default).  Also, the newlines attribute of the file objects stdout,
stdin and stderr are not updated by the communicate() method.

The startupinfo and creationflags, if given, will be passed to the
underlying CreateProcess() function.  They can specify things such as
appearance of the main window and priority for the new process.
(Windows only)


This module also defines some shortcut functions:

call(*popenargs, **kwargs):
    Run command with arguments.  Wait for command to complete, then
    return the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    retcode = call([\"ls\", \"-l\"])

check_call(*popenargs, **kwargs):
    Run command with arguments.  Wait for command to complete.  If the
    exit code was zero then return, otherwise raise
    CalledProcessError.  The CalledProcessError object will have the
    return code in the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    check_call([\"ls\", \"-l\"])

check_output(*popenargs, **kwargs):
    Run command with arguments and return its output as a byte string.

    If the exit code was non-zero it raises a CalledProcessError.  The
    CalledProcessError object will have the return code in the returncode
    attribute and output in the output attribute.

    The arguments are the same as for the Popen constructor.  Example:

    output = check_output([\"ls\", \"-l\", \"/dev/null\"])


Exceptions
----------
Exceptions raised in the child process, before the new program has
started to execute, will be re-raised in the parent.  Additionally,
the exception object will have one extra attribute called
'child_traceback', which is a string containing traceback information
from the child's point of view.

The most common exception raised is OSError.  This occurs, for
example, when trying to execute a non-existent file.  Applications
should prepare for OSErrors.

A ValueError will be raised if Popen is called with invalid arguments.

check_call() and check_output() will raise CalledProcessError, if the
called process returns a non-zero return code.


Security
--------
Unlike some other popen functions, this implementation will never call
/bin/sh implicitly.  This means that all characters, including shell
metacharacters, can safely be passed to child processes.


Popen objects
=============
Instances of the Popen class have the following methods:

poll()
    Check if child process has terminated.  Returns returncode
    attribute.

wait()
    Wait for child process to terminate.  Returns returncode attribute.

communicate(input=None)
    Interact with process: Send data to stdin.  Read data from stdout
    and stderr, until end-of-file is reached.  Wait for process to
    terminate.  The optional input argument should be a string to be
    sent to the child process, or None, if no data should be sent to
    the child.

    communicate() returns a tuple (stdout, stderr).

    Note: The data read is buffered in memory, so do not use this
    method if the data size is large or unlimited.

The following attributes are also available:

stdin
    If the stdin argument is PIPE, this attribute is a file object
    that provides input to the child process.  Otherwise, it is None.

stdout
    If the stdout argument is PIPE, this attribute is a file object
    that provides output from the child process.  Otherwise, it is
    None.

stderr
    If the stderr argument is PIPE, this attribute is file object that
    provides error output from the child process.  Otherwise, it is
    None.

pid
    The process ID of the child process.

returncode
    The child return code.  A None value indicates that the process
    hasn't terminated yet.  A negative value -N indicates that the
    child was terminated by signal N (UNIX only).


Replacing older functions with the subprocess module
====================================================
In this section, \"a ==> b\" means that b can be used as a replacement
for a.

Note: All functions in this section fail (more or less) silently if
the executed program cannot be found; this module raises an OSError
exception.

In the following examples, we assume that the subprocess module is
imported with \"from subprocess import *\".


Replacing /bin/sh shell backquote
---------------------------------
output=`mycmd myarg`
==>
output = Popen([\"mycmd\", \"myarg\"], stdout=PIPE).communicate()[0]


Replacing shell pipe line
-------------------------
output=`dmesg | grep hda`
==>
p1 = Popen([\"dmesg\"], stdout=PIPE)
p2 = Popen([\"grep\", \"hda\"], stdin=p1.stdout, stdout=PIPE)
output = p2.communicate()[0]


Replacing os.system()
---------------------
sts = os.system(\"mycmd\" + \" myarg\")
==>
p = Popen(\"mycmd\" + \" myarg\", shell=True)
pid, sts = os.waitpid(p.pid, 0)

Note:

* Calling the program through the shell is usually not required.

* It's easier to look at the returncode attribute than the
  exitstatus.

A more real-world example would look like this:

try:
    retcode = call(\"mycmd\" + \" myarg\", shell=True)
    if retcode < 0:
        print >>sys.stderr, \"Child was terminated by signal\", -retcode
    else:
        print >>sys.stderr, \"Child returned\", retcode
except OSError, e:
    print >>sys.stderr, \"Execution failed:\", e


Replacing os.spawn*
-------------------
P_NOWAIT example:

pid = os.spawnlp(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")
==>
pid = Popen([\"/bin/mycmd\", \"myarg\"]).pid


P_WAIT example:

retcode = os.spawnlp(os.P_WAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")
==>
retcode = call([\"/bin/mycmd\", \"myarg\"])


Vector example:

os.spawnvp(os.P_NOWAIT, path, args)
==>
Popen([path] + args[1:])


Environment example:

os.spawnlpe(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\", env)
==>
Popen([\"/bin/mycmd\", \"myarg\"], env={\"PATH\": \"/usr/bin\"})


Replacing os.popen*
-------------------
pipe = os.popen(\"cmd\", mode='r', bufsize)
==>
pipe = Popen(\"cmd\", shell=True, bufsize=bufsize, stdout=PIPE).stdout

pipe = os.popen(\"cmd\", mode='w', bufsize)
==>
pipe = Popen(\"cmd\", shell=True, bufsize=bufsize, stdin=PIPE).stdin


(child_stdin, child_stdout) = os.popen2(\"cmd\", mode, bufsize)
==>
p = Popen(\"cmd\", shell=True, bufsize=bufsize,
          stdin=PIPE, stdout=PIPE, close_fds=True)
(child_stdin, child_stdout) = (p.stdin, p.stdout)


(child_stdin,
 child_stdout,
 child_stderr) = os.popen3(\"cmd\", mode, bufsize)
==>
p = Popen(\"cmd\", shell=True, bufsize=bufsize,
          stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)
(child_stdin,
 child_stdout,
 child_stderr) = (p.stdin, p.stdout, p.stderr)


(child_stdin, child_stdout_and_stderr) = os.popen4(\"cmd\", mode,
                                                   bufsize)
==>
p = Popen(\"cmd\", shell=True, bufsize=bufsize,
          stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)
(child_stdin, child_stdout_and_stderr) = (p.stdin, p.stdout)

On Unix, os.popen2, os.popen3 and os.popen4 also accept a sequence as
the command to execute, in which case arguments will be passed
directly to the program without shell intervention.  This usage can be
replaced as follows:

(child_stdin, child_stdout) = os.popen2([\"/bin/ls\", \"-l\"], mode,
                                        bufsize)
==>
p = Popen([\"/bin/ls\", \"-l\"], bufsize=bufsize, stdin=PIPE, stdout=PIPE)
(child_stdin, child_stdout) = (p.stdin, p.stdout)

Return code handling translates as follows:

pipe = os.popen(\"cmd\", 'w')
...
rc = pipe.close()
if rc is not None and rc % 256:
    print \"There were some errors\"
==>
process = Popen(\"cmd\", 'w', shell=True, stdin=PIPE)
...
process.stdin.close()
if process.wait() != 0:
    print \"There were some errors\"


Replacing popen2.*
------------------
(child_stdout, child_stdin) = popen2.popen2(\"somestring\", bufsize, mode)
==>
p = Popen([\"somestring\"], shell=True, bufsize=bufsize
          stdin=PIPE, stdout=PIPE, close_fds=True)
(child_stdout, child_stdin) = (p.stdout, p.stdin)

On Unix, popen2 also accepts a sequence as the command to execute, in
which case arguments will be passed directly to the program without
shell intervention.  This usage can be replaced as follows:

(child_stdout, child_stdin) = popen2.popen2([\"mycmd\", \"myarg\"], bufsize,
                                            mode)
==>
p = Popen([\"mycmd\", \"myarg\"], bufsize=bufsize,
          stdin=PIPE, stdout=PIPE, close_fds=True)
(child_stdout, child_stdin) = (p.stdout, p.stdin)

The popen2.Popen3 and popen2.Popen4 basically works as subprocess.Popen,
except that:

* subprocess.Popen raises an exception if the execution fails
* the capturestderr argument is replaced with the stderr argument.
* stdin=PIPE and stdout=PIPE must be specified.
* popen2 closes all filedescriptors by default, but you have to specify
  close_fds=True with subprocess.Popen.
\"\"\"" code nil nil [299 12749])
            ("sys" include nil nil [12751 12761])
            ("mswindows" variable nil nil [12762 12799])
            ("os" include nil nil [12801 12810])
            ("types" include nil nil [12811 12823])
            ("traceback" include nil nil [12824 12840])
            ("gc" include nil nil [12841 12850])
            ("signal" include nil nil [12851 12864])
            ("errno" include nil nil [12865 12877])
            ("CalledProcessError" type
               (:documentation "This exception is raised when a process run by check_call() or
    check_output() returns a non-zero exit status.
    The exit status will be stored in the returncode attribute;
    check_output() will also store the output in the output attribute.
    "
                :superclasses ("Exception")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [13283 13311])
                            ("self" variable nil (reparse-symbol indented_block_body) [13320 13334])
                            ("self" variable nil (reparse-symbol indented_block_body) [13343 13363]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13238 13242])
                            ("returncode" variable nil (reparse-symbol function_parameters) [13244 13254])
                            ("cmd" variable nil (reparse-symbol function_parameters) [13256 13259])
                            ("output" variable nil (reparse-symbol function_parameters) [13261 13267]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13225 13364])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13380 13384]))                          )
                        (reparse-symbol indented_block_body) [13368 13480]))                  
                :type "class")
                nil [12920 13480])
            ("if" code nil nil [13482 14070])
            ("__all__" variable nil nil [14072 14180])
            ("if" code nil nil [14182 14718])
            ("try" code nil nil [14718 14785])
            ("_active" variable nil nil [14786 14798])
            ("_cleanup" function nil nil [14800 15185])
            ("PIPE" code nil nil [15186 15195])
            ("STDOUT" code nil nil [15196 15207])
            ("_eintr_retry_call" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [15232 15236])
                ("args" variable nil (reparse-symbol function_parameters) [15238 15243]))              ) nil [15210 15577])
            ("_args_from_interpreter_flags" function (:documentation "Return a list of command-line arguments reproducing the current
    settings in sys.flags and sys.warnoptions.") nil [15589 16349])
            ("call" function
               (:documentation "Run command with arguments.  Wait for command to complete, then
    return the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    retcode = call([\"ls\", \"-l\"])
    "
                :arguments 
                  ( ("popenargs" variable nil (reparse-symbol function_parameters) [16360 16370])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [16372 16380]))                  )
                nil [16351 16651])
            ("check_call" function
               (:documentation "Run command with arguments.  Wait for command to complete.  If
    the exit code was zero then return, otherwise raise
    CalledProcessError.  The CalledProcessError object will have the
    return code in the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    check_call([\"ls\", \"-l\"])
    "
                :arguments 
                  ( ("popenargs" variable nil (reparse-symbol function_parameters) [16668 16678])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [16680 16688]))                  )
                nil [16653 17246])
            ("check_output" function (:arguments 
              ( ("popenargs" variable nil (reparse-symbol function_parameters) [17265 17275])
                ("kwargs" variable nil (reparse-symbol function_parameters) [17277 17285]))              ) nil [17248 18491])
            ("list2cmdline" function
               (:documentation "
    Translate a sequence of arguments into a command line
    string, using the same rules as the MS C runtime:

    1) Arguments are delimited by white space, which is either a
       space or a tab.

    2) A string surrounded by double quotation marks is
       interpreted as a single argument, regardless of white space
       contained within.  A quoted string can be embedded in an
       argument.

    3) A double quotation mark preceded by a backslash is
       interpreted as a literal double quotation mark.

    4) Backslashes are interpreted literally, unless they
       immediately precede a double quotation mark.

    5) If backslashes immediately precede a double quotation mark,
       every pair of backslashes is interpreted as a literal
       backslash.  If the number of backslashes is odd, the last
       backslash escapes the next double quotation mark as
       described in rule 3.
    "
                :arguments 
                  ( ("seq" variable nil (reparse-symbol function_parameters) [18510 18513]))                  )
                nil [18493 59071]))          
      :file "subprocess.py"
      :pointmax 59071
      :fsize 59070
      :lastmodtime '(21149 51618 157875 800000)
      :unmatched-syntax '((INDENT_BLOCK 20114 . 59071) (NEWLINE 20075 . 20076) (COLON 20074 . 20075) (ELIF 20061 . 20065) (INDENT_BLOCK 20016 . 20049) (IF 19947 . 19949) (NAME 19983 . 19984) (NAME 19985 . 19989) (IF 19990 . 19992) (NAME 19996 . 20000) (NAME 20001 . 20003) (NAME 20004 . 20010) (NAME 20011 . 20014) (NEWLINE 20015 . 20016) (INDENT_BLOCK 15346 . 15577) (NEWLINE 15345 . 15346) (COLON 15344 . 15345) (TRY 15270 . 15273) (AS 15340 . 15342)))
    (semanticdb-table "base64.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"RFC 3548: Base16, Base32, Base64 Data Encodings\"\"\"" code nil nil [25 78])
            ("re" include nil nil [210 219])
            ("struct" include nil nil [220 233])
            ("binascii" include nil nil [234 249])
            ("__all__" variable nil nil [252 826])
            ("_translation" variable nil nil [828 873])
            ("EMPTYSTRING" variable nil nil [874 890])
            ("_translate" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [908 909])
                ("altchars" variable nil (reparse-symbol function_parameters) [911 919]))              ) nil [893 1067])
            ("b64encode" function
               (:documentation "Encode a string using Base64.

    s is the string to encode.  Optional altchars must be a string of at least
    length 2 (additional characters are ignored) which specifies an
    alternative alphabet for the '+' and '/' characters.  This allows an
    application to e.g. generate url or filesystem safe Base64 strings.

    The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1127 1128])
                    ("altchars" variable nil (reparse-symbol function_parameters) [1130 1138]))                  )
                nil [1113 1721])
            ("b64decode" function
               (:documentation "Decode a Base64 encoded string.

    s is the string to decode.  Optional altchars must be a string of at least
    length 2 (additional characters are ignored) which specifies the
    alternative alphabet used instead of the '+' and '/' characters.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1737 1738])
                    ("altchars" variable nil (reparse-symbol function_parameters) [1740 1748]))                  )
                nil [1723 2433])
            ("standard_b64encode" function
               (:documentation "Encode a string using the standard Base64 alphabet.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2458 2459]))                  )
                nil [2435 2618])
            ("standard_b64decode" function
               (:documentation "Decode a string encoded with the standard Base64 alphabet.

    s is the string to decode.  The decoded string is returned.  A TypeError
    is raised if the string is incorrectly padded or if there are non-alphabet
    characters present in the string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2642 2643]))                  )
                nil [2619 2939])
            ("urlsafe_b64encode" function
               (:documentation "Encode a string using a url-safe Base64 alphabet.

    s is the string to encode.  The encoded string is returned.  The alphabet
    uses '-' instead of '+' and '_' instead of '/'.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2962 2963]))                  )
                nil [2940 3192])
            ("urlsafe_b64decode" function
               (:documentation "Decode a string encoded with the standard Base64 alphabet.

    s is the string to decode.  The decoded string is returned.  A TypeError
    is raised if the string is incorrectly padded or if there are non-alphabet
    characters present in the string.

    The alphabet uses '-' instead of '+' and '_' instead of '/'.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [3215 3216]))                  )
                nil [3193 3584])
            ("_b32alphabet" variable nil nil [3638 3975])
            ("_b32tab" variable nil nil [3977 4007])
            ("_b32tab" code nil nil [4008 4022])
            ("_b32tab" variable nil nil [4023 4056])
            ("_b32rev" variable nil nil [4057 4120])
            ("b32encode" function
               (:documentation "Encode a string using Base32.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [4137 4138]))                  )
                nil [4123 5900])
            ("b32decode" function
               (:documentation "Decode a Base32 encoded string.

    s is the string to decode.  Optional casefold is a flag specifying whether
    a lowercase alphabet is acceptable as input.  For security purposes, the
    default is False.

    RFC 3548 allows for optional mapping of the digit 0 (zero) to the letter O
    (oh), and for optional mapping of the digit 1 (one) to either the letter I
    (eye) or letter L (el).  The optional argument map01 when not None,
    specifies which letter the digit 1 should be mapped to (when map01 is not
    None, the digit 0 is always mapped to the letter O).  For security
    purposes the default is None, so that 0 and 1 are not allowed in the
    input.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [5916 5917])
                    ("casefold" variable nil (reparse-symbol function_parameters) [5919 5927])
                    ("map01" variable nil (reparse-symbol function_parameters) [5935 5940]))                  )
                nil [5902 8386])
            ("b16encode" function
               (:documentation "Encode a string using Base16.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8560 8561]))                  )
                nil [8546 8713])
            ("b16decode" function
               (:documentation "Decode a Base16 encoded string.

    s is the string to decode.  Optional casefold is a flag specifying whether
    a lowercase alphabet is acceptable as input.  For security purposes, the
    default is False.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8729 8730])
                    ("casefold" variable nil (reparse-symbol function_parameters) [8732 8740]))                  )
                nil [8715 9291])
            ("MAXLINESIZE" variable nil nil [9454 9470])
            ("MAXBINSIZE" code nil nil [9492 9523])
            ("encode" function
               (:documentation "Encode a file."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [9536 9541])
                    ("output" variable nil (reparse-symbol function_parameters) [9543 9549]))                  )
                nil [9525 9876])
            ("decode" function
               (:documentation "Decode a file."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [9889 9894])
                    ("output" variable nil (reparse-symbol function_parameters) [9896 9902]))                  )
                nil [9878 10079])
            ("encodestring" function
               (:documentation "Encode a string into multiple lines of base-64 data."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10098 10099]))                  )
                nil [10081 10339])
            ("decodestring" function
               (:documentation "Decode a string."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10358 10359]))                  )
                nil [10341 10423])
            ("test" function (:documentation "Small test program") nil [10452 11193])
            ("test1" function nil nil [11195 11318])
            ("if" code nil nil [11320 11358]))          
      :file "base64.py"
      :pointmax 11358
      :fsize 11357
      :lastmodtime '(21149 51617 867874 455000)
      :unmatched-syntax nil)
    (semanticdb-table "hashlib.py"
      :major-mode 'python-mode
      :tags 
        '( ("__doc__" variable nil nil [122 2057])
            ("__always_supported" variable nil nil [2169 2245])
            ("algorithms" variable nil nil [2247 2278])
            ("__all__" code nil nil [2280 2332])
            ("__get_builtin_constructor" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [2365 2369]))              ) nil [2335 3201])
            ("__get_openssl_constructor" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [3233 3237]))              ) nil [3203 3610])
            ("__py_new" function
               (:documentation "new(name, string='') - Return a new hashing object using the named algorithm;
    optionally initialized with a string.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3625 3629])
                    ("string" variable nil (reparse-symbol function_parameters) [3631 3637]))                  )
                nil [3612 3829])
            ("__hash_new" function
               (:documentation "new(name, string='') - Return a new hashing object using the named algorithm;
    optionally initialized with a string.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3846 3850])
                    ("string" variable nil (reparse-symbol function_parameters) [3852 3858]))                  )
                nil [3831 4391])
            ("try" code nil nil [4393 4564])
            ("for" code nil nil [4565 4892])
            ("del" code nil nil [4912 4959])
            ("del" code nil nil [4960 5011]))          
      :file "hashlib.py"
      :pointmax 5012
      :fsize 5011
      :lastmodtime '(21149 51617 977874 965000)
      :unmatched-syntax nil)
    (semanticdb-table "httplib.py"
      :major-mode 'python-mode
      :tags 
        '( ("r\"\"\"HTTP/1.1 client library

<intro stuff goes here>
<other stuff, too>

HTTPConnection goes through a number of \"states\", which define when a client
may legally make another request or fetch the response for a particular
request. This diagram details these state transitions:

    (null)
      |
      | HTTPConnection()
      v
    Idle
      |
      | putrequest()
      v
    Request-started
      |
      | ( putheader() )*  endheaders()
      v
    Request-sent
      |
      | response = getresponse()
      v
    Unread-response   [Response-headers-read]
      |\\____________________
      |                     |
      | response.read()     | putrequest()
      v                     v
    Idle                  Req-started-unread-response
                     ______/|
                   /        |
   response.read() |        | ( putheader() )*  endheaders()
                   v        v
       Request-started    Req-sent-unread-response
                            |
                            | response.read()
                            v
                          Request-sent

This diagram presents the following rules:
  -- a second request may not be started until {response-headers-read}
  -- a response [object] cannot be retrieved until {request-sent}
  -- there is no differentiation between an unread response body and a
     partially read response body

Note: this enforcement is applied by the HTTPConnection class. The
      HTTPResponse class does not enforce this state machine, which
      implies sophisticated clients may accelerate the request/response
      pipeline. Caution should be taken, though: accelerating the states
      beyond the above pattern may imply knowledge of the server's
      connection-close behavior for certain requests. For example, it
      is impossible to tell whether the server will close the connection
      UNTIL the response headers have been read; this means that further
      requests cannot be placed into the pipeline until it is known that
      the server will NOT be closing the connection.

Logical State                  __state            __response
-------------                  -------            ----------
Idle                           _CS_IDLE           None
Request-started                _CS_REQ_STARTED    None
Request-sent                   _CS_REQ_SENT       None
Unread-response                _CS_IDLE           <response_class>
Req-started-unread-response    _CS_REQ_STARTED    <response_class>
Req-sent-unread-response       _CS_REQ_SENT       <response_class>
\"\"\"" code nil nil [1 2565])
            ("array" include nil nil [2567 2590])
            ("os" include nil nil [2591 2600])
            ("socket" include nil nil [2601 2614])
            ("sys" include nil nil [2615 2642])
            ("urlparse" include nil nil [2643 2672])
            ("warnings" include nil nil [2673 2688])
            ("with" code nil nil [2689 2888])
            ("try" code nil nil [2889 2983])
            ("__all__" variable nil nil [2984 3354])
            ("HTTP_PORT" variable nil nil [3356 3370])
            ("HTTPS_PORT" variable nil nil [3371 3387])
            ("_UNKNOWN" variable nil nil [3389 3409])
            ("_CS_IDLE" variable nil nil [3431 3448])
            ("_CS_REQ_STARTED" variable nil nil [3449 3484])
            ("_CS_REQ_SENT" variable nil nil [3485 3514])
            ("CONTINUE" variable nil nil [3547 3561])
            ("SWITCHING_PROTOCOLS" variable nil nil [3562 3587])
            ("PROCESSING" variable nil nil [3588 3604])
            ("OK" variable nil nil [3619 3627])
            ("CREATED" variable nil nil [3628 3641])
            ("ACCEPTED" variable nil nil [3642 3656])
            ("NON_AUTHORITATIVE_INFORMATION" variable nil nil [3657 3692])
            ("NO_CONTENT" variable nil nil [3693 3709])
            ("RESET_CONTENT" variable nil nil [3710 3729])
            ("PARTIAL_CONTENT" variable nil nil [3730 3751])
            ("MULTI_STATUS" variable nil nil [3752 3770])
            ("IM_USED" variable nil nil [3771 3784])
            ("MULTIPLE_CHOICES" variable nil nil [3800 3822])
            ("MOVED_PERMANENTLY" variable nil nil [3823 3846])
            ("FOUND" variable nil nil [3847 3858])
            ("SEE_OTHER" variable nil nil [3859 3874])
            ("NOT_MODIFIED" variable nil nil [3875 3893])
            ("USE_PROXY" variable nil nil [3894 3909])
            ("TEMPORARY_REDIRECT" variable nil nil [3910 3934])
            ("BAD_REQUEST" variable nil nil [3951 3968])
            ("UNAUTHORIZED" variable nil nil [3969 3987])
            ("PAYMENT_REQUIRED" variable nil nil [3988 4010])
            ("FORBIDDEN" variable nil nil [4011 4026])
            ("NOT_FOUND" variable nil nil [4027 4042])
            ("METHOD_NOT_ALLOWED" variable nil nil [4043 4067])
            ("NOT_ACCEPTABLE" variable nil nil [4068 4088])
            ("PROXY_AUTHENTICATION_REQUIRED" variable nil nil [4089 4124])
            ("REQUEST_TIMEOUT" variable nil nil [4125 4146])
            ("CONFLICT" variable nil nil [4147 4161])
            ("GONE" variable nil nil [4162 4172])
            ("LENGTH_REQUIRED" variable nil nil [4173 4194])
            ("PRECONDITION_FAILED" variable nil nil [4195 4220])
            ("REQUEST_ENTITY_TOO_LARGE" variable nil nil [4221 4251])
            ("REQUEST_URI_TOO_LONG" variable nil nil [4252 4278])
            ("UNSUPPORTED_MEDIA_TYPE" variable nil nil [4279 4307])
            ("REQUESTED_RANGE_NOT_SATISFIABLE" variable nil nil [4308 4345])
            ("EXPECTATION_FAILED" variable nil nil [4346 4370])
            ("UNPROCESSABLE_ENTITY" variable nil nil [4371 4397])
            ("LOCKED" variable nil nil [4398 4410])
            ("FAILED_DEPENDENCY" variable nil nil [4411 4434])
            ("UPGRADE_REQUIRED" variable nil nil [4435 4457])
            ("INTERNAL_SERVER_ERROR" variable nil nil [4474 4501])
            ("NOT_IMPLEMENTED" variable nil nil [4502 4523])
            ("BAD_GATEWAY" variable nil nil [4524 4541])
            ("SERVICE_UNAVAILABLE" variable nil nil [4542 4567])
            ("GATEWAY_TIMEOUT" variable nil nil [4568 4589])
            ("HTTP_VERSION_NOT_SUPPORTED" variable nil nil [4590 4622])
            ("INSUFFICIENT_STORAGE" variable nil nil [4623 4649])
            ("NOT_EXTENDED" variable nil nil [4650 4668])
            ("responses" variable nil nil [4715 5873])
            ("MAXAMOUNT" variable nil nil [5934 5953])
            ("_MAXLINE" variable nil nil [6002 6018])
            ("HTTPMessage" type
               (:superclasses ("mimetools.Message")
                :members 
                  ( ("addheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6077 6081])
                            ("key" variable nil (reparse-symbol function_parameters) [6083 6086])
                            ("value" variable nil (reparse-symbol function_parameters) [6088 6093]))                          
                        :documentation "Add header for field key handling repeats.")
                        (reparse-symbol indented_block_body) [6063 6347])
                    ("addcontinue" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6368 6372])
                            ("key" variable nil (reparse-symbol function_parameters) [6374 6377])
                            ("more" variable nil (reparse-symbol function_parameters) [6379 6383]))                          
                        :documentation "Add more field data from a continuation line.")
                        (reparse-symbol indented_block_body) [6352 6521])
                    ("readheaders" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6542 6546]))                          
                        :documentation "Read header lines.

        Read header lines up to the entirely blank line that terminates them.
        The (normally blank) line that ends the headers is skipped, but not
        included in the returned list.  If a non-header line ends the headers,
        (which is an error), an attempt is made to backspace over it; it is
        never included in the returned list.

        The variable self.status is set to the empty string if all went well,
        otherwise it is an error message.  The variable self.headers is a
        completely uninterpreted list of lines contained in the header (so
        printing them will reproduce the header exactly as it appears in the
        file).

        If multiple header fields with the same name occur, they are combined
        according to the rules in RFC 2616 sec 4.2:

        Appending each subsequent field-value to the first, each separated
        by a comma. The order in which header fields with the same field-name
        are received is significant to the interpretation of the combined
        field value.
        ")
                        (reparse-symbol indented_block_body) [6526 10283]))                  
                :type "class")
                nil [6020 10283])
            ("HTTPResponse" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [10788 11347])
                            ("self" variable nil (reparse-symbol indented_block_body) [11355 11383])
                            ("self" variable nil (reparse-symbol indented_block_body) [11392 11412])
                            ("self" variable nil (reparse-symbol indented_block_body) [11421 11442])
                            ("self" variable nil (reparse-symbol indented_block_body) [11452 11467])
                            ("self" variable nil (reparse-symbol indented_block_body) [11524 11547])
                            ("self" variable nil (reparse-symbol indented_block_body) [11571 11593])
                            ("self" variable nil (reparse-symbol indented_block_body) [11617 11639])
                            ("self" variable nil (reparse-symbol indented_block_body) [11666 11689])
                            ("self" variable nil (reparse-symbol indented_block_body) [11733 11759])
                            ("self" variable nil (reparse-symbol indented_block_body) [11811 11833])
                            ("self" variable nil (reparse-symbol indented_block_body) [11886 11912]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10713 10717])
                            ("sock" variable nil (reparse-symbol function_parameters) [10719 10723])
                            ("debuglevel" variable nil (reparse-symbol function_parameters) [10725 10735])
                            ("strict" variable nil (reparse-symbol function_parameters) [10739 10745])
                            ("method" variable nil (reparse-symbol function_parameters) [10749 10755])
                            ("buffering" variable nil (reparse-symbol function_parameters) [10762 10771]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10700 11955])
                    ("_read_status" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11977 11981]))                          )
                        (reparse-symbol indented_block_body) [11960 13398])
                    ("begin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13413 13417]))                          )
                        (reparse-symbol indented_block_body) [13403 16342])
                    ("_check_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16364 16368]))                          )
                        (reparse-symbol indented_block_body) [16347 17413])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17428 17432]))                          )
                        (reparse-symbol indented_block_body) [17418 17510])
                    ("isclosed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17528 17532]))                          )
                        (reparse-symbol indented_block_body) [17515 17930])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18017 18021])
                            ("amt" variable nil (reparse-symbol function_parameters) [18023 18026]))                          )
                        (reparse-symbol indented_block_body) [18008 19384])
                    ("_read_chunked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19407 19411])
                            ("amt" variable nil (reparse-symbol function_parameters) [19413 19416]))                          )
                        (reparse-symbol indented_block_body) [19389 21547])
                    ("_safe_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21567 21571])
                            ("amt" variable nil (reparse-symbol function_parameters) [21573 21576]))                          
                        :documentation "Read the number of bytes requested, compensating for partial reads.

        Normally, we have a blocking socket, but a read() can be interrupted
        by a signal (resulting in a partial read).

        Note that we cannot distinguish between EOF and an interrupt when zero
        bytes have been read. IncompleteRead() will be raised in this
        situation.

        This function should be used when <amt> bytes \"should\" be present for
        reading. If the bytes are truly not available (due to EOF), then the
        IncompleteRead exception can be used to detect the problem.
        ")
                        (reparse-symbol indented_block_body) [21552 22797])
                    ("fileno" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22813 22817]))                          )
                        (reparse-symbol indented_block_body) [22802 22852])
                    ("getheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22871 22875])
                            ("name" variable nil (reparse-symbol function_parameters) [22877 22881])
                            ("default" variable nil (reparse-symbol function_parameters) [22883 22890]))                          )
                        (reparse-symbol indented_block_body) [22857 23013])
                    ("getheaders" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23033 23037]))                          
                        :documentation "Return list of (header, value) tuples.")
                        (reparse-symbol indented_block_body) [23018 23191]))                  
                :type "class")
                nil [10284 23191])
            ("HTTPConnection" type
               (:members 
                  ( ("_http_vsn" variable nil (reparse-symbol indented_block_body) [23220 23234])
                    ("_http_vsn_str" variable nil (reparse-symbol indented_block_body) [23239 23265])
                    ("response_class" variable nil (reparse-symbol indented_block_body) [23271 23300])
                    ("default_port" variable nil (reparse-symbol indented_block_body) [23305 23329])
                    ("auto_open" variable nil (reparse-symbol indented_block_body) [23334 23347])
                    ("debuglevel" variable nil (reparse-symbol indented_block_body) [23352 23366])
                    ("strict" variable nil (reparse-symbol indented_block_body) [23371 23381])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [23523 23545])
                            ("self" variable nil (reparse-symbol indented_block_body) [23554 23590])
                            ("self" variable nil (reparse-symbol indented_block_body) [23599 23615])
                            ("self" variable nil (reparse-symbol indented_block_body) [23624 23641])
                            ("self" variable nil (reparse-symbol indented_block_body) [23650 23672])
                            ("self" variable nil (reparse-symbol indented_block_body) [23681 23704])
                            ("self" variable nil (reparse-symbol indented_block_body) [23713 23732])
                            ("self" variable nil (reparse-symbol indented_block_body) [23741 23765])
                            ("self" variable nil (reparse-symbol indented_block_body) [23774 23798])
                            ("self" variable nil (reparse-symbol indented_block_body) [23807 23832])
                            ("self" code nil (reparse-symbol indented_block_body) [23842 23872])
                            ("if" code nil (reparse-symbol indented_block_body) [23881 23937]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23400 23404])
                            ("host" variable nil (reparse-symbol function_parameters) [23406 23410])
                            ("port" variable nil (reparse-symbol function_parameters) [23412 23416])
                            ("strict" variable nil (reparse-symbol function_parameters) [23423 23429])
                            ("timeout" variable nil (reparse-symbol function_parameters) [23453 23460])
                            ("source_address" variable nil (reparse-symbol function_parameters) [23493 23507]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23387 23937])
                    ("set_tunnel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23957 23961])
                            ("host" variable nil (reparse-symbol function_parameters) [23963 23967])
                            ("port" variable nil (reparse-symbol function_parameters) [23969 23973])
                            ("headers" variable nil (reparse-symbol function_parameters) [23980 23987]))                          
                        :documentation " Sets up the host and the port for the HTTP CONNECT Tunnelling.

        The headers argument should be a mapping of extra HTTP headers
        to send with the CONNECT request.
        ")
                        (reparse-symbol indented_block_body) [23942 24380])
                    ("_set_hostport" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24403 24407])
                            ("host" variable nil (reparse-symbol function_parameters) [24409 24413])
                            ("port" variable nil (reparse-symbol function_parameters) [24415 24419]))                          )
                        (reparse-symbol indented_block_body) [24385 25137])
                    ("set_debuglevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25161 25165])
                            ("level" variable nil (reparse-symbol function_parameters) [25167 25172]))                          )
                        (reparse-symbol indented_block_body) [25142 25207])
                    ("_tunnel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25224 25228]))                          )
                        (reparse-symbol indented_block_body) [25212 26237])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26255 26259]))                          
                        :documentation "Connect to the host and port specified in __init__.")
                        (reparse-symbol indented_block_body) [26243 26534])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26549 26553]))                          
                        :documentation "Close the connection to the HTTP server.")
                        (reparse-symbol indented_block_body) [26539 26872])
                    ("send" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26886 26890])
                            ("data" variable nil (reparse-symbol function_parameters) [26892 26896]))                          
                        :documentation "Send `data' to the server.")
                        (reparse-symbol indented_block_body) [26877 27531])
                    ("_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27548 27552])
                            ("s" variable nil (reparse-symbol function_parameters) [27554 27555]))                          
                        :documentation "Add a line of output to the current request buffer.

        Assumes that the line does *not* end with \\\\r\\\\n.
        ")
                        (reparse-symbol indented_block_body) [27536 27723])
                    ("_send_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27745 27749])
                            ("message_body" variable nil (reparse-symbol function_parameters) [27751 27763]))                          
                        :documentation "Send the currently buffered request and clear the buffer.

        Appends an extra \\\\r\\\\n to the buffer.
        A message_body may be specified, to be appended to the request.
        ")
                        (reparse-symbol indented_block_body) [27728 28584])
                    ("putrequest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28604 28608])
                            ("method" variable nil (reparse-symbol function_parameters) [28610 28616])
                            ("url" variable nil (reparse-symbol function_parameters) [28618 28621])
                            ("skip_host" variable nil (reparse-symbol function_parameters) [28623 28632])
                            ("skip_accept_encoding" variable nil (reparse-symbol function_parameters) [28636 28656]))                          
                        :documentation "Send a request to the server.

        `method' specifies an HTTP request method, e.g. 'GET'.
        `url' specifies the object being requested, e.g. '/index.html'.
        `skip_host' if True does not add automatically a 'Host:' header
        `skip_accept_encoding' if True does not add automatically an
           'Accept-Encoding:' header
        ")
                        (reparse-symbol indented_block_body) [28589 33512])
                    ("putheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33531 33535])
                            ("header" variable nil (reparse-symbol function_parameters) [33537 33543])
                            ("values" variable nil (reparse-symbol function_parameters) [33545 33552]))                          
                        :documentation "Send a request header line to the server.

        For example: h.putheader('Accept', 'text/html')
        ")
                        (reparse-symbol indented_block_body) [33517 33860])
                    ("endheaders" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33880 33884])
                            ("message_body" variable nil (reparse-symbol function_parameters) [33886 33898]))                          
                        :documentation "Indicate that the last header line has been sent to the server.

        This method sends the request to the server.  The optional
        message_body argument can be used to pass a message body
        associated with the request.  The message body will be sent in
        the same packet as the message headers if it is string, otherwise it is
        sent as a separate packet.
        ")
                        (reparse-symbol indented_block_body) [33865 34487])
                    ("request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34504 34508])
                            ("method" variable nil (reparse-symbol function_parameters) [34510 34516])
                            ("url" variable nil (reparse-symbol function_parameters) [34518 34521])
                            ("body" variable nil (reparse-symbol function_parameters) [34523 34527])
                            ("headers" variable nil (reparse-symbol function_parameters) [34534 34541]))                          
                        :documentation "Send a complete request to the server.")
                        (reparse-symbol indented_block_body) [34492 34655])
                    ("_set_content_length" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34684 34688])
                            ("body" variable nil (reparse-symbol function_parameters) [34690 34694]))                          )
                        (reparse-symbol indented_block_body) [34660 35267])
                    ("_send_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35290 35294])
                            ("method" variable nil (reparse-symbol function_parameters) [35296 35302])
                            ("url" variable nil (reparse-symbol function_parameters) [35304 35307])
                            ("body" variable nil (reparse-symbol function_parameters) [35309 35313])
                            ("headers" variable nil (reparse-symbol function_parameters) [35315 35322]))                          )
                        (reparse-symbol indented_block_body) [35272 35923])
                    ("getresponse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35944 35948])
                            ("buffering" variable nil (reparse-symbol function_parameters) [35950 35959]))                          )
                        (reparse-symbol indented_block_body) [35928 37832]))                  
                :type "class")
                nil [23193 37832])
            ("HTTP" type
               (:members 
                  ( ("\"Compatibility class with httplib.py from 1.5.\"" code nil (reparse-symbol indented_block_body) [37850 37897])
                    ("_http_vsn" variable nil (reparse-symbol indented_block_body) [37903 37917])
                    ("_http_vsn_str" variable nil (reparse-symbol indented_block_body) [37922 37948])
                    ("debuglevel" variable nil (reparse-symbol indented_block_body) [37954 37968])
                    ("_connection_class" variable nil (reparse-symbol indented_block_body) [37974 38008])
                    ("__init__" function
                       (:suite 
                          ( ("\"Provide a default host, since the superclass requires one.\"" code nil (reparse-symbol indented_block_body) [38075 38135])
                            ("if" code nil (reparse-symbol indented_block_body) [38208 38246])
                            ("self" code nil (reparse-symbol indented_block_body) [38468 38523]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38027 38031])
                            ("host" variable nil (reparse-symbol function_parameters) [38033 38037])
                            ("port" variable nil (reparse-symbol function_parameters) [38042 38046])
                            ("strict" variable nil (reparse-symbol function_parameters) [38053 38059]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38014 38524])
                    ("_setup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38540 38544])
                            ("conn" variable nil (reparse-symbol function_parameters) [38546 38550]))                          )
                        (reparse-symbol indented_block_body) [38529 38950])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38967 38971])
                            ("host" variable nil (reparse-symbol function_parameters) [38973 38977])
                            ("port" variable nil (reparse-symbol function_parameters) [38984 38988]))                          )
                        (reparse-symbol indented_block_body) [38955 39183])
                    ("getfile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39200 39204]))                          )
                        (reparse-symbol indented_block_body) [39188 39310])
                    ("getreply" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39328 39332])
                            ("buffering" variable nil (reparse-symbol function_parameters) [39334 39343]))                          
                        :documentation "Compat definition since superclass does not define it.

        Returns a tuple consisting of:
        - server status code (e.g. '200' if all goes well)
        - server \"reason\" corresponding to status code
        - any RFC822 headers in the response from the server
        ")
                        (reparse-symbol indented_block_body) [39315 40605])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40620 40624]))                          )
                        (reparse-symbol indented_block_body) [40610 40968]))                  
                :type "class")
                nil [37834 40968])
            ("try" code nil nil [40969 43164])
            ("HTTPException" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [43328 43332]))                  
                :type "class")
                nil [43166 43333])
            ("NotConnected" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [43373 43377]))                  
                :type "class")
                nil [43334 43378])
            ("InvalidURL" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [43416 43420]))                  
                :type "class")
                nil [43379 43421])
            ("UnknownProtocol" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [43501 43521])
                            ("self" variable nil (reparse-symbol indented_block_body) [43530 43552]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43477 43481])
                            ("version" variable nil (reparse-symbol function_parameters) [43483 43490]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43464 43553]))                  
                :type "class")
                nil [43422 43553])
            ("UnknownTransferEncoding" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [43604 43608]))                  
                :type "class")
                nil [43554 43609])
            ("UnimplementedFileMode" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [43658 43662]))                  
                :type "class")
                nil [43610 43663])
            ("IncompleteRead" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [43757 43777])
                            ("self" variable nil (reparse-symbol indented_block_body) [43786 43808])
                            ("self" variable nil (reparse-symbol indented_block_body) [43817 43841]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43718 43722])
                            ("partial" variable nil (reparse-symbol function_parameters) [43724 43731])
                            ("expected" variable nil (reparse-symbol function_parameters) [43733 43741]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43705 43842])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43859 43863]))                          )
                        (reparse-symbol indented_block_body) [43846 44064])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44080 44084]))                          )
                        (reparse-symbol indented_block_body) [44068 44113]))                  
                :type "class")
                nil [43664 44113])
            ("ImproperConnectionState" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [44164 44168]))                  
                :type "class")
                nil [44114 44169])
            ("CannotSendRequest" type
               (:superclasses ("ImproperConnectionState")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [44224 44228]))                  
                :type "class")
                nil [44170 44229])
            ("CannotSendHeader" type
               (:superclasses ("ImproperConnectionState")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [44283 44287]))                  
                :type "class")
                nil [44230 44288])
            ("ResponseNotReady" type
               (:superclasses ("ImproperConnectionState")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [44342 44346]))                  
                :type "class")
                nil [44289 44347])
            ("BadStatusLine" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [44422 44465])
                            ("self" variable nil (reparse-symbol indented_block_body) [44473 44490])
                            ("self" variable nil (reparse-symbol indented_block_body) [44499 44515]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44401 44405])
                            ("line" variable nil (reparse-symbol function_parameters) [44407 44411]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44388 44516]))                  
                :type "class")
                nil [44348 44516])
            ("LineTooLong" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HTTPException" code nil (reparse-symbol indented_block_body) [44594 44725]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44568 44572])
                            ("line_type" variable nil (reparse-symbol function_parameters) [44574 44583]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44555 44726]))                  
                :type "class")
                nil [44517 44726])
            ("error" variable nil nil [44757 44778])
            ("LineAndFileWrapper" type
               (:documentation "A limited file-like object for HTTP/0.9 responses."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [45169 45186])
                            ("self" variable nil (reparse-symbol indented_block_body) [45195 45212])
                            ("self" variable nil (reparse-symbol indented_block_body) [45221 45244])
                            ("self" variable nil (reparse-symbol indented_block_body) [45253 45274])
                            ("self" variable nil (reparse-symbol indented_block_body) [45283 45310]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45142 45146])
                            ("line" variable nil (reparse-symbol function_parameters) [45148 45152])
                            ("file" variable nil (reparse-symbol function_parameters) [45154 45158]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [45129 45311])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45332 45336])
                            ("attr" variable nil (reparse-symbol function_parameters) [45338 45342]))                          )
                        (reparse-symbol indented_block_body) [45316 45386])
                    ("_done" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45401 45405]))                          )
                        (reparse-symbol indented_block_body) [45391 45724])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45738 45742])
                            ("amt" variable nil (reparse-symbol function_parameters) [45744 45747]))                          )
                        (reparse-symbol indented_block_body) [45729 46429])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46447 46451]))                          )
                        (reparse-symbol indented_block_body) [46434 46639])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46658 46662])
                            ("size" variable nil (reparse-symbol function_parameters) [46664 46668]))                          )
                        (reparse-symbol indented_block_body) [46644 46986]))                  
                :type "class")
                nil [44780 46986]))          
      :file "httplib.py"
      :pointmax 46986
      :fsize 46985
      :lastmodtime '(21149 51617 987875 12000)
      :unmatched-syntax nil)
    (semanticdb-table "mimetools.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Various tools used by MIME-reading or MIME-writing programs.\"\"\"" code nil nil [1 67])
            ("os" include nil nil [70 79])
            ("sys" include nil nil [80 90])
            ("tempfile" include nil nil [91 106])
            ("warnings" include nil nil [107 158])
            ("with" code nil nil [159 306])
            ("warnings" include nil nil [307 336])
            ("warnpy3k" code nil nil [337 436])
            ("__all__" variable nil nil [438 534])
            ("Message" type
               (:documentation "A derived class of rfc822.Message that knows about MIME headers and
    contains some hooks for decoding encoded and multipart messages."
                :superclasses ("rfc822.Message")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("rfc822" code nil (reparse-symbol indented_block_body) [765 808])
                            ("self" variable nil (reparse-symbol indented_block_body) [817 900])
                            ("self" variable nil (reparse-symbol indented_block_body) [909 975])
                            ("self" code nil (reparse-symbol indented_block_body) [984 1000])
                            ("self" code nil (reparse-symbol indented_block_body) [1009 1026]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [732 736])
                            ("fp" variable nil (reparse-symbol function_parameters) [738 740])
                            ("seekable" variable nil (reparse-symbol function_parameters) [742 750]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [719 1027])
                    ("parsetype" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1046 1050]))                          )
                        (reparse-symbol indented_block_body) [1032 1535])
                    ("parseplist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1555 1559]))                          )
                        (reparse-symbol indented_block_body) [1540 2072])
                    ("getplist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2090 2094]))                          )
                        (reparse-symbol indented_block_body) [2077 2123])
                    ("getparam" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2141 2145])
                            ("name" variable nil (reparse-symbol function_parameters) [2147 2151]))                          )
                        (reparse-symbol indented_block_body) [2128 2334])
                    ("getparamnames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2357 2361]))                          )
                        (reparse-symbol indented_block_body) [2339 2531])
                    ("getencoding" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2552 2556]))                          )
                        (reparse-symbol indented_block_body) [2536 2668])
                    ("gettype" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2685 2689]))                          )
                        (reparse-symbol indented_block_body) [2673 2717])
                    ("getmaintype" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2738 2742]))                          )
                        (reparse-symbol indented_block_body) [2722 2774])
                    ("getsubtype" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2794 2798]))                          )
                        (reparse-symbol indented_block_body) [2779 2829]))                  
                :type "class")
                nil [536 2829])
            ("try" code nil nil [2874 2951])
            ("_counter_lock" variable nil nil [2951 2989])
            ("del" code nil nil [2990 3000])
            ("_counter" variable nil nil [3002 3014])
            ("_get_next_counter" function nil nil [3015 3174])
            ("_prefix" variable nil nil [3175 3189])
            ("choose_boundary" function (:documentation "Return a string usable as a multipart boundary.

    The string chosen is unique within a single program run, and
    incorporates the user id (if available), process id (if available),
    and current time.  So it's very unlikely the returned string appears
    in message text, but there's no guarantee.

    The boundary contains dots so you have to quote it in the header.") nil [3191 4148])
            ("decode" function
               (:documentation "Decode common content-transfer-encodings (base64, quopri, uuencode)."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [4224 4229])
                    ("output" variable nil (reparse-symbol function_parameters) [4231 4237])
                    ("encoding" variable nil (reparse-symbol function_parameters) [4239 4247]))                  )
                nil [4213 4918])
            ("encode" function
               (:documentation "Encode common content-transfer-encodings (base64, quopri, uuencode)."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [4930 4935])
                    ("output" variable nil (reparse-symbol function_parameters) [4937 4943])
                    ("encoding" variable nil (reparse-symbol function_parameters) [4945 4953]))                  )
                nil [4919 5627])
            ("uudecode_pipe" variable nil nil [5747 5866])
            ("decodetab" variable nil nil [5868 6171])
            ("encodetab" variable nil nil [6173 6494])
            ("pipeto" function (:arguments 
              ( ("input" variable nil (reparse-symbol function_parameters) [6507 6512])
                ("command" variable nil (reparse-symbol function_parameters) [6514 6521]))              ) nil [6496 6604])
            ("pipethrough" function (:arguments 
              ( ("input" variable nil (reparse-symbol function_parameters) [6621 6626])
                ("command" variable nil (reparse-symbol function_parameters) [6628 6635])
                ("output" variable nil (reparse-symbol function_parameters) [6637 6643]))              ) nil [6605 6884])
            ("copyliteral" function (:arguments 
              ( ("input" variable nil (reparse-symbol function_parameters) [6901 6906])
                ("output" variable nil (reparse-symbol function_parameters) [6908 6914]))              ) nil [6885 7016])
            ("copybinary" function (:arguments 
              ( ("input" variable nil (reparse-symbol function_parameters) [7032 7037])
                ("output" variable nil (reparse-symbol function_parameters) [7039 7045]))              ) nil [7017 7169]))          
      :file "mimetools.py"
      :pointmax 7169
      :fsize 7168
      :lastmodtime '(21149 51618 11875 123000)
      :unmatched-syntax nil)
    (semanticdb-table "posixpath.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Common operations on Posix pathnames.

Instead of importing this module directly, import os and refer to
this module as os.path.  The \"os.path\" name is an alias for this
module on Posix systems; on other systems (e.g. Mac, Windows),
os.path provides the same operations in a manner specific to that
platform, and is an alias to another module (e.g. macpath, ntpath).

Some of this can actually be useful on non-Posix systems too, e.g.
for manipulation of the pathname component of URLs.
\"\"\"" code nil nil [1 494])
            ("os" include nil nil [496 505])
            ("sys" include nil nil [506 516])
            ("stat" include nil nil [517 528])
            ("genericpath" include nil nil [529 547])
            ("warnings" include nil nil [548 563])
            ("genericpath" include nil nil [564 589])
            ("try" code nil nil [591 777])
            ("__all__" variable nil nil [778 1266])
            ("curdir" variable nil nil [1328 1340])
            ("pardir" variable nil nil [1341 1354])
            ("extsep" variable nil nil [1355 1367])
            ("sep" variable nil nil [1368 1377])
            ("pathsep" variable nil nil [1378 1391])
            ("defpath" variable nil nil [1392 1418])
            ("altsep" variable nil nil [1419 1432])
            ("devnull" variable nil nil [1433 1454])
            ("normcase" function
               (:documentation "Normalize case of pathname.  Has no effect under Posix"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1734 1735]))                  )
                nil [1721 1816])
            ("isabs" function
               (:documentation "Test whether a path is absolute"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1915 1916]))                  )
                nil [1905 1990])
            ("join" function
               (:documentation "Join two or more pathname components, inserting '/' as needed.
    If any component is an absolute path, all previous path components
    will be discarded.  An empty last part will result in a path that
    ends with a separator."
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [2141 2142])
                    ("p" variable nil (reparse-symbol function_parameters) [2144 2146]))                  )
                nil [2132 2598])
            ("split" function
               (:documentation "Split a pathname.  Returns tuple \"(head, tail)\" where \"tail\" is
    everything after the final slash.  Either part may be empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [2854 2855]))                  )
                nil [2844 3145])
            ("splitext" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [3366 3367]))              ) nil [3353 3427])
            ("splitext" variable nil nil [3427 3475])
            ("splitdrive" function
               (:documentation "Split a pathname into drive and path. On Posix, drive is always
    empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [3630 3631]))                  )
                nil [3615 3736])
            ("basename" function
               (:documentation "Returns the final component of a pathname"
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [3821 3822]))                  )
                nil [3808 3919])
            ("dirname" function
               (:documentation "Returns the directory component of a pathname"
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [4002 4003]))                  )
                nil [3990 4191])
            ("islink" function
               (:documentation "Test whether a path is a symbolic link"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [4307 4311]))                  )
                nil [4296 4496])
            ("lexists" function
               (:documentation "Test whether a path exists.  Returns True for broken symbolic links"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [4567 4571]))                  )
                nil [4555 4742])
            ("samefile" function
               (:documentation "Test whether two pathnames reference the same actual file"
                :arguments 
                  ( ("f1" variable nil (reparse-symbol function_parameters) [4812 4814])
                    ("f2" variable nil (reparse-symbol function_parameters) [4816 4818]))                  )
                nil [4799 4959])
            ("sameopenfile" function
               (:documentation "Test whether two open file objects reference the same file"
                :arguments 
                  ( ("fp1" variable nil (reparse-symbol function_parameters) [5080 5083])
                    ("fp2" variable nil (reparse-symbol function_parameters) [5085 5088]))                  )
                nil [5063 5234])
            ("samestat" function
               (:documentation "Test whether two stat buffers reference the same file"
                :arguments 
                  ( ("s1" variable nil (reparse-symbol function_parameters) [5338 5340])
                    ("s2" variable nil (reparse-symbol function_parameters) [5342 5344]))                  )
                nil [5325 5485])
            ("ismount" function
               (:documentation "Test whether a path is a mount point"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [5603 5607]))                  )
                nil [5591 6180])
            ("walk" function
               (:documentation "Directory tree walk with callback function.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), call func(arg, dirname, fnames).
    dirname is the name of the directory, and fnames a list of the names of
    the files and subdirectories in dirname (excluding '.' and '..').  func
    may modify the fnames list in-place (e.g. via del or slice assignment),
    and walk will only recurse into the subdirectories whose names remain in
    fnames; this can be used to implement a filter, or to impose a specific
    order of visiting.  No semantics are defined for, or required of, arg,
    beyond that arg is always passed to func.  It can be used, e.g., to pass
    a filename pattern, or a mutable object designed to accumulate
    statistics.  Passing None for arg is common."
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [6578 6581])
                    ("func" variable nil (reparse-symbol function_parameters) [6583 6587])
                    ("arg" variable nil (reparse-symbol function_parameters) [6589 6592]))                  )
                nil [6569 7880])
            ("expanduser" function
               (:documentation "Expand ~ and ~user constructions.  If user or $HOME is unknown,
    do nothing."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [8371 8375]))                  )
                nil [8356 9013])
            ("_varprog" variable nil nil [9174 9189])
            ("expandvars" function
               (:documentation "Expand shell variables of form $var and ${var}.  Unknown variables
    are left unchanged."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [9206 9210]))                  )
                nil [9191 9910])
            ("normpath" function
               (:documentation "Normalize path, eliminating double slashes, etc."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [10098 10102]))                  )
                nil [10085 11053])
            ("abspath" function
               (:documentation "Return an absolute path."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [11067 11071]))                  )
                nil [11055 11304])
            ("realpath" function
               (:documentation "Return the canonical path of the specified filename, eliminating any
symbolic links encountered in the path."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [11406 11414]))                  )
                nil [11393 11608])
            ("_joinrealpath" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [11726 11730])
                ("rest" variable nil (reparse-symbol function_parameters) [11732 11736])
                ("seen" variable nil (reparse-symbol function_parameters) [11738 11742]))              ) nil [11708 13015])
            ("supports_unicode_filenames" variable nil nil [13017 13072])
            ("relpath" function
               (:documentation "Return a relative version of a path"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [13086 13090])
                    ("start" variable nil (reparse-symbol function_parameters) [13092 13097]))                  )
                nil [13074 13592]))          
      :file "posixpath.py"
      :pointmax 13592
      :fsize 13591
      :lastmodtime '(21149 51618 70875 397000)
      :unmatched-syntax '((NAME 10212 . 10217) (IF 10238 . 10240) (ELSE 10268 . 10272)))
    (semanticdb-table "random.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Random variable generators.

    integers
    --------
           uniform within range

    sequences
    ---------
           pick random element
           pick random sample
           generate random permutation

    distributions on the real line:
    ------------------------------
           uniform
           triangular
           normal (Gaussian)
           lognormal
           negative exponential
           gamma
           beta
           pareto
           Weibull

    distributions on the circle (angles 0 to 2pi)
    ---------------------------------------------
           circular uniform
           von Mises

General notes on the underlying Mersenne Twister core generator:

* The period is 2**19937-1.
* It is one of the most extensively tested generators in existence.
* Without a direct way to compute N steps forward, the semantics of
  jumpahead(n) are weakened to simply jump to another distant state and rely
  on the large period to avoid overlapping sequences.
* The random() method is implemented in C, executes in a single Python step,
  and is, therefore, threadsafe.

\"\"\"" code nil nil [1 1111])
            ("__future__" include nil nil [1113 1144])
            ("warnings" include nil nil [1145 1179])
            ("types" include nil nil [1180 1264])
            ("math" include nil nil [1265 1341])
            ("math" include nil nil [1342 1413])
            ("os" include nil nil [1414 1448])
            ("binascii" include nil nil [1449 1489])
            ("hashlib" include nil nil [1490 1516])
            ("__all__" variable nil nil [1518 1902])
            ("NV_MAGICCONST" code nil nil [1904 1945])
            ("TWOPI" code nil nil [1946 1961])
            ("LOG4" variable nil nil [1962 1978])
            ("SG_MAGICCONST" code nil nil [1979 2010])
            ("BPF" variable nil nil [2011 2019])
            ("RECIP_BPF" variable nil nil [2055 2074])
            ("_random" include nil nil [2257 2271])
            ("Random" type
               (:documentation "Random number generator base class used by bound module functions.

    Used to instantiate instances of Random to get generators that don't
    share state.  Especially useful for multi-threaded programs, creating
    a different instance of Random for each thread, and using the jumpahead()
    method to ensure that the generated sequences seen by each thread don't
    overlap.

    Class Random can also be subclassed if you want to use a different basic
    generator of your own devising: in that case, override the following
    methods: random(), seed(), getstate(), setstate() and jumpahead().
    Optionally, implement a getrandbits() method so that randrange() can cover
    arbitrarily large ranges.

    "
                :superclasses ("_random.Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [3037 3048])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        \"\"\"" code nil (reparse-symbol indented_block_body) [3122 3229])
                            ("self" code nil (reparse-symbol indented_block_body) [3239 3251])
                            ("self" variable nil (reparse-symbol indented_block_body) [3260 3282]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3099 3103])
                            ("x" variable nil (reparse-symbol function_parameters) [3105 3106]))                          
                        :documentation "Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3086 3283])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3297 3301])
                            ("a" variable nil (reparse-symbol function_parameters) [3303 3304]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or an int or long, hash(a) is used instead.
        ")
                        (reparse-symbol indented_block_body) [3288 3881])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3899 3903]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [3886 4055])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4073 4077])
                            ("state" variable nil (reparse-symbol function_parameters) [4079 4084]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [4060 5122])
                    ("jumpahead" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5141 5145])
                            ("n" variable nil (reparse-symbol function_parameters) [5147 5148]))                          
                        :documentation "Change the internal state to one that is likely far away
        from the current state.  This method will not be in Py3.x,
        so it is better to simply reseed.
        ")
                        (reparse-symbol indented_block_body) [5127 5688])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5912 5916]))                          )
                        (reparse-symbol indented_block_body) [5895 5963])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5985 5989])
                            ("state" variable nil (reparse-symbol function_parameters) [5991 5996]))                          )
                        (reparse-symbol indented_block_body) [5968 6042])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6062 6066]))                          )
                        (reparse-symbol indented_block_body) [6047 6120])
                    ("randrange" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6201 6205])
                            ("start" variable nil (reparse-symbol function_parameters) [6207 6212])
                            ("stop" variable nil (reparse-symbol function_parameters) [6214 6218])
                            ("step" variable nil (reparse-symbol function_parameters) [6225 6229])
                            ("_int" variable nil (reparse-symbol function_parameters) [6233 6237])
                            ("_maxwidth" variable nil (reparse-symbol function_parameters) [6243 6252]))                          
                        :documentation "Choose a random item from range(start, stop[, step]).

        This fixes the problem with randint() which includes the
        endpoint; in Python this is usually not what you want.

        ")
                        (reparse-symbol indented_block_body) [6187 8774])
                    ("randint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8791 8795])
                            ("a" variable nil (reparse-symbol function_parameters) [8797 8798])
                            ("b" variable nil (reparse-symbol function_parameters) [8800 8801]))                          
                        :documentation "Return random integer in range [a, b], including both end points.
        ")
                        (reparse-symbol indented_block_body) [8779 8932])
                    ("_randbelow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8952 8956])
                            ("n" variable nil (reparse-symbol function_parameters) [8958 8959])
                            ("_log" variable nil (reparse-symbol function_parameters) [8961 8965])
                            ("_int" variable nil (reparse-symbol function_parameters) [8972 8976])
                            ("_maxwidth" variable nil (reparse-symbol function_parameters) [8982 8991])
                            ("_Method" variable nil (reparse-symbol function_parameters) [9020 9027])
                            ("_BuiltinMethod" variable nil (reparse-symbol function_parameters) [9041 9055]))                          
                        :documentation "Return a random int in the range [0,n)

        Handles the case where n has more bits than returned
        by a single call to the underlying generator.
        ")
                        (reparse-symbol indented_block_body) [8937 10094])
                    ("choice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10173 10177])
                            ("seq" variable nil (reparse-symbol function_parameters) [10179 10182]))                          
                        :documentation "Choose a random element from a non-empty sequence.")
                        (reparse-symbol indented_block_body) [10162 10337])
                    ("shuffle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10354 10358])
                            ("x" variable nil (reparse-symbol function_parameters) [10360 10361])
                            ("random" variable nil (reparse-symbol function_parameters) [10363 10369]))                          
                        :documentation "x, random=random.random -> shuffle list x in place; return None.

        Optional arg random is a 0-argument function returning a random
        float in [0.0, 1.0); by default, the standard random.random.

        ")
                        (reparse-symbol indented_block_body) [10342 10878])
                    ("sample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10894 10898])
                            ("population" variable nil (reparse-symbol function_parameters) [10900 10910])
                            ("k" variable nil (reparse-symbol function_parameters) [10912 10913]))                          
                        :documentation "Chooses k unique random elements from a population sequence.

        Returns a new list containing elements from the population while
        leaving the original population unchanged.  The resulting list is
        in selection order so that all sub-slices will also be valid random
        samples.  This allows raffle winners (the sample) to be partitioned
        into grand prize and second place winners (the subslices).

        Members of the population need not be hashable or unique.  If the
        population contains repeats, then each occurrence is a possible
        selection in the sample.

        To choose a sample in a range of integers, use xrange as an argument.
        This is especially fast and space efficient for sampling from a
        large population:   sample(xrange(10000000), 60)
        ")
                        (reparse-symbol indented_block_body) [10883 13713])
                    ("uniform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13868 13872])
                            ("a" variable nil (reparse-symbol function_parameters) [13874 13875])
                            ("b" variable nil (reparse-symbol function_parameters) [13877 13878]))                          )
                        (reparse-symbol indented_block_body) [13856 14005])
                    ("triangular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14082 14086])
                            ("low" variable nil (reparse-symbol function_parameters) [14088 14091])
                            ("high" variable nil (reparse-symbol function_parameters) [14097 14101])
                            ("mode" variable nil (reparse-symbol function_parameters) [14107 14111]))                          
                        :documentation "Triangular distribution.

        Continuous distribution bounded by given lower and upper limits,
        and having a given mode value in-between.

        http://en.wikipedia.org/wiki/Triangular_distribution

        ")
                        (reparse-symbol indented_block_body) [14067 14596])
                    ("normalvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14685 14689])
                            ("mu" variable nil (reparse-symbol function_parameters) [14691 14693])
                            ("sigma" variable nil (reparse-symbol function_parameters) [14695 14700]))                          
                        :documentation "Normal distribution.

        mu is the mean, and sigma is the standard deviation.

        ")
                        (reparse-symbol indented_block_body) [14667 15360])
                    ("lognormvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15453 15457])
                            ("mu" variable nil (reparse-symbol function_parameters) [15459 15461])
                            ("sigma" variable nil (reparse-symbol function_parameters) [15463 15468]))                          
                        :documentation "Log normal distribution.

        If you take the natural logarithm of this distribution, you'll get a
        normal distribution with mean mu and standard deviation sigma.
        mu can have any value, and sigma must be greater than zero.

        ")
                        (reparse-symbol indented_block_body) [15434 15788])
                    ("expovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15880 15884])
                            ("lambd" variable nil (reparse-symbol function_parameters) [15886 15891]))                          
                        :documentation "Exponential distribution.

        lambd is 1.0 divided by the desired mean.  It should be
        nonzero.  (The parameter would be called \"lambda\", but that is
        a reserved word in Python.)  Returned values range from 0 to
        positive infinity if lambd is positive, and from negative
        infinity to 0 if lambd is negative.

        ")
                        (reparse-symbol indented_block_body) [15864 16505])
                    ("vonmisesvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16599 16603])
                            ("mu" variable nil (reparse-symbol function_parameters) [16605 16607])
                            ("kappa" variable nil (reparse-symbol function_parameters) [16609 16614]))                          
                        :documentation "Circular data distribution.

        mu is the mean angle, expressed in radians between 0 and 2*pi, and
        kappa is the concentration parameter, which must be greater than or
        equal to zero.  If kappa is equal to zero, this distribution reduces
        to a uniform random angle over the range 0 to 2*pi.

        ")
                        (reparse-symbol indented_block_body) [16579 17969])
                    ("gammavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18056 18060])
                            ("alpha" variable nil (reparse-symbol function_parameters) [18062 18067])
                            ("beta" variable nil (reparse-symbol function_parameters) [18069 18073]))                          
                        :documentation "Gamma distribution.  Not the gamma function!

        Conditions on the parameters are alpha > 0 and beta > 0.

        The probability distribution function is:

                    x ** (alpha - 1) * math.exp(-x / beta)
          pdf(x) =  --------------------------------------
                      math.gamma(alpha) * beta ** alpha

        ")
                        (reparse-symbol indented_block_body) [18039 20263])
                    ("gauss" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20351 20355])
                            ("mu" variable nil (reparse-symbol function_parameters) [20357 20359])
                            ("sigma" variable nil (reparse-symbol function_parameters) [20361 20366]))                          
                        :documentation "Gaussian distribution.

        mu is the mean, and sigma is the standard deviation.  This is
        slightly faster than the normalvariate() function.

        Not thread-safe without a lock around calls.

        ")
                        (reparse-symbol indented_block_body) [20341 21677])
                    ("betavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22173 22177])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22179 22184])
                            ("beta" variable nil (reparse-symbol function_parameters) [22186 22190]))                          
                        :documentation "Beta distribution.

        Conditions on the parameters are alpha > 0 and beta > 0.
        Returned values range between 0 and 1.

        ")
                        (reparse-symbol indented_block_body) [22157 22648])
                    ("paretovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22724 22728])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22730 22735]))                          
                        :documentation "Pareto distribution.  alpha is the shape parameter.")
                        (reparse-symbol indented_block_body) [22706 22900])
                    ("weibullvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22978 22982])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22984 22989])
                            ("beta" variable nil (reparse-symbol function_parameters) [22991 22995]))                          
                        :documentation "Weibull distribution.

        alpha is the scale parameter and beta is the shape parameter.

        ")
                        (reparse-symbol indented_block_body) [22959 23247]))                  
                :type "class")
                nil [2273 23247])
            ("WichmannHill" type
               (:superclasses ("Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [23340 23351])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23398 23402])
                            ("a" variable nil (reparse-symbol function_parameters) [23404 23405]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or an int or long, hash(a) is used instead.

        If a is an int or long, a is used directly.  Distinct values between
        0 and 27814431486575L inclusive are guaranteed to yield distinct
        internal states (this guarantee is specific to the default
        Wichmann-Hill generator).
        ")
                        (reparse-symbol indented_block_body) [23389 24413])
                    ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24429 24433]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [24418 25485])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25503 25507]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [25490 25639])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25657 25661])
                            ("state" variable nil (reparse-symbol function_parameters) [25663 25668]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [25644 26050])
                    ("jumpahead" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26069 26073])
                            ("n" variable nil (reparse-symbol function_parameters) [26075 26076]))                          
                        :documentation "Act as if n calls to random() were made, but quickly.

        n is an int, greater than or equal to 0.

        Example use:  If you have 2 threads and know that each will
        consume no more than a million random numbers, create two Random
        objects r1 and r2, then do
            r2.setstate(r1.getstate())
            r2.jumpahead(1000000)
        Then r1 and r2 will use guaranteed-disjoint segments of the full
        period.
        ")
                        (reparse-symbol indented_block_body) [26055 26818])
                    ("__whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26836 26840])
                            ("x" variable nil (reparse-symbol function_parameters) [26842 26843])
                            ("y" variable nil (reparse-symbol function_parameters) [26847 26848])
                            ("z" variable nil (reparse-symbol function_parameters) [26852 26853]))                          
                        :documentation "Set the Wichmann-Hill seed from (x, y, z).

        These must be integers in the range [0, 256).
        ")
                        (reparse-symbol indented_block_body) [26823 27622])
                    ("whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27638 27642])
                            ("a" variable nil (reparse-symbol function_parameters) [27644 27645]))                          
                        :documentation "Seed from hashable object's hash code.

        None or no argument seeds from current time.  It is not guaranteed
        that objects with distinct hash codes lead to distinct internal
        states.

        This is obsolete, provided for compatibility with the seed routine
        used prior to Python 2.1.  Use the .seed() method instead.
        ")
                        (reparse-symbol indented_block_body) [27627 28326]))                  
                :type "class")
                nil [23307 28326])
            ("SystemRandom" type
               (:documentation "Alternate random number generator using sources provided
    by the operating system (such as /dev/urandom on Unix or
    CryptGenRandom on Windows).

     Not available on all systems (see os.urandom() for details).
    "
                :superclasses ("Random")
                :members 
                  ( ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28674 28678]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [28663 28813])
                    ("getrandbits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28834 28838])
                            ("k" variable nil (reparse-symbol function_parameters) [28840 28841]))                          
                        :documentation "getrandbits(k) -> x.  Generates a long int with k random bits.")
                        (reparse-symbol indented_block_body) [28818 29293])
                    ("_stub" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29308 29312])
                            ("args" variable nil (reparse-symbol function_parameters) [29314 29319])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29321 29327]))                          )
                        (reparse-symbol indented_block_body) [29298 29421])
                    ("seed" variable nil (reparse-symbol indented_block_body) [29425 29449])
                    ("_notimplemented" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29475 29479])
                            ("args" variable nil (reparse-symbol function_parameters) [29481 29486])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29488 29494]))                          )
                        (reparse-symbol indented_block_body) [29455 29653])
                    ("getstate" variable nil (reparse-symbol indented_block_body) [29657 29694]))                  
                :type "class")
                nil [28398 29695])
            ("_test_generator" function (:arguments 
              ( ("n" variable nil (reparse-symbol function_parameters) [29775 29776])
                ("func" variable nil (reparse-symbol function_parameters) [29778 29782])
                ("args" variable nil (reparse-symbol function_parameters) [29784 29788]))              ) nil [29755 30309])
            ("_test" function (:arguments 
              ( ("N" variable nil (reparse-symbol function_parameters) [30321 30322]))              ) nil [30311 31109])
            ("_inst" variable nil nil [31441 31457])
            ("seed" variable nil nil [31458 31475])
            ("random" variable nil nil [31476 31497])
            ("uniform" variable nil nil [31498 31521])
            ("triangular" variable nil nil [31522 31551])
            ("randint" variable nil nil [31552 31575])
            ("choice" variable nil nil [31576 31597])
            ("randrange" variable nil nil [31598 31625])
            ("sample" variable nil nil [31626 31647])
            ("shuffle" variable nil nil [31648 31671])
            ("normalvariate" variable nil nil [31672 31707])
            ("lognormvariate" variable nil nil [31708 31745])
            ("expovariate" variable nil nil [31746 31777])
            ("vonmisesvariate" variable nil nil [31778 31817])
            ("gammavariate" variable nil nil [31818 31851])
            ("gauss" variable nil nil [31852 31871])
            ("betavariate" variable nil nil [31872 31903])
            ("paretovariate" variable nil nil [31904 31939])
            ("weibullvariate" variable nil nil [31940 31977])
            ("getstate" variable nil nil [31978 32003])
            ("setstate" variable nil nil [32004 32029])
            ("jumpahead" variable nil nil [32030 32057])
            ("getrandbits" variable nil nil [32058 32089])
            ("if" code nil nil [32091 32130]))          
      :file "random.py"
      :pointmax 32130
      :fsize 32129
      :lastmodtime '(21149 51618 87875 476000)
      :unmatched-syntax '((NAME 14388 . 14389) (IF 14396 . 14398) (ELSE 14412 . 14416)))
    (semanticdb-table "socket.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"\\
This module provides socket operations and some related functions.
On Unix, it supports IP (Internet Protocol) and Unix domain sockets.
On other systems, it only supports IP. Functions specific for a
socket are available as methods of the socket object.

Functions:

socket() -- create a new socket object
socketpair() -- create a pair of new socket objects [*]
fromfd() -- create a socket object from an open file descriptor [*]
gethostname() -- return the current hostname
gethostbyname() -- map a hostname to its IP number
gethostbyaddr() -- map an IP number or hostname to DNS info
getservbyname() -- map a service name and a protocol name to a port number
getprotobyname() -- map a protocol name (e.g. 'tcp') to a number
ntohs(), ntohl() -- convert 16, 32 bit int from network to host byte order
htons(), htonl() -- convert 16, 32 bit int from host to network byte order
inet_aton() -- convert IP addr string (123.45.67.89) to 32-bit packed format
inet_ntoa() -- convert 32-bit packed format IP to string (123.45.67.89)
ssl() -- secure socket layer support (only available if configured)
socket.getdefaulttimeout() -- get the default timeout value
socket.setdefaulttimeout() -- set the default timeout value
create_connection() -- connects to an address, with an optional timeout and
                       optional source address.

 [*] not available on all platforms!

Special objects:

SocketType -- type object for socket objects
error -- exception raised for I/O errors
has_ipv6 -- boolean value indicating if IPv6 is supported

Integer constants:

AF_INET, AF_UNIX -- socket domains (first argument to socket() call)
SOCK_STREAM, SOCK_DGRAM, SOCK_RAW -- socket types (second argument)

Many other constants may be defined; these may be used in calls to
the setsockopt() and getsockopt() methods.
\"\"\"" code nil nil [94 1909])
            ("_socket" include nil nil [1911 1925])
            ("_socket" include nil nil [1926 1947])
            ("functools" include nil nil [1948 1977])
            ("types" include nil nil [1978 2006])
            ("try" code nil nil [2008 2950])
            ("warnings" include nil nil [2951 2975])
            ("sys" include nil nil [2951 2975])
            ("os" include nil nil [2951 2975])
            ("try" code nil nil [2977 3071])
            ("try" code nil nil [3072 3131])
            ("EBADF" variable nil nil [3131 3165])
            ("EINTR" variable nil nil [3166 3200])
            ("__all__" variable nil nil [3202 3244])
            ("__all__" code nil nil [3245 3290])
            ("_realsocket" variable nil nil [3293 3313])
            ("if" code nil nil [3333 4229])
            ("getfqdn" function
               (:documentation "Get fully qualified domain name from name.

    An empty argument is interpreted as meaning the local host.

    First the hostname returned by gethostbyaddr() is checked, then
    possibly existing aliases. In case no FQDN is available, hostname
    from gethostname() is returned.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4244 4248]))                  )
                nil [4232 4923])
            ("_socketmethods" variable nil nil [4925 5136])
            ("if" code nil nil [5138 5207])
            ("if" code nil nil [5208 5291])
            ("_delegate_methods" variable nil nil [5402 5511])
            ("_closedsocket" type
               (:superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [5546 5560])
                    ("_dummy" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [5576 5581]))                      ) (reparse-symbol indented_block_body) [5565 5634])
                    ("send" variable nil (reparse-symbol indented_block_body) [5697 5765])
                    ("__getattr__" variable nil (reparse-symbol indented_block_body) [5770 5790]))                  
                :type "class")
                nil [5513 5791])
            ("_socketobject" type
               (:superclasses ("object")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [6031 6060])
                    ("__slots__" code nil (reparse-symbol indented_block_body) [6066 6128])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [6217 6288])
                            ("self" variable nil (reparse-symbol indented_block_body) [6296 6314])
                            ("for" code nil (reparse-symbol indented_block_body) [6323 6414]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6147 6151])
                            ("family" variable nil (reparse-symbol function_parameters) [6153 6159])
                            ("type" variable nil (reparse-symbol function_parameters) [6169 6173])
                            ("proto" variable nil (reparse-symbol function_parameters) [6187 6192])
                            ("_sock" variable nil (reparse-symbol function_parameters) [6196 6201]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6134 6414])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6429 6433])
                            ("_closedsocket" variable nil (reparse-symbol function_parameters) [6435 6448])
                            ("_delegate_methods" variable nil (reparse-symbol function_parameters) [6478 6495])
                            ("setattr" variable nil (reparse-symbol function_parameters) [6515 6522]))                          )
                        (reparse-symbol indented_block_body) [6419 6763])
                    ("close" variable nil (reparse-symbol indented_block_body) [6767 6808])
                    ("accept" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6825 6829]))                          )
                        (reparse-symbol indented_block_body) [6814 6920])
                    ("accept" variable nil (reparse-symbol indented_block_body) [6924 6967])
                    ("dup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6981 6985]))                          
                        :documentation "dup() -> socket object

        Return a new socket object connected to the same system resource.")
                        (reparse-symbol indented_block_body) [6973 7147])
                    ("makefile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7165 7169])
                            ("mode" variable nil (reparse-symbol function_parameters) [7171 7175])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [7181 7188]))                          
                        :documentation "makefile([mode[, bufsize]]) -> file object

        Return a regular file object corresponding to the socket.  The mode
        and bufsize arguments are as for the built-in open() function.")
                        (reparse-symbol indented_block_body) [7152 7453])
                    ("family" variable nil (reparse-symbol indented_block_body) [7458 7532])
                    ("type" variable nil (reparse-symbol indented_block_body) [7537 7605])
                    ("proto" variable nil (reparse-symbol indented_block_body) [7610 7684]))                  
                :type "class")
                nil [5997 7685])
            ("meth" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [7695 7699])
                ("self" variable nil (reparse-symbol function_parameters) [7700 7704])
                ("args" variable nil (reparse-symbol function_parameters) [7705 7710]))              ) nil [7686 7756])
            ("for" code nil nil [7757 7949])
            ("socket" variable nil nil [7950 7985])
            ("_fileobject" type
               (:documentation "Faux file object attached to a socket object."
                :superclasses ("object")
                :members 
                  ( ("default_bufsize" variable nil (reparse-symbol indented_block_body) [8075 8097])
                    ("name" variable nil (reparse-symbol indented_block_body) [8102 8119])
                    ("__slots__" variable nil (reparse-symbol indented_block_body) [8125 8332])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8408 8425])
                            ("self" variable nil (reparse-symbol indented_block_body) [8434 8450])
                            ("if" code nil (reparse-symbol indented_block_body) [8495 8554])
                            ("self" variable nil (reparse-symbol indented_block_body) [8562 8584])
                            ("self" variable nil (reparse-symbol indented_block_body) [8593 8615])
                            ("if" code nil (reparse-symbol indented_block_body) [8842 9018])
                            ("self" variable nil (reparse-symbol indented_block_body) [9026 9050])
                            ("self" variable nil (reparse-symbol indented_block_body) [9339 9362])
                            ("self" variable nil (reparse-symbol indented_block_body) [9371 9386])
                            ("self" variable nil (reparse-symbol indented_block_body) [9415 9433])
                            ("self" variable nil (reparse-symbol indented_block_body) [9442 9461]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8351 8355])
                            ("sock" variable nil (reparse-symbol function_parameters) [8357 8361])
                            ("mode" variable nil (reparse-symbol function_parameters) [8363 8367])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [8374 8381])
                            ("close" variable nil (reparse-symbol function_parameters) [8386 8391]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8338 9462])
                    ("_getclosed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9482 9486]))                          )
                        (reparse-symbol indented_block_body) [9467 9523])
                    ("closed" variable nil (reparse-symbol indented_block_body) [9527 9590])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9606 9610]))                          )
                        (reparse-symbol indented_block_body) [9596 9792])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9809 9813]))                          )
                        (reparse-symbol indented_block_body) [9797 9946])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9961 9965]))                          )
                        (reparse-symbol indented_block_body) [9951 10724])
                    ("fileno" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10740 10744]))                          )
                        (reparse-symbol indented_block_body) [10729 10782])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10797 10801])
                            ("data" variable nil (reparse-symbol function_parameters) [10803 10807]))                          )
                        (reparse-symbol indented_block_body) [10787 11179])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11199 11203])
                            ("list" variable nil (reparse-symbol function_parameters) [11205 11209]))                          )
                        (reparse-symbol indented_block_body) [11184 11560])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11574 11578])
                            ("size" variable nil (reparse-symbol function_parameters) [11580 11584]))                          )
                        (reparse-symbol indented_block_body) [11565 14532])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14550 14554])
                            ("size" variable nil (reparse-symbol function_parameters) [14556 14560]))                          )
                        (reparse-symbol indented_block_body) [14537 18555])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18574 18578])
                            ("sizehint" variable nil (reparse-symbol function_parameters) [18580 18588]))                          )
                        (reparse-symbol indented_block_body) [18560 18881])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18925 18929]))                          )
                        (reparse-symbol indented_block_body) [18912 18952])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18966 18970]))                          )
                        (reparse-symbol indented_block_body) [18957 19077]))                  
                :type "class")
                nil [7987 19077])
            ("_GLOBAL_DEFAULT_TIMEOUT" variable nil nil [19078 19112])
            ("create_connection" function
               (:documentation "Connect to *address* and return the socket object.

    Convenience function.  Connect to *address* (a 2-tuple ``(host,
    port)``) and return the socket object.  Passing the optional
    *timeout* parameter will set the timeout on the socket instance
    before attempting to connect.  If no *timeout* is supplied, the
    global default timeout setting returned by :func:`getdefaulttimeout`
    is used.  If *source_address* is set it must be a tuple of (host, port)
    for the socket to bind as a source address before making the connection.
    An host of '' or port 0 tells the OS to use the default.
    "
                :arguments 
                  ( ("address" variable nil (reparse-symbol function_parameters) [19136 19143])
                    ("timeout" variable nil (reparse-symbol function_parameters) [19145 19152])
                    ("source_address" variable nil (reparse-symbol function_parameters) [19200 19214]))                  )
                nil [19114 20513]))          
      :file "socket.py"
      :pointmax 20513
      :fsize 20512
      :lastmodtime '(21149 51618 125875 652000)
      :unmatched-syntax '((INDENT_BLOCK 20321 . 20403) (NEWLINE 20320 . 20321) (COLON 20319 . 20320) (TRY 20019 . 20022) (AS 20315 . 20317)))
    (semanticdb-table "urlparse.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Parse (absolute and relative) URLs.

urlparse module is based upon the following RFC specifications.

RFC 3986 (STD66): \"Uniform Resource Identifiers\" by T. Berners-Lee, R. Fielding
and L.  Masinter, January 2005.

RFC 2732 : \"Format for Literal IPv6 Addresses in URL's by R.Hinden, B.Carpenter
and L.Masinter, December 1999.

RFC 2396:  \"Uniform Resource Identifiers (URI)\": Generic Syntax by T.
Berners-Lee, R. Fielding, and L. Masinter, August 1998.

RFC 2368: \"The mailto URL scheme\", by P.Hoffman , L Masinter, J. Zwinski, July 1998.

RFC 1808: \"Relative Uniform Resource Locators\", by R. Fielding, UC Irvine, June
1995.

RFC 1738: \"Uniform Resource Locators (URL)\" by T. Berners-Lee, L. Masinter, M.
McCahill, December 1994

RFC 3986 is considered the current standard and any future changes to
urlparse module should conform with it.  The urlparse module is
currently not entirely compliant with this RFC due to defacto
scenarios for parsing, and for backward compatibility purposes, some
parsing quirks from older RFCs are retained. The testcases in
test_urlparse.py provides a good indicator of parsing behavior.

\"\"\"" code nil nil [1 1130])
            ("re" include nil nil [1132 1141])
            ("__all__" variable nil nil [1143 1265])
            ("uses_relative" variable nil nil [1325 1533])
            ("uses_netloc" variable nil nil [1534 1785])
            ("uses_params" variable nil nil [1786 1948])
            ("non_hierarchical" variable nil nil [2094 2218])
            ("uses_query" variable nil nil [2219 2341])
            ("uses_fragment" variable nil nil [2342 2499])
            ("scheme_chars" variable nil nil [2536 2677])
            ("MAX_CACHE_SIZE" variable nil nil [2679 2698])
            ("_parse_cache" variable nil nil [2699 2716])
            ("clear_cache" function (:documentation "Clear the parse cache.") nil [2718 2795])
            ("ResultMixin" type
               (:documentation "Shared methods for the parsed result objects."
                :superclasses ("object")
                :members 
                  ( ("username" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2912 2916]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2885 3155])
                    ("password" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3187 3191]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3160 3398])
                    ("hostname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3430 3434]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3403 3752])
                    ("port" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3780 3784]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3757 4062]))                  
                :type "class")
                nil [2797 4062])
            ("collections" include nil nil [4063 4097])
            ("SplitResult" type
               (:superclasses ("ResultMixin")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [4200 4214])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4231 4235]))                          )
                        (reparse-symbol indented_block_body) [4220 4270]))                  
                :type "class")
                nil [4099 4270])
            ("ParseResult" type
               (:superclasses ("ResultMixin")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [4380 4394])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4411 4415]))                          )
                        (reparse-symbol indented_block_body) [4400 4450]))                  
                :type "class")
                nil [4272 4450])
            ("urlparse" function
               (:documentation "Parse a URL into 6 components:
    <scheme>://<netloc>/<path>;<params>?<query>#<fragment>
    Return a 6-tuple: (scheme, netloc, path, params, query, fragment).
    Note that we don't break the components up in smaller bits
    (e.g. netloc is a single string) and we don't expand % escapes."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [4465 4468])
                    ("scheme" variable nil (reparse-symbol function_parameters) [4470 4476])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [4481 4496]))                  )
                nil [4452 5090])
            ("_splitparams" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [5108 5111]))              ) nil [5091 5287])
            ("_splitnetloc" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [5305 5308])
                ("start" variable nil (reparse-symbol function_parameters) [5310 5315]))              ) nil [5288 5736])
            ("urlsplit" function
               (:documentation "Parse a URL into 5 components:
    <scheme>://<netloc>/<path>?<query>#<fragment>
    Return a 5-tuple: (scheme, netloc, path, query, fragment).
    Note that we don't break the components up in smaller bits
    (e.g. netloc is a single string) and we don't expand % escapes."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [5750 5753])
                    ("scheme" variable nil (reparse-symbol function_parameters) [5755 5761])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [5766 5781]))                  )
                nil [5737 7973])
            ("urlunparse" function
               (:documentation "Put a parsed URL back together again.  This may result in a
    slightly different, but equivalent URL, if the URL that was parsed
    originally had redundant delimiters, e.g. a ? with an empty query
    (the draft states that these are equivalent)."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [7989 7993]))                  )
                nil [7974 8428])
            ("urlunsplit" function
               (:documentation "Combine the elements of a tuple as returned by urlsplit() into a
    complete URL as a string. The data argument can be any five-item iterable.
    This may result in a slightly different, but equivalent URL, if the URL that
    was parsed originally had unnecessary delimiters (for example, a ? with an
    empty query; the RFC states that these are equivalent)."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [8444 8448]))                  )
                nil [8429 9200])
            ("urljoin" function
               (:documentation "Join a base URL and a possibly relative URL to form an absolute
    interpretation of the latter."
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [9213 9217])
                    ("url" variable nil (reparse-symbol function_parameters) [9219 9222])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [9224 9239]))                  )
                nil [9201 11003])
            ("urldefrag" function
               (:documentation "Removes any existing fragment from URL.

    Returns a tuple of the defragmented URL and the fragment.  If
    the URL contained no fragments, the second element is the
    empty string.
    "
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [11018 11021]))                  )
                nil [11004 11399])
            ("try" code nil nil [11400 11544])
            ("_hexdig" variable nil nil [11824 11858])
            ("_hextochr" variable nil nil [11859 11951])
            ("_asciire" variable nil nil [11952 11991])
            ("unquote" function
               (:documentation "unquote('abc%20def') -> 'abc def'."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12005 12006]))                  )
                nil [11993 12698])
            ("parse_qs" function
               (:documentation "Parse a query given as a string argument.

        Arguments:

        qs: percent-encoded query string to be parsed

        keep_blank_values: flag indicating whether blank values in
            percent-encoded queries should be treated as blank strings.
            A true value indicates that blanks should be retained as
            blank strings.  The default false value indicates that
            blank values are to be ignored and treated as if they were
            not included.

        strict_parsing: flag indicating what to do with parsing errors.
            If false (the default), errors are silently ignored.
            If true, errors raise a ValueError exception.
    "
                :arguments 
                  ( ("qs" variable nil (reparse-symbol function_parameters) [12712 12714])
                    ("keep_blank_values" variable nil (reparse-symbol function_parameters) [12716 12733])
                    ("strict_parsing" variable nil (reparse-symbol function_parameters) [12737 12751]))                  )
                nil [12699 13669])
            ("parse_qsl" function
               (:documentation "Parse a query given as a string argument.

    Arguments:

    qs: percent-encoded query string to be parsed

    keep_blank_values: flag indicating whether blank values in
        percent-encoded queries should be treated as blank strings.  A
        true value indicates that blanks should be retained as blank
        strings.  The default false value indicates that blank values
        are to be ignored and treated as if they were  not included.

    strict_parsing: flag indicating what to do with parsing errors. If
        false (the default), errors are silently ignored. If true,
        errors raise a ValueError exception.

    Returns a list, as G-d intended.
    "
                :arguments 
                  ( ("qs" variable nil (reparse-symbol function_parameters) [13684 13686])
                    ("keep_blank_values" variable nil (reparse-symbol function_parameters) [13688 13705])
                    ("strict_parsing" variable nil (reparse-symbol function_parameters) [13709 13723]))                  )
                nil [13670 15128]))          
      :file "urlparse.py"
      :pointmax 15128
      :fsize 15127
      :lastmodtime '(21149 51618 190875 954000)
      :unmatched-syntax '((COMMA 4359 . 4360) (NAME 4290 . 4300) (PAREN_BLOCK 4300 . 4359) (COMMA 4179 . 4180) (NAME 4117 . 4127) (PAREN_BLOCK 4127 . 4179)))
    (semanticdb-table "bisect.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Bisection algorithms.\"\"\"" code nil nil [1 28])
            ("insort_right" function
               (:documentation "Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the right of the rightmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [47 48])
                    ("x" variable nil (reparse-symbol function_parameters) [50 51])
                    ("lo" variable nil (reparse-symbol function_parameters) [53 55])
                    ("hi" variable nil (reparse-symbol function_parameters) [59 61]))                  )
                nil [30 547])
            ("insort" variable nil nil [548 569])
            ("bisect_right" function
               (:documentation "Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e <= x, and all e in
    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will
    insert just after the rightmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [615 616])
                    ("x" variable nil (reparse-symbol function_parameters) [618 619])
                    ("lo" variable nil (reparse-symbol function_parameters) [621 623])
                    ("hi" variable nil (reparse-symbol function_parameters) [627 629]))                  )
                nil [598 1254])
            ("bisect" variable nil nil [1255 1276])
            ("insort_left" function
               (:documentation "Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the left of the leftmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1321 1322])
                    ("x" variable nil (reparse-symbol function_parameters) [1324 1325])
                    ("lo" variable nil (reparse-symbol function_parameters) [1327 1329])
                    ("hi" variable nil (reparse-symbol function_parameters) [1333 1335]))                  )
                nil [1305 1819])
            ("bisect_left" function
               (:documentation "Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e < x, and all e in
    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will
    insert just before the leftmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1837 1838])
                    ("x" variable nil (reparse-symbol function_parameters) [1840 1841])
                    ("lo" variable nil (reparse-symbol function_parameters) [1843 1845])
                    ("hi" variable nil (reparse-symbol function_parameters) [1849 1851]))                  )
                nil [1821 2476])
            ("try" code nil nil [2536 2596]))          
      :file "bisect.py"
      :pointmax 2596
      :fsize 2595
      :lastmodtime '(21149 51617 873874 483000)
      :unmatched-syntax nil)
    (semanticdb-table "warnings.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Python part of the warnings subsystem.\"\"\"" code nil nil [1 45])
            ("linecache" include nil nil [172 188])
            ("sys" include nil nil [189 199])
            ("types" include nil nil [200 212])
            ("__all__" variable nil nil [214 328])
            ("warnpy3k" function
               (:documentation "Issue a deprecation warning for Python 3.x related changes.

    Warnings are omitted unless Python is started with the -3 option.
    "
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [344 351])
                    ("category" variable nil (reparse-symbol function_parameters) [353 361])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [368 378]))                  )
                nil [331 670])
            ("_show_warning" function
               (:documentation "Hook to write a warning to a file; replace if you like."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [689 696])
                    ("category" variable nil (reparse-symbol function_parameters) [698 706])
                    ("filename" variable nil (reparse-symbol function_parameters) [708 716])
                    ("lineno" variable nil (reparse-symbol function_parameters) [718 724])
                    ("file" variable nil (reparse-symbol function_parameters) [726 730])
                    ("line" variable nil (reparse-symbol function_parameters) [737 741]))                  )
                nil [671 1047])
            ("showwarning" variable nil nil [1134 1161])
            ("formatwarning" function
               (:documentation "Function to format a warning the standard way."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [1181 1188])
                    ("category" variable nil (reparse-symbol function_parameters) [1190 1198])
                    ("filename" variable nil (reparse-symbol function_parameters) [1200 1208])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1210 1216])
                    ("line" variable nil (reparse-symbol function_parameters) [1218 1222]))                  )
                nil [1163 1519])
            ("filterwarnings" function
               (:documentation "Insert an entry into the list of warnings filters (at the front).

    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'message' -- a regex that the warning message must match
    'category' -- a class that the warning must be a subclass of
    'module' -- a regex that the module name must match
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [1539 1545])
                    ("message" variable nil (reparse-symbol function_parameters) [1547 1554])
                    ("category" variable nil (reparse-symbol function_parameters) [1559 1567])
                    ("module" variable nil (reparse-symbol function_parameters) [1577 1583])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1588 1594])
                    ("append" variable nil (reparse-symbol function_parameters) [1617 1623]))                  )
                nil [1520 2854])
            ("simplefilter" function
               (:documentation "Insert a simple entry into the list of warnings filters (at the front).

    A simple filter matches all modules and messages.
    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'category' -- a class that the warning must be a subclass of
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [2872 2878])
                    ("category" variable nil (reparse-symbol function_parameters) [2880 2888])
                    ("lineno" variable nil (reparse-symbol function_parameters) [2898 2904])
                    ("append" variable nil (reparse-symbol function_parameters) [2908 2914]))                  )
                nil [2855 3709])
            ("resetwarnings" function (:documentation "Clear the list of warning filters, so that no filters are active.") nil [3710 3827])
            ("_OptionError" type
               (:documentation "Exception used by option processing helpers."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [3918 3922]))                  
                :type "class")
                nil [3828 3923])
            ("_processoptions" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [4002 4006]))              ) nil [3982 4171])
            ("_setoption" function (:arguments 
              ( ("arg" variable nil (reparse-symbol function_parameters) [4218 4221]))              ) nil [4203 5029])
            ("_getaction" function (:arguments 
              ( ("action" variable nil (reparse-symbol function_parameters) [5071 5077]))              ) nil [5056 5356])
            ("_getcategory" function (:arguments 
              ( ("category" variable nil (reparse-symbol function_parameters) [5400 5408]))              ) nil [5383 6216])
            ("warn" function
               (:documentation "Issue a warning, or maybe ignore it or raise an exception."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [6266 6273])
                    ("category" variable nil (reparse-symbol function_parameters) [6275 6283])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [6290 6300]))                  )
                nil [6257 7596])
            ("warn_explicit" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [7615 7622])
                ("category" variable nil (reparse-symbol function_parameters) [7624 7632])
                ("filename" variable nil (reparse-symbol function_parameters) [7634 7642])
                ("lineno" variable nil (reparse-symbol function_parameters) [7644 7650])
                ("module" variable nil (reparse-symbol function_parameters) [7670 7676])
                ("registry" variable nil (reparse-symbol function_parameters) [7683 7691])
                ("module_globals" variable nil (reparse-symbol function_parameters) [7698 7712]))              ) nil [7597 9607])
            ("WarningMessage" type
               (:documentation "Holds the result of a single showwarning() call."
                :superclasses ("object")
                :members 
                  ( ("_WARNING_DETAILS" variable nil (reparse-symbol indented_block_body) [9704 9808])
                    ("__init__" function
                       (:suite 
                          ( ("local_values" variable nil (reparse-symbol indented_block_body) [9921 9944])
                            ("for" code nil (reparse-symbol indented_block_body) [9953 10040])
                            ("None" code nil (reparse-symbol indented_block_body) [10105 10109]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9827 9831])
                            ("message" variable nil (reparse-symbol function_parameters) [9833 9840])
                            ("category" variable nil (reparse-symbol function_parameters) [9842 9850])
                            ("filename" variable nil (reparse-symbol function_parameters) [9852 9860])
                            ("lineno" variable nil (reparse-symbol function_parameters) [9862 9868])
                            ("file" variable nil (reparse-symbol function_parameters) [9870 9874])
                            ("line" variable nil (reparse-symbol function_parameters) [9901 9905]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9814 10110])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10127 10131]))                          )
                        (reparse-symbol indented_block_body) [10115 10358]))                  
                :type "class")
                nil [9609 10358])
            ("catch_warnings" type
               (:documentation "A context manager that copies and restores the warnings filter upon
    exiting the context.

    The 'record' argument specifies whether warnings should be captured by a
    custom implementation of warnings.showwarning() and be appended to a list
    returned by the context manager. Otherwise None is returned by the context
    manager. The objects appended to the list are arguments whose attributes
    mirror the arguments to showwarning().

    The 'module' argument is to specify an alternative module to the module
    named 'warnings' and imported under that name. This argument is only useful
    when testing the warnings module itself.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        \"\"\"" code nil (reparse-symbol indented_block_body) [11117 11357])
                            ("self" variable nil (reparse-symbol indented_block_body) [11366 11387])
                            ("module" code nil (reparse-symbol indented_block_body) [11458 11464])
                            ("self" variable nil (reparse-symbol indented_block_body) [11473 11494]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11075 11079])
                            ("record" variable nil (reparse-symbol function_parameters) [11081 11087])
                            ("module" variable nil (reparse-symbol function_parameters) [11095 11101]))                          
                        :documentation "Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11062 11495])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11513 11517]))                          )
                        (reparse-symbol indented_block_body) [11500 11795])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11814 11818]))                          )
                        (reparse-symbol indented_block_body) [11800 12349])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12367 12371])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [12373 12382]))                          )
                        (reparse-symbol indented_block_body) [12354 12592]))                  
                :type "class")
                nil [10360 12592])
            ("_warnings_defaults" variable nil nil [13044 13070])
            ("try" code nil nil [13071 13379])
            ("_processoptions" code nil nil [13405 13437])
            ("if" code nil nil [13438 14022])
            ("del" code nil nil [14022 14044]))          
      :file "warnings.py"
      :pointmax 14045
      :fsize 14044
      :lastmodtime '(21149 51618 210876 46000)
      :unmatched-syntax '((NAME 11396 . 11400) (IF 11435 . 11437) (ELSE 11453 . 11457) (NAME 10048 . 10052) (IF 10088 . 10090) (ELSE 10100 . 10104) (NAME 1367 . 1371) (IF 1410 . 1412) (ELSE 1426 . 1430)))
    (semanticdb-table "urllib.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Open an arbitrary URL.

See the following document for more info on URLs:
\"Names and Addresses, URIs, URLs, URNs, URCs\", at
http://www.w3.org/pub/WWW/Addressing/Overview.html

See also the HTTP spec (from which the error codes are derived):
\"HTTP - Hypertext Transfer Protocol\", at
http://www.w3.org/pub/WWW/Protocols/

Related standards and specs:
- RFC1808: the \"relative URL\" spec. (authoritative status)
- RFC1738 - the \"URL standard\". (authoritative status)
- RFC1630 - the \"URI spec\". (informational status)

The object returned by URLopener().open(file) will differ per
protocol.  All you know is that is has methods read(), readline(),
readlines(), fileno(), close() and info().  The read*(), fileno()
and close() methods work like those of open files.
The info() method returns a mimetools.Message object which can be
used to query various info about the object, if available.
(mimetools.Message objects are queried with the getheader() method.)
\"\"\"" code nil nil [1 962])
            ("string" include nil nil [964 977])
            ("socket" include nil nil [978 991])
            ("os" include nil nil [992 1001])
            ("time" include nil nil [1002 1013])
            ("sys" include nil nil [1014 1024])
            ("base64" include nil nil [1025 1038])
            ("re" include nil nil [1039 1048])
            ("urlparse" include nil nil [1050 1090])
            ("__all__" variable nil nil [1092 1542])
            ("__version__" variable nil nil [1544 1564])
            ("MAXFTPCACHE" variable nil nil [1614 1630])
            ("if" code nil nil [1707 2280])
            ("_urlopener" variable nil nil [2544 2561])
            ("urlopen" function
               (:documentation "Create a file-like object for the specified URL to read from."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [2574 2577])
                    ("data" variable nil (reparse-symbol function_parameters) [2579 2583])
                    ("proxies" variable nil (reparse-symbol function_parameters) [2590 2597]))                  )
                nil [2562 3161])
            ("urlretrieve" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [3177 3180])
                ("filename" variable nil (reparse-symbol function_parameters) [3182 3190])
                ("reporthook" variable nil (reparse-symbol function_parameters) [3197 3207])
                ("data" variable nil (reparse-symbol function_parameters) [3214 3218]))              ) nil [3161 3373])
            ("urlcleanup" function nil nil [3373 3486])
            ("try" code nil nil [3503 3580])
            ("ContentTooShortError" type
               (:superclasses ("IOError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("IOError" code nil (reparse-symbol indented_block_body) [3738 3769])
                            ("self" variable nil (reparse-symbol indented_block_body) [3778 3800]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3705 3709])
                            ("message" variable nil (reparse-symbol function_parameters) [3711 3718])
                            ("content" variable nil (reparse-symbol function_parameters) [3720 3727]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3692 3801]))                  
                :type "class")
                nil [3651 3801])
            ("ftpcache" variable nil nil [3802 3815])
            ("URLopener" type
               (:documentation "Class to open URLs.
    This is a class rather than just a subroutine because we may need
    more than one set of global protocol-specific options.
    Note -- this is a base class for those who don't want the
    automatic handling of errors type 302 (relocated) and 401
    (authorization needed)."
                :members 
                  ( ("__tempfiles" variable nil (reparse-symbol indented_block_body) [4149 4167])
                    ("version" code nil (reparse-symbol indented_block_body) [4173 4215])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [4289 4344])
                            ("assert" code nil (reparse-symbol indented_block_body) [4352 4415])
                            ("self" variable nil (reparse-symbol indented_block_body) [4424 4446])
                            ("self" variable nil (reparse-symbol indented_block_body) [4455 4491])
                            ("self" variable nil (reparse-symbol indented_block_body) [4500 4538])
                            ("self" variable nil (reparse-symbol indented_block_body) [4547 4595])
                            ("self" variable nil (reparse-symbol indented_block_body) [4604 4625])
                            ("self" variable nil (reparse-symbol indented_block_body) [4634 4659])
                            ("self" variable nil (reparse-symbol indented_block_body) [4684 4705])
                            ("self" variable nil (reparse-symbol indented_block_body) [5026 5050]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4252 4256])
                            ("proxies" variable nil (reparse-symbol function_parameters) [4258 4265])
                            ("x509" variable nil (reparse-symbol function_parameters) [4272 4278]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4239 5051])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5287 5291]))                          )
                        (reparse-symbol indented_block_body) [5275 5315])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5330 5334]))                          )
                        (reparse-symbol indented_block_body) [5320 5360])
                    ("cleanup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5377 5381]))                          )
                        (reparse-symbol indented_block_body) [5365 5829])
                    ("addheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5848 5852])
                            ("args" variable nil (reparse-symbol function_parameters) [5854 5859]))                          
                        :documentation "Add a header to be used by the HTTP interface only
        e.g. u.addheader('Accept', 'sound/basic')")
                        (reparse-symbol indented_block_body) [5834 6014])
                    ("open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6053 6057])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [6059 6066])
                            ("data" variable nil (reparse-symbol function_parameters) [6068 6072]))                          
                        :documentation "Use URLopener().open(file) instead of open(file, 'r').")
                        (reparse-symbol indented_block_body) [6044 7506])
                    ("open_unknown" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7528 7532])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [7534 7541])
                            ("data" variable nil (reparse-symbol function_parameters) [7543 7547]))                          
                        :documentation "Overridable interface to open unknown URL type.")
                        (reparse-symbol indented_block_body) [7511 7719])
                    ("open_unknown_proxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7747 7751])
                            ("proxy" variable nil (reparse-symbol function_parameters) [7753 7758])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [7760 7767])
                            ("data" variable nil (reparse-symbol function_parameters) [7769 7773]))                          
                        :documentation "Overridable interface to open unknown URL type.")
                        (reparse-symbol indented_block_body) [7724 7957])
                    ("retrieve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8000 8004])
                            ("url" variable nil (reparse-symbol function_parameters) [8006 8009])
                            ("filename" variable nil (reparse-symbol function_parameters) [8011 8019])
                            ("reporthook" variable nil (reparse-symbol function_parameters) [8026 8036])
                            ("data" variable nil (reparse-symbol function_parameters) [8043 8047]))                          
                        :documentation "retrieve(url) returns (filename, headers) for a local object
        or (tempfilename, headers) for a remote object.")
                        (reparse-symbol indented_block_body) [7987 10424])
                    ("open_http" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10515 10519])
                            ("url" variable nil (reparse-symbol function_parameters) [10521 10524])
                            ("data" variable nil (reparse-symbol function_parameters) [10526 10530]))                          
                        :documentation "Use HTTP protocol.")
                        (reparse-symbol indented_block_body) [10501 13423])
                    ("http_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13443 13447])
                            ("url" variable nil (reparse-symbol function_parameters) [13449 13452])
                            ("fp" variable nil (reparse-symbol function_parameters) [13454 13456])
                            ("errcode" variable nil (reparse-symbol function_parameters) [13458 13465])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [13467 13473])
                            ("headers" variable nil (reparse-symbol function_parameters) [13475 13482])
                            ("data" variable nil (reparse-symbol function_parameters) [13484 13488]))                          
                        :documentation "Handle http errors.
        Derived class can override this, or provide specific handlers
        named http_error_DDD where DDD is the 3-digit error code.")
                        (reparse-symbol indented_block_body) [13428 14145])
                    ("http_error_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14173 14177])
                            ("url" variable nil (reparse-symbol function_parameters) [14179 14182])
                            ("fp" variable nil (reparse-symbol function_parameters) [14184 14186])
                            ("errcode" variable nil (reparse-symbol function_parameters) [14188 14195])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [14197 14203])
                            ("headers" variable nil (reparse-symbol function_parameters) [14205 14212]))                          
                        :documentation "Default error handler: close the connection and raise IOError.")
                        (reparse-symbol indented_block_body) [14150 14375])
                    ("if" code nil (reparse-symbol indented_block_body) [14380 17649])
                    ("open_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17668 17672])
                            ("url" variable nil (reparse-symbol function_parameters) [17674 17677]))                          
                        :documentation "Use local file or FTP depending on form of URL.")
                        (reparse-symbol indented_block_body) [17654 18065])
                    ("open_local_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18090 18094])
                            ("url" variable nil (reparse-symbol function_parameters) [18096 18099]))                          
                        :documentation "Use local file.")
                        (reparse-symbol indented_block_body) [18070 19605])
                    ("open_ftp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19623 19627])
                            ("url" variable nil (reparse-symbol function_parameters) [19629 19632]))                          
                        :documentation "Use FTP protocol.")
                        (reparse-symbol indented_block_body) [19610 22068])
                    ("open_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22087 22091])
                            ("url" variable nil (reparse-symbol function_parameters) [22093 22096])
                            ("data" variable nil (reparse-symbol function_parameters) [22098 22102]))                          
                        :documentation "Use \"data\" URL.")
                        (reparse-symbol indented_block_body) [22073 23734]))                  
                :type "class")
                nil [3816 23734])
            ("FancyURLopener" type
               (:documentation "Derived class with handlers for errors we can handle (perhaps)."
                :superclasses ("URLopener")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("URLopener" code nil (reparse-symbol indented_block_body) [23893 23934])
                            ("self" variable nil (reparse-symbol indented_block_body) [23943 23963])
                            ("self" variable nil (reparse-symbol indented_block_body) [23972 23986])
                            ("self" variable nil (reparse-symbol indented_block_body) [23995 24013]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23861 23865])
                            ("args" variable nil (reparse-symbol function_parameters) [23867 23872])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23874 23882]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23848 24014])
                    ("http_error_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24042 24046])
                            ("url" variable nil (reparse-symbol function_parameters) [24048 24051])
                            ("fp" variable nil (reparse-symbol function_parameters) [24053 24055])
                            ("errcode" variable nil (reparse-symbol function_parameters) [24057 24064])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [24066 24072])
                            ("headers" variable nil (reparse-symbol function_parameters) [24074 24081]))                          
                        :documentation "Default error handling -- don't raise an exception.")
                        (reparse-symbol indented_block_body) [24019 24213])
                    ("http_error_302" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24237 24241])
                            ("url" variable nil (reparse-symbol function_parameters) [24243 24246])
                            ("fp" variable nil (reparse-symbol function_parameters) [24248 24250])
                            ("errcode" variable nil (reparse-symbol function_parameters) [24252 24259])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [24261 24267])
                            ("headers" variable nil (reparse-symbol function_parameters) [24269 24276])
                            ("data" variable nil (reparse-symbol function_parameters) [24278 24282]))                          
                        :documentation "Error 302 -- relocated (temporarily).")
                        (reparse-symbol indented_block_body) [24218 24889])
                    ("redirect_internal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24916 24920])
                            ("url" variable nil (reparse-symbol function_parameters) [24922 24925])
                            ("fp" variable nil (reparse-symbol function_parameters) [24927 24929])
                            ("errcode" variable nil (reparse-symbol function_parameters) [24931 24938])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [24940 24946])
                            ("headers" variable nil (reparse-symbol function_parameters) [24948 24955])
                            ("data" variable nil (reparse-symbol function_parameters) [24957 24961]))                          )
                        (reparse-symbol indented_block_body) [24894 25833])
                    ("http_error_301" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25857 25861])
                            ("url" variable nil (reparse-symbol function_parameters) [25863 25866])
                            ("fp" variable nil (reparse-symbol function_parameters) [25868 25870])
                            ("errcode" variable nil (reparse-symbol function_parameters) [25872 25879])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [25881 25887])
                            ("headers" variable nil (reparse-symbol function_parameters) [25889 25896])
                            ("data" variable nil (reparse-symbol function_parameters) [25898 25902]))                          
                        :documentation "Error 301 -- also relocated (permanently).")
                        (reparse-symbol indented_block_body) [25838 26043])
                    ("http_error_303" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26067 26071])
                            ("url" variable nil (reparse-symbol function_parameters) [26073 26076])
                            ("fp" variable nil (reparse-symbol function_parameters) [26078 26080])
                            ("errcode" variable nil (reparse-symbol function_parameters) [26082 26089])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [26091 26097])
                            ("headers" variable nil (reparse-symbol function_parameters) [26099 26106])
                            ("data" variable nil (reparse-symbol function_parameters) [26108 26112]))                          
                        :documentation "Error 303 -- also relocated (essentially identical to 302).")
                        (reparse-symbol indented_block_body) [26048 26270])
                    ("http_error_307" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26294 26298])
                            ("url" variable nil (reparse-symbol function_parameters) [26300 26303])
                            ("fp" variable nil (reparse-symbol function_parameters) [26305 26307])
                            ("errcode" variable nil (reparse-symbol function_parameters) [26309 26316])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [26318 26324])
                            ("headers" variable nil (reparse-symbol function_parameters) [26326 26333])
                            ("data" variable nil (reparse-symbol function_parameters) [26335 26339]))                          
                        :documentation "Error 307 -- relocated, but turn POST into error.")
                        (reparse-symbol indented_block_body) [26275 26608])
                    ("http_error_401" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26632 26636])
                            ("url" variable nil (reparse-symbol function_parameters) [26638 26641])
                            ("fp" variable nil (reparse-symbol function_parameters) [26643 26645])
                            ("errcode" variable nil (reparse-symbol function_parameters) [26647 26654])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [26656 26662])
                            ("headers" variable nil (reparse-symbol function_parameters) [26664 26671])
                            ("data" variable nil (reparse-symbol function_parameters) [26673 26677]))                          
                        :documentation "Error 401 -- authentication required.
        This function supports Basic authentication only.")
                        (reparse-symbol indented_block_body) [26613 27640])
                    ("http_error_407" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27664 27668])
                            ("url" variable nil (reparse-symbol function_parameters) [27670 27673])
                            ("fp" variable nil (reparse-symbol function_parameters) [27675 27677])
                            ("errcode" variable nil (reparse-symbol function_parameters) [27679 27686])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [27688 27694])
                            ("headers" variable nil (reparse-symbol function_parameters) [27696 27703])
                            ("data" variable nil (reparse-symbol function_parameters) [27705 27709]))                          
                        :documentation "Error 407 -- proxy authentication required.
        This function supports Basic authentication only.")
                        (reparse-symbol indented_block_body) [27645 28688])
                    ("retry_proxy_http_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28725 28729])
                            ("url" variable nil (reparse-symbol function_parameters) [28731 28734])
                            ("realm" variable nil (reparse-symbol function_parameters) [28736 28741])
                            ("data" variable nil (reparse-symbol function_parameters) [28743 28747]))                          )
                        (reparse-symbol indented_block_body) [28693 29437])
                    ("retry_proxy_https_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29475 29479])
                            ("url" variable nil (reparse-symbol function_parameters) [29481 29484])
                            ("realm" variable nil (reparse-symbol function_parameters) [29486 29491])
                            ("data" variable nil (reparse-symbol function_parameters) [29493 29497]))                          )
                        (reparse-symbol indented_block_body) [29442 30191])
                    ("retry_http_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30222 30226])
                            ("url" variable nil (reparse-symbol function_parameters) [30228 30231])
                            ("realm" variable nil (reparse-symbol function_parameters) [30233 30238])
                            ("data" variable nil (reparse-symbol function_parameters) [30240 30244]))                          )
                        (reparse-symbol indented_block_body) [30196 30696])
                    ("retry_https_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30728 30732])
                            ("url" variable nil (reparse-symbol function_parameters) [30734 30737])
                            ("realm" variable nil (reparse-symbol function_parameters) [30739 30744])
                            ("data" variable nil (reparse-symbol function_parameters) [30746 30750]))                          )
                        (reparse-symbol indented_block_body) [30701 31203])
                    ("get_user_passwd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31228 31232])
                            ("host" variable nil (reparse-symbol function_parameters) [31234 31238])
                            ("realm" variable nil (reparse-symbol function_parameters) [31240 31245])
                            ("clear_cache" variable nil (reparse-symbol function_parameters) [31247 31258]))                          )
                        (reparse-symbol indented_block_body) [31208 31623])
                    ("prompt_user_passwd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31651 31655])
                            ("host" variable nil (reparse-symbol function_parameters) [31657 31661])
                            ("realm" variable nil (reparse-symbol function_parameters) [31663 31668]))                          
                        :documentation "Override this in a GUI environment!")
                        (reparse-symbol indented_block_body) [31628 32127]))                  
                :type "class")
                nil [23736 32127])
            ("_localhost" variable nil nil [32150 32167])
            ("localhost" function (:documentation "Return the IP address of the magic hostname 'localhost'.") nil [32168 32378])
            ("_thishost" variable nil nil [32379 32395])
            ("thishost" function (:documentation "Return the IP address of the current host.") nil [32396 32703])
            ("_ftperrors" variable nil nil [32704 32721])
            ("ftperrors" function (:documentation "Return the set of errors raised by the FTP class.") nil [32722 32931])
            ("_noheaders" variable nil nil [32932 32949])
            ("noheaders" function (:documentation "Return an empty mimetools.Message object.") nil [32950 33353])
            ("ftpwrapper" type
               (:documentation "Class used by open_ftp() for cache of open FTP connections."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [33618 33634])
                            ("self" variable nil (reparse-symbol indented_block_body) [33643 33663])
                            ("self" variable nil (reparse-symbol indented_block_body) [33672 33688])
                            ("self" variable nil (reparse-symbol indented_block_body) [33697 33713])
                            ("self" variable nil (reparse-symbol indented_block_body) [33722 33738])
                            ("self" variable nil (reparse-symbol indented_block_body) [33747 33769])
                            ("self" variable nil (reparse-symbol indented_block_body) [33778 33795])
                            ("self" variable nil (reparse-symbol indented_block_body) [33804 33831])
                            ("self" code nil (reparse-symbol indented_block_body) [33840 33851]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33480 33484])
                            ("user" variable nil (reparse-symbol function_parameters) [33486 33490])
                            ("passwd" variable nil (reparse-symbol function_parameters) [33492 33498])
                            ("host" variable nil (reparse-symbol function_parameters) [33500 33504])
                            ("port" variable nil (reparse-symbol function_parameters) [33506 33510])
                            ("dirs" variable nil (reparse-symbol function_parameters) [33512 33516])
                            ("timeout" variable nil (reparse-symbol function_parameters) [33535 33542])
                            ("persistent" variable nil (reparse-symbol function_parameters) [33592 33602]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33467 33852])
                    ("init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33866 33870]))                          )
                        (reparse-symbol indented_block_body) [33857 34125])
                    ("retrfile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34143 34147])
                            ("file" variable nil (reparse-symbol function_parameters) [34149 34153])
                            ("type" variable nil (reparse-symbol function_parameters) [34155 34159]))                          )
                        (reparse-symbol indented_block_body) [34130 35725])
                    ("endtransfer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35746 35750]))                          )
                        (reparse-symbol indented_block_body) [35730 35910])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35925 35929]))                          )
                        (reparse-symbol indented_block_body) [35915 36024])
                    ("file_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36044 36048]))                          )
                        (reparse-symbol indented_block_body) [36029 36189])
                    ("real_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36209 36213]))                          )
                        (reparse-symbol indented_block_body) [36194 36330]))                  
                :type "class")
                nil [33374 36330])
            ("addbase" type
               (:documentation "Base class for addinfo and addclosehook."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [36434 36446])
                            ("self" variable nil (reparse-symbol indented_block_body) [36455 36479])
                            ("self" variable nil (reparse-symbol indented_block_body) [36488 36520])
                            ("if" code nil (reparse-symbol indented_block_body) [36529 36598])
                            ("if" code nil (reparse-symbol indented_block_body) [36606 36731])
                            ("if" code nil (reparse-symbol indented_block_body) [36739 36899]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36415 36419])
                            ("fp" variable nil (reparse-symbol function_parameters) [36421 36423]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36402 36899])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36917 36921]))                          )
                        (reparse-symbol indented_block_body) [36904 37058])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37073 37077]))                          )
                        (reparse-symbol indented_block_body) [37063 37250]))                  
                :type "class")
                nil [36331 37250])
            ("addclosehook" type
               (:documentation "Class to add a close hook to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [37392 37418])
                            ("self" variable nil (reparse-symbol indented_block_body) [37427 37453])
                            ("self" variable nil (reparse-symbol indented_block_body) [37462 37486]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37351 37355])
                            ("fp" variable nil (reparse-symbol function_parameters) [37357 37359])
                            ("closehook" variable nil (reparse-symbol function_parameters) [37361 37370])
                            ("hookargs" variable nil (reparse-symbol function_parameters) [37372 37381]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37338 37487])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37502 37506]))                          )
                        (reparse-symbol indented_block_body) [37492 37674]))                  
                :type "class")
                nil [37251 37674])
            ("addinfo" type
               (:documentation "class to add an info() method to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [37802 37828])
                            ("self" variable nil (reparse-symbol indented_block_body) [37837 37859]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37774 37778])
                            ("fp" variable nil (reparse-symbol function_parameters) [37780 37782])
                            ("headers" variable nil (reparse-symbol function_parameters) [37784 37791]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37761 37860])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37874 37878]))                          )
                        (reparse-symbol indented_block_body) [37865 37909]))                  
                :type "class")
                nil [37675 37909])
            ("addinfourl" type
               (:documentation "class to add info() and geturl() methods to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [38067 38093])
                            ("self" variable nil (reparse-symbol indented_block_body) [38102 38124])
                            ("self" variable nil (reparse-symbol indented_block_body) [38133 38147])
                            ("self" variable nil (reparse-symbol indented_block_body) [38156 38172]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38023 38027])
                            ("fp" variable nil (reparse-symbol function_parameters) [38029 38031])
                            ("headers" variable nil (reparse-symbol function_parameters) [38033 38040])
                            ("url" variable nil (reparse-symbol function_parameters) [38042 38045])
                            ("code" variable nil (reparse-symbol function_parameters) [38047 38051]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38010 38173])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38187 38191]))                          )
                        (reparse-symbol indented_block_body) [38178 38222])
                    ("getcode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38239 38243]))                          )
                        (reparse-symbol indented_block_body) [38227 38271])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38287 38291]))                          )
                        (reparse-symbol indented_block_body) [38276 38318]))                  
                :type "class")
                nil [37910 38318])
            ("try" code nil nil [39057 39201])
            ("toBytes" function
               (:documentation "toBytes(u\"URL\") --> 'URL'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [39214 39217]))                  )
                nil [39202 39585])
            ("unwrap" function
               (:documentation "unwrap('<URL:type://host/path>') --> 'type://host/path'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [39597 39600]))                  )
                nil [39586 39830])
            ("_typeprog" variable nil nil [39831 39847])
            ("splittype" function
               (:documentation "splittype('type:opaquestring') --> 'type', 'opaquestring'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [39862 39865]))                  )
                nil [39848 40201])
            ("_hostprog" variable nil nil [40202 40218])
            ("splithost" function
               (:documentation "splithost('//host[:port]/path') --> 'host[:port]', '/path'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [40233 40236]))                  )
                nil [40219 40666])
            ("_userprog" variable nil nil [40667 40683])
            ("splituser" function
               (:documentation "splituser('user[:passwd]@host[:port]') --> 'user[:passwd]', 'host[:port]'."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [40698 40702]))                  )
                nil [40684 40997])
            ("_passwdprog" variable nil nil [40998 41016])
            ("splitpasswd" function
               (:documentation "splitpasswd('user:passwd') -> 'user', 'passwd'."
                :arguments 
                  ( ("user" variable nil (reparse-symbol function_parameters) [41033 41037]))                  )
                nil [41017 41321])
            ("_portprog" variable nil nil [41365 41381])
            ("splitport" function
               (:documentation "splitport('host:port') --> 'host', 'port'."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [41396 41400]))                  )
                nil [41382 41667])
            ("_nportprog" variable nil nil [41668 41685])
            ("splitnport" function
               (:documentation "Split host and port, returning numeric port.
    Return given default port if no ':' found; defaults to -1.
    Return numerical port if a valid number are found after ':'.
    Return None if ':' but not a valid number."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [41701 41705])
                    ("defport" variable nil (reparse-symbol function_parameters) [41707 41714]))                  )
                nil [41686 42355])
            ("_queryprog" variable nil nil [42356 42373])
            ("splitquery" function
               (:documentation "splitquery('/path?query') --> '/path', 'query'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [42389 42392]))                  )
                nil [42374 42666])
            ("_tagprog" variable nil nil [42667 42682])
            ("splittag" function
               (:documentation "splittag('/path#tag') --> '/path', 'tag'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [42696 42699]))                  )
                nil [42683 42958])
            ("splitattr" function
               (:documentation "splitattr('/path;attr1=value1;attr2=value2;...') ->
        '/path', ['attr1=value1', 'attr2=value2', ...]."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [42973 42976]))                  )
                nil [42959 43155])
            ("_valueprog" variable nil nil [43156 43173])
            ("splitvalue" function
               (:documentation "splitvalue('attr=value') --> 'attr', 'value'."
                :arguments 
                  ( ("attr" variable nil (reparse-symbol function_parameters) [43189 43193]))                  )
                nil [43174 43466])
            ("_hexdig" variable nil nil [43659 43693])
            ("_hextochr" variable nil nil [43694 43791])
            ("_asciire" variable nil nil [43792 43831])
            ("unquote" function
               (:documentation "unquote('abc%20def') -> 'abc def'."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [43845 43846]))                  )
                nil [43833 44538])
            ("unquote_plus" function
               (:documentation "unquote('%7e/abc+def') -> '~/abc def'"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [44556 44557]))                  )
                nil [44539 44658])
            ("always_safe" variable nil nil [44659 44781])
            ("_safe_map" variable nil nil [44782 44796])
            ("for" code nil nil [44797 44936])
            ("_safe_quoters" variable nil nil [44936 44954])
            ("quote" function
               (:documentation "quote('abc def') -> 'abc%20def'

    Each part of a URL, e.g. the path info, the query, etc., has a
    different set of reserved characters that must be quoted.

    RFC 2396 Uniform Resource Identifiers (URI): Generic Syntax lists
    the following reserved characters.

    reserved    = \";\" | \"/\" | \"?\" | \":\" | \"@\" | \"&\" | \"=\" | \"+\" |
                  \"$\" | \",\"

    Each of these characters is reserved in some component of a URL,
    but not necessarily in all of them.

    By default, the quote function is intended for quoting the path
    section of a URL.  Thus, it will not encode '/'.  This character
    is reserved, but in typical usage the quote function is being
    called on a path where the existing slash characters are used as
    reserved characters.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [44966 44967])
                    ("safe" variable nil (reparse-symbol function_parameters) [44969 44973]))                  )
                nil [44956 46296])
            ("quote_plus" function
               (:documentation "Quote the query fragment of a URL; replacing ' ' with '+'"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [46312 46313])
                    ("safe" variable nil (reparse-symbol function_parameters) [46315 46319]))                  )
                nil [46297 46504])
            ("urlencode" function
               (:documentation "Encode a sequence of two-element tuples or dictionary into a URL query string.

    If any values in the query arg are sequences and doseq is true, each
    sequence element is converted to a separate parameter.

    If the query arg is a sequence of two-element tuples, the order of the
    parameters in the output will match the order of parameters in the
    input.
    "
                :arguments 
                  ( ("query" variable nil (reparse-symbol function_parameters) [46519 46524])
                    ("doseq" variable nil (reparse-symbol function_parameters) [46526 46531]))                  )
                nil [46505 48932])
            ("getproxies_environment" function (:documentation "Return a dictionary of scheme -> proxy server URL mappings.

    Scan the environment for variables named <scheme>_proxy;
    this seems to be the standard convention.  If you need a
    different way, you can pass a proxies dictionary to the
    [Fancy]URLopener constructor.

    ") nil [48950 49463])
            ("proxy_bypass_environment" function
               (:documentation "Test if proxies should not be used for a particular host.

    Checks the environment for a variable named no_proxy, which should
    be a list of DNS suffixes separated by commas, or '*' for all hosts.
    "
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [49493 49497]))                  )
                nil [49464 50238])
            ("if" code nil nil [50240 57651])
            ("test1" function nil nil [57690 57980])
            ("reporthook" function (:arguments 
              ( ("blocknum" variable nil (reparse-symbol function_parameters) [57997 58005])
                ("blocksize" variable nil (reparse-symbol function_parameters) [58007 58016])
                ("totalsize" variable nil (reparse-symbol function_parameters) [58018 58027]))              ) nil [57982 58172]))          
      :file "urllib.py"
      :pointmax 58172
      :fsize 58171
      :lastmodtime '(21149 51618 189875 949000)
      :unmatched-syntax '((NAME 44860 . 44869) (IF 44877 . 44879) (ELSE 44911 . 44915)))
    (semanticdb-table "sre_compile.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [225 262])
            ("sys" include nil nil [264 280])
            ("_sre" include nil nil [264 280])
            ("sre_parse" include nil nil [281 297])
            ("sre_constants" include nil nil [298 325])
            ("assert" code nil nil [327 376])
            ("if" code nil nil [378 453])
            ("_identityfunction" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [476 477]))              ) nil [454 493])
            ("_LITERAL_CODES" variable nil nil [494 538])
            ("_REPEATING_CODES" variable nil nil [539 595])
            ("_SUCCESS_CODES" variable nil nil [596 636])
            ("_ASSERT_CODES" variable nil nil [637 678])
            ("_compile" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [693 697])
                ("pattern" variable nil (reparse-symbol function_parameters) [699 706])
                ("flags" variable nil (reparse-symbol function_parameters) [708 713]))              ) nil [680 6012])
            ("_compile_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [6034 6041])
                ("flags" variable nil (reparse-symbol function_parameters) [6043 6048])
                ("code" variable nil (reparse-symbol function_parameters) [6050 6054])
                ("fixup" variable nil (reparse-symbol function_parameters) [6056 6061]))              ) nil [6013 6919])
            ("_optimize_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [6942 6949])
                ("fixup" variable nil (reparse-symbol function_parameters) [6951 6956]))              ) nil [6920 8337])
            ("_mk_bitmap" function (:arguments 
              ( ("bits" variable nil (reparse-symbol function_parameters) [8353 8357]))              ) nil [8338 8669])
            ("_optimize_unicode" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [10012 10019])
                ("fixup" variable nil (reparse-symbol function_parameters) [10021 10026]))              ) nil [9990 11581])
            ("_simple" function (:arguments 
              ( ("av" variable nil (reparse-symbol function_parameters) [11594 11596]))              ) nil [11582 11725])
            ("_compile_info" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [11744 11748])
                ("pattern" variable nil (reparse-symbol function_parameters) [11750 11757])
                ("flags" variable nil (reparse-symbol function_parameters) [11759 11764]))              ) nil [11726 15124])
            ("try" code nil nil [15125 15246])
            ("isstring" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [15260 15263]))              ) nil [15247 15360])
            ("_code" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [15371 15372])
                ("flags" variable nil (reparse-symbol function_parameters) [15374 15379]))              ) nil [15361 15606])
            ("compile" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [15619 15620])
                ("flags" variable nil (reparse-symbol function_parameters) [15622 15627]))              ) nil [15607 16351]))          
      :file "sre_compile.py"
      :pointmax 16351
      :fsize 16350
      :lastmodtime '(21149 51618 131875 680000)
      :unmatched-syntax nil)
    (semanticdb-table "sre_parse.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [240 277])
            ("sys" include nil nil [345 355])
            ("sre_constants" include nil nil [357 384])
            ("SPECIAL_CHARS" variable nil nil [386 417])
            ("REPEAT_CHARS" variable nil nil [418 439])
            ("DIGITS" variable nil nil [441 467])
            ("OCTDIGITS" variable nil nil [469 496])
            ("HEXDIGITS" variable nil nil [497 538])
            ("WHITESPACE" variable nil nil [540 571])
            ("ESCAPES" variable nil nil [573 849])
            ("CATEGORIES" variable nil nil [851 1327])
            ("FLAGS" variable nil nil [1329 1571])
            ("Pattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1683 1697])
                            ("self" variable nil (reparse-symbol indented_block_body) [1706 1720])
                            ("self" variable nil (reparse-symbol indented_block_body) [1729 1744])
                            ("self" variable nil (reparse-symbol indented_block_body) [1753 1772]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1668 1672]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1655 1773])
                    ("opengroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1791 1795])
                            ("name" variable nil (reparse-symbol function_parameters) [1797 1801]))                          )
                        (reparse-symbol indented_block_body) [1777 2214])
                    ("closegroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2233 2237])
                            ("gid" variable nil (reparse-symbol function_parameters) [2239 2242]))                          )
                        (reparse-symbol indented_block_body) [2218 2275])
                    ("checkgroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2294 2298])
                            ("gid" variable nil (reparse-symbol function_parameters) [2300 2303]))                          )
                        (reparse-symbol indented_block_body) [2279 2364]))                  
                :type "class")
                nil [1573 2364])
            ("SubPattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2476 2498])
                            ("if" code nil (reparse-symbol indented_block_body) [2507 2546])
                            ("self" variable nil (reparse-symbol indented_block_body) [2554 2570])
                            ("self" variable nil (reparse-symbol indented_block_body) [2579 2596]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2441 2445])
                            ("pattern" variable nil (reparse-symbol function_parameters) [2447 2454])
                            ("data" variable nil (reparse-symbol function_parameters) [2456 2460]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2428 2597])
                    ("dump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2610 2614])
                            ("level" variable nil (reparse-symbol function_parameters) [2616 2621]))                          )
                        (reparse-symbol indented_block_body) [2601 3557])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3574 3578]))                          )
                        (reparse-symbol indented_block_body) [3561 3612])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3628 3632]))                          )
                        (reparse-symbol indented_block_body) [3616 3665])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3685 3689])
                            ("index" variable nil (reparse-symbol function_parameters) [3691 3696]))                          )
                        (reparse-symbol indented_block_body) [3669 3728])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3748 3752])
                            ("index" variable nil (reparse-symbol function_parameters) [3754 3759]))                          )
                        (reparse-symbol indented_block_body) [3732 3893])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3913 3917])
                            ("index" variable nil (reparse-symbol function_parameters) [3919 3924])
                            ("code" variable nil (reparse-symbol function_parameters) [3926 3930]))                          )
                        (reparse-symbol indented_block_body) [3897 3965])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3980 3984])
                            ("index" variable nil (reparse-symbol function_parameters) [3986 3991])
                            ("code" variable nil (reparse-symbol function_parameters) [3993 3997]))                          )
                        (reparse-symbol indented_block_body) [3969 4038])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4053 4057])
                            ("code" variable nil (reparse-symbol function_parameters) [4059 4063]))                          )
                        (reparse-symbol indented_block_body) [4042 4097])
                    ("getwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4114 4118]))                          )
                        (reparse-symbol indented_block_body) [4101 5322]))                  
                :type "class")
                nil [2365 5322])
            ("Tokenizer" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5380 5400])
                            ("self" variable nil (reparse-symbol indented_block_body) [5409 5423])
                            ("self" code nil (reparse-symbol indented_block_body) [5432 5445]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5357 5361])
                            ("string" variable nil (reparse-symbol function_parameters) [5363 5369]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5344 5446])
                    ("raise" code nil (reparse-symbol indented_block_body) [7715 7761]))                  
                :type "class")
                nil [5323 7762])
            ("_escape" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [7775 7781])
                ("escape" variable nil (reparse-symbol function_parameters) [7783 7789])
                ("state" variable nil (reparse-symbol function_parameters) [7791 7796]))              ) nil [7763 9455])
            ("_parse_sub" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [9471 9477])
                ("state" variable nil (reparse-symbol function_parameters) [9479 9484])
                ("nested" variable nil (reparse-symbol function_parameters) [9486 9492]))              ) nil [9456 11081])
            ("_parse_sub_cond" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [11102 11108])
                ("state" variable nil (reparse-symbol function_parameters) [11110 11115])
                ("condgroup" variable nil (reparse-symbol function_parameters) [11117 11126]))              ) nil [11082 11600])
            ("_PATTERNENDERS" variable nil nil [11601 11627])
            ("_ASSERTCHARS" variable nil nil [11628 11653])
            ("_LOOKBEHINDASSERTCHARS" variable nil nil [11654 11688])
            ("_REPEATCODES" variable nil nil [11689 11733])
            ("_parse" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [11746 11752])
                ("state" variable nil (reparse-symbol function_parameters) [11754 11759]))              ) nil [11735 27055])
            ("expand_template" function (:arguments 
              ( ("template" variable nil (reparse-symbol function_parameters) [27076 27084])
                ("match" variable nil (reparse-symbol function_parameters) [27086 27091]))              ) nil [27056 27461]))          
      :file "sre_parse.py"
      :pointmax 27461
      :fsize 27460
      :lastmodtime '(21149 51618 142875 731000)
      :unmatched-syntax '((ASSIGN 26768 . 26769) (INDENT_BLOCK 7698 . 7711) (NEWLINE 7697 . 7698) (COLON 7696 . 7697)))
    (semanticdb-table "io.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"The io module provides the Python interfaces to stream handling. The
builtin open function is defined in this module.

At the top of the I/O hierarchy is the abstract base class IOBase. It
defines the basic interface to a stream. Note, however, that there is no
separation between reading and writing to streams; implementations are
allowed to raise an IOError if they do not support a given operation.

Extending IOBase is RawIOBase which deals simply with the reading and
writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide
an interface to OS files.

BufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its
subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer
streams that are readable, writable, and both respectively.
BufferedRandom provides a buffered interface to random access
streams. BytesIO is a simple stream of in-memory bytes.

Another IOBase subclass, TextIOBase, deals with the encoding and decoding
of streams into text. TextIOWrapper, which extends it, is a buffered text
interface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO
is a in-memory stream for text.

Argument names are not part of the specification, and only the arguments
of open() are intended to be used as keyword arguments.

data:

DEFAULT_BUFFER_SIZE

   An int containing the default buffer size used by the module's buffered
   I/O classes. open() uses the file's blksize (as obtained by os.stat) if
   possible.
\"\"\"" code nil nil [1 1479])
            ("__author__" variable nil nil [1523 1860])
            ("__all__" variable nil nil [1862 2180])
            ("_io" include nil nil [2183 2193])
            ("abc" include nil nil [2194 2204])
            ("" code nil nil [2222 2472])
            ("OpenWrapper" variable nil nil [2474 2496])
            ("SEEK_SET" variable nil nil [2542 2554])
            ("SEEK_CUR" variable nil nil [2555 2567])
            ("SEEK_END" variable nil nil [2568 2580])
            ("IOBase" type
               (:superclasses ("_io._IOBase")
                :members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2757 2784]))                  
                :type "class")
                nil [2726 2785])
            ("RawIOBase" type
               (:superclasses ("_io._RawIOBase" "IOBase")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [2831 2835]))                  
                :type "class")
                nil [2786 2836])
            ("BufferedIOBase" type
               (:superclasses ("_io._BufferedIOBase" "IOBase")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [2892 2896]))                  
                :type "class")
                nil [2837 2897])
            ("TextIOBase" type
               (:superclasses ("_io._TextIOBase" "IOBase")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [2945 2949]))                  
                :type "class")
                nil [2898 2950])
            ("RawIOBase" code nil nil [2951 2977])
            ("for" code nil nil [2979 3116])
            ("for" code nil nil [3117 3188])
            ("del" code nil nil [3188 3197]))          
      :file "io.py"
      :pointmax 3198
      :fsize 3197
      :lastmodtime '(21149 51617 995875 49000)
      :unmatched-syntax nil)
    (semanticdb-table "copy_reg.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Helper to provide extensibility for pickle/cPickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.
\"\"\"" code nil nil [1 179])
            ("types" include nil nil [181 222])
            ("__all__" variable nil nil [224 332])
            ("dispatch_table" variable nil nil [334 353])
            ("pickle" function (:arguments 
              ( ("ob_type" variable nil (reparse-symbol function_parameters) [366 373])
                ("pickle_function" variable nil (reparse-symbol function_parameters) [375 390])
                ("constructor_ob" variable nil (reparse-symbol function_parameters) [392 406]))              ) nil [355 886])
            ("constructor" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [903 909]))              ) nil [887 1009])
            ("try" code nil nil [1068 1233])
            ("_reconstructor" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [1295 1298])
                ("base" variable nil (reparse-symbol function_parameters) [1300 1304])
                ("state" variable nil (reparse-symbol function_parameters) [1306 1311]))              ) nil [1276 1518])
            ("_HEAPTYPE" code nil nil [1519 1535])
            ("_reduce_ex" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [1614 1618])
                    ("proto" variable nil (reparse-symbol function_parameters) [1620 1625]))                  )
                nil [1599 2561])
            ("__newobj__" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [2616 2619])
                ("args" variable nil (reparse-symbol function_parameters) [2621 2626]))              ) nil [2601 2664])
            ("_slotnames" function
               (:documentation "Return a list of slot names for a given class.

    This needs to find slots defined by the class and its bases, so we
    can't simply return the __slots__ attribute.  We must walk down
    the Method Resolution Order and concatenate the __slots__ of each
    class found there.  (This assumes classes don't modify their
    __slots__ attribute to misrepresent their slots after the class is
    defined.)
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2680 2683]))                  )
                nil [2665 4346])
            ("_extension_registry" variable nil nil [4828 4852])
            ("_inverted_registry" variable nil nil [4882 4905])
            ("_extension_cache" variable nil nil [4936 4957])
            ("add_extension" function
               (:documentation "Register an extension code."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5132 5138])
                    ("name" variable nil (reparse-symbol function_parameters) [5140 5144])
                    ("code" variable nil (reparse-symbol function_parameters) [5146 5150]))                  )
                nil [5114 5861])
            ("remove_extension" function
               (:documentation "Unregister an extension code.  For testing only."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5883 5889])
                    ("name" variable nil (reparse-symbol function_parameters) [5891 5895])
                    ("code" variable nil (reparse-symbol function_parameters) [5897 5901]))                  )
                nil [5862 6321])
            ("clear_extension_cache" function nil nil [6322 6380]))          
      :file "copy_reg.py"
      :pointmax 6801
      :fsize 6800
      :lastmodtime '(21149 51617 909874 650000)
      :unmatched-syntax nil)
    (semanticdb-table "types.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Define names for all type symbols known in the standard interpreter.

Types that are part of optional modules (e.g. array) are not listed.
\"\"\"" code nil nil [1 146])
            ("sys" include nil nil [147 157])
            ("NoneType" variable nil nil [408 429])
            ("TypeType" variable nil nil [430 445])
            ("ObjectType" variable nil nil [446 465])
            ("IntType" variable nil nil [467 480])
            ("LongType" variable nil nil [481 496])
            ("FloatType" variable nil nil [497 514])
            ("BooleanType" variable nil nil [515 533])
            ("try" code nil nil [534 592])
            ("StringType" variable nil nil [593 609])
            ("try" code nil nil [801 926])
            ("BufferType" variable nil nil [927 946])
            ("TupleType" variable nil nil [948 965])
            ("ListType" variable nil nil [966 981])
            ("DictType" variable nil nil [982 1014])
            ("_f" function nil nil [1016 1031])
            ("FunctionType" variable nil nil [1031 1054])
            ("LambdaType" variable nil nil [1055 1086])
            ("CodeType" variable nil nil [1118 1147])
            ("_g" function nil nil [1149 1171])
            ("GeneratorType" variable nil nil [1171 1197])
            ("_C" type
               (:members 
                  ( ("_m" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1220 1224]))                          )
                        (reparse-symbol indented_block_body) [1213 1232]))                  
                :type "class")
                nil [1199 1232])
            ("ClassType" variable nil nil [1232 1252])
            ("UnboundMethodType" variable nil nil [1253 1284])
            ("_x" variable nil nil [1314 1323])
            ("InstanceType" variable nil nil [1324 1347])
            ("MethodType" variable nil nil [1348 1372])
            ("BuiltinFunctionType" variable nil nil [1374 1405])
            ("BuiltinMethodType" variable nil nil [1406 1441])
            ("ModuleType" variable nil nil [1477 1499])
            ("FileType" variable nil nil [1500 1515])
            ("XRangeType" variable nil nil [1516 1535])
            ("try" code nil nil [1537 1681])
            ("SliceType" variable nil nil [1682 1699])
            ("EllipsisType" variable nil nil [1700 1729])
            ("DictProxyType" variable nil nil [1731 1770])
            ("NotImplementedType" variable nil nil [1771 1812])
            ("GetSetDescriptorType" variable nil nil [1866 1917])
            ("MemberDescriptorType" variable nil nil [1918 1972])
            ("del" code nil nil [1974 1997]))          
      :file "types.py"
      :pointmax 2041
      :fsize 2040
      :lastmodtime '(21149 51618 186875 935000)
      :unmatched-syntax nil)
    (semanticdb-table "textwrap.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Text wrapping and filling.
\"\"\"" code nil nil [1 34])
            ("__revision__" variable nil nil [177 198])
            ("re" include nil nil [200 217])
            ("string" include nil nil [200 217])
            ("try" code nil nil [219 405])
            ("__all__" variable nil nil [693 744])
            ("_whitespace" variable nil nil [1249 1280])
            ("TextWrapper" type
               (:documentation "
    Object for wrapping/filling text.  The public interface consists of
    the wrap() and fill() methods; the other methods are just there for
    subclasses to override in order to tweak the default behaviour.
    If you want to completely replace the main wrapping algorithm,
    you'll probably have to override _wrap_chunks().

    Several instance attributes control various aspects of wrapping:
      width (default: 70)
        the maximum width of wrapped lines (unless break_long_words
        is false)
      initial_indent (default: \"\")
        string that will be prepended to the first line of wrapped
        output.  Counts towards the line's width.
      subsequent_indent (default: \"\")
        string that will be prepended to all lines save the first
        of wrapped output; also counts towards each line's width.
      expand_tabs (default: true)
        Expand tabs in input text to spaces before further processing.
        Each tab will become 1 .. 8 spaces, depending on its position in
        its line.  If false, each tab is treated as a single character.
      replace_whitespace (default: true)
        Replace all whitespace characters in the input text by spaces
        after tab expansion.  Note that if expand_tabs is false and
        replace_whitespace is true, every tab will be converted to a
        single space!
      fix_sentence_endings (default: false)
        Ensure that sentence-ending punctuation is always followed
        by two spaces.  Off by default because the algorithm is
        (unavoidably) imperfect.
      break_long_words (default: true)
        Break words longer than 'width'.  If false, those words will not
        be broken, and some lines might be longer than 'width'.
      break_on_hyphens (default: true)
        Allow breaking hyphenated words. If true, wrapping will occur
        preferably on whitespaces and right after hyphens part of
        compound words.
      drop_whitespace (default: true)
        Drop leading and trailing whitespace from lines.
    "
                :members 
                  ( ("whitespace_trans" variable nil (reparse-symbol indented_block_body) [3356 3428])
                    ("unicode_whitespace_trans" variable nil (reparse-symbol indented_block_body) [3434 3463])
                    ("uspace" variable nil (reparse-symbol indented_block_body) [3468 3486])
                    ("for" code nil (reparse-symbol indented_block_body) [3491 3568])
                    ("wordsep_re" variable nil (reparse-symbol indented_block_body) [3877 4085])
                    ("wordsep_simple_re" variable nil (reparse-symbol indented_block_body) [4327 4367])
                    ("sentence_end_re" variable nil (reparse-symbol indented_block_body) [4492 4839])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5217 5235])
                            ("self" variable nil (reparse-symbol indented_block_body) [5244 5280])
                            ("self" variable nil (reparse-symbol indented_block_body) [5289 5331])
                            ("self" variable nil (reparse-symbol indented_block_body) [5340 5370])
                            ("self" variable nil (reparse-symbol indented_block_body) [5379 5423])
                            ("self" variable nil (reparse-symbol indented_block_body) [5432 5480])
                            ("self" variable nil (reparse-symbol indented_block_body) [5489 5529])
                            ("self" variable nil (reparse-symbol indented_block_body) [5538 5576])
                            ("self" variable nil (reparse-symbol indented_block_body) [5585 5625])
                            ("self" variable nil (reparse-symbol indented_block_body) [5847 5910])
                            ("self" variable nil (reparse-symbol indented_block_body) [5919 6009]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4859 4863])
                            ("width" variable nil (reparse-symbol function_parameters) [4882 4887])
                            ("initial_indent" variable nil (reparse-symbol function_parameters) [4909 4923])
                            ("subsequent_indent" variable nil (reparse-symbol function_parameters) [4945 4962])
                            ("expand_tabs" variable nil (reparse-symbol function_parameters) [4984 4995])
                            ("replace_whitespace" variable nil (reparse-symbol function_parameters) [5019 5037])
                            ("fix_sentence_endings" variable nil (reparse-symbol function_parameters) [5061 5081])
                            ("break_long_words" variable nil (reparse-symbol function_parameters) [5106 5122])
                            ("drop_whitespace" variable nil (reparse-symbol function_parameters) [5146 5161])
                            ("break_on_hyphens" variable nil (reparse-symbol function_parameters) [5185 5201]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4846 6010])
                    ("_munge_whitespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6163 6167])
                            ("text" variable nil (reparse-symbol function_parameters) [6169 6173]))                          
                        :documentation "_munge_whitespace(text : string) -> string

        Munge whitespace in text: expand tabs and convert all other
        whitespace characters to spaces.  Eg. \" foo\\tbar\\n\\nbaz\"
        becomes \" foo    bar  baz\".
        ")
                        (reparse-symbol indented_block_body) [6141 6747])
                    ("_split" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6764 6768])
                            ("text" variable nil (reparse-symbol function_parameters) [6770 6774]))                          
                        :documentation "_split(text : string) -> [string]

        Split the text to wrap into indivisible chunks.  Chunks are
        not quite the same as words; see _wrap_chunks() for full
        details.  As an example, the text
          Look, goof-ball -- use the -b option!
        breaks into the following chunks:
          'Look,', ' ', 'goof-', 'ball', ' ', '--', ' ',
          'use', ' ', 'the', ' ', '-b', ' ', 'option!'
        if break_on_hyphens is True, or in:
          'Look,', ' ', 'goof-ball', ' ', '--', ' ',
          'use', ' ', 'the', ' ', '-b', ' ', option!'
        otherwise.
        ")
                        (reparse-symbol indented_block_body) [6753 7837])
                    ("_fix_sentence_endings" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7868 7872])
                            ("chunks" variable nil (reparse-symbol function_parameters) [7874 7880]))                          
                        :documentation "_fix_sentence_endings(chunks : [string])

        Correct for sentence endings buried in 'chunks'.  Eg. when the
        original text contains \"... foo.\\nBar ...\", munge_whitespace()
        and split() will convert that to [..., \"foo.\", \" \", \"Bar\", ...]
        which has one too few spaces; this method simply changes the one
        space to two.
        ")
                        (reparse-symbol indented_block_body) [7842 8511])
                    ("_handle_long_word" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8538 8542])
                            ("reversed_chunks" variable nil (reparse-symbol function_parameters) [8544 8559])
                            ("cur_line" variable nil (reparse-symbol function_parameters) [8561 8569])
                            ("cur_len" variable nil (reparse-symbol function_parameters) [8571 8578])
                            ("width" variable nil (reparse-symbol function_parameters) [8580 8585]))                          
                        :documentation "_handle_long_word(chunks : [string],
                             cur_line : [string],
                             cur_len : int, width : int)

        Handle a chunk of text (most likely a word, not whitespace) that
        is too long to fit in any line.
        ")
                        (reparse-symbol indented_block_body) [8516 9706])
                    ("_wrap_chunks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10074 10078])
                            ("chunks" variable nil (reparse-symbol function_parameters) [10080 10086]))                          
                        :documentation "_wrap_chunks(chunks : [string]) -> [string]

        Wrap a sequence of text chunks and return a list of lines of
        length 'self.width' or less.  (If 'break_long_words' is false,
        some lines may be longer than this.)  Chunks correspond roughly
        to words and the whitespace between them: each chunk is
        indivisible (modulo 'break_long_words'), but a line break can
        come between any two chunks.  Chunks should not have internal
        whitespace; ie. a chunk is either all whitespace or a \"word\".
        Whitespace chunks will be removed from the beginning and end of
        lines, but apart from that whitespace is preserved.
        ")
                        (reparse-symbol indented_block_body) [10057 12809])
                    ("wrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12898 12902])
                            ("text" variable nil (reparse-symbol function_parameters) [12904 12908]))                          
                        :documentation "wrap(text : string) -> [string]

        Reformat the single paragraph in 'text' so it fits in lines of
        no more than 'self.width' columns, and return a list of wrapped
        lines.  Tabs in 'text' are expanded with string.expandtabs(),
        and all other whitespace characters (including newline) are
        converted to space.
        ")
                        (reparse-symbol indented_block_body) [12889 13481])
                    ("fill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13495 13499])
                            ("text" variable nil (reparse-symbol function_parameters) [13501 13505]))                          
                        :documentation "fill(text : string) -> string

        Reformat the single paragraph in 'text' to fit in lines of no
        more than 'self.width' columns, and return a new string
        containing the entire wrapped paragraph.
        ")
                        (reparse-symbol indented_block_body) [13486 13787]))                  
                :type "class")
                nil [1282 13787])
            ("wrap" function
               (:documentation "Wrap a single paragraph of text, returning a list of wrapped lines.

    Reformat the single paragraph in 'text' so it fits in lines of no
    more than 'width' columns, and return a list of wrapped lines.  By
    default, tabs in 'text' are expanded with string.expandtabs(), and
    all other whitespace characters (including newline) are converted to
    space.  See TextWrapper class for available keyword args to customize
    wrapping behaviour.
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [13872 13876])
                    ("width" variable nil (reparse-symbol function_parameters) [13878 13883])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [13888 13896]))                  )
                nil [13863 14433])
            ("fill" function
               (:documentation "Fill a single paragraph of text, returning a new string.

    Reformat the single paragraph in 'text' to fit in lines of no more
    than 'width' columns, and return a new string containing the entire
    wrapped paragraph.  As with wrap(), tabs are expanded and other
    whitespace characters converted to space.  See TextWrapper class for
    available keyword args to customize wrapping behaviour.
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [14443 14447])
                    ("width" variable nil (reparse-symbol function_parameters) [14449 14454])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [14459 14467]))                  )
                nil [14434 14954])
            ("_whitespace_only_re" variable nil nil [15030 15088])
            ("_leading_whitespace_re" variable nil nil [15089 15163])
            ("dedent" function
               (:documentation "Remove any common leading whitespace from every line in `text`.

    This can be used to make triple-quoted strings line up with the left
    edge of the display, while still presenting them in the source code
    in indented form.

    Note that tabs and spaces are both treated as whitespace, but they
    are not equal: the lines \"  hello\" and \"\\thello\" are
    considered to have no common leading whitespace.  (This behaviour is
    new in Python 2.5; older versions of this module incorrectly
    expanded tabs before searching for common leading whitespace.)
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [15176 15180]))                  )
                nil [15165 16865])
            ("if" code nil nil [16866 17038]))          
      :file "textwrap.py"
      :pointmax 17038
      :fsize 17037
      :lastmodtime '(21149 51618 171875 865000)
      :unmatched-syntax nil)
    (semanticdb-table "traceback.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Extract, format and print information about Python stack traces.\"\"\"" code nil nil [1 71])
            ("linecache" include nil nil [73 89])
            ("sys" include nil nil [90 100])
            ("types" include nil nil [101 113])
            ("__all__" variable nil nil [115 378])
            ("_print" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [391 395])
                ("str" variable nil (reparse-symbol function_parameters) [397 400])
                ("terminator" variable nil (reparse-symbol function_parameters) [405 415]))              ) nil [380 454])
            ("print_list" function
               (:documentation "Print the list of tuples as returned by extract_tb() or
    extract_stack() as a formatted stack trace to the given file."
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [471 485])
                    ("file" variable nil (reparse-symbol function_parameters) [487 491]))                  )
                nil [456 893])
            ("format_list" function
               (:documentation "Format a list of traceback entry tuples for printing.

    Given a list of tuples as returned by extract_tb() or
    extract_stack(), return a list of strings ready for printing.
    Each string in the resulting list corresponds to the item with the
    same index in the argument list.  Each string ends in a newline;
    the strings may contain internal newlines as well, for those items
    whose source text line is not None.
    "
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [910 924]))                  )
                nil [894 1625])
            ("print_tb" function
               (:documentation "Print up to 'limit' stack trace entries from the traceback 'tb'.

    If 'limit' is omitted or None, all entries are printed.  If 'file'
    is omitted or None, the output goes to sys.stderr; otherwise
    'file' should be an open file or file-like object with a write()
    method.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [1640 1642])
                    ("limit" variable nil (reparse-symbol function_parameters) [1644 1649])
                    ("file" variable nil (reparse-symbol function_parameters) [1656 1660]))                  )
                nil [1627 2612])
            ("format_tb" function
               (:documentation "A shorthand for 'format_list(extract_tb(tb, limit))'."
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2627 2629])
                    ("limit" variable nil (reparse-symbol function_parameters) [2631 2636]))                  )
                nil [2613 2756])
            ("extract_tb" function
               (:documentation "Return list of up to limit pre-processed entries from traceback.

    This is useful for alternate formatting of stack traces.  If
    'limit' is omitted or None, all entries are extracted.  A
    pre-processed stack trace entry is a quadruple (filename, line
    number, function name, text) representing the information that is
    usually printed for a stack trace.  The text is a string with
    leading and trailing whitespace stripped; if the source is not
    available it is None.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2772 2774])
                    ("limit" variable nil (reparse-symbol function_parameters) [2776 2781]))                  )
                nil [2757 3892])
            ("print_exception" function
               (:documentation "Print exception up to 'limit' stack trace entries from 'tb' to 'file'.

    This differs from print_tb() in the following ways: (1) if
    traceback is not None, it prints a header \"Traceback (most recent
    call last):\"; (2) it prints the exception type and value after the
    stack trace; (3) if type is SyntaxError and value has the
    appropriate format, it prints the line where the syntax error
    occurred with a caret on the next line indicating the approximate
    position of the error.
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [3914 3919])
                    ("value" variable nil (reparse-symbol function_parameters) [3921 3926])
                    ("tb" variable nil (reparse-symbol function_parameters) [3928 3930])
                    ("limit" variable nil (reparse-symbol function_parameters) [3932 3937])
                    ("file" variable nil (reparse-symbol function_parameters) [3944 3948]))                  )
                nil [3894 4725])
            ("format_exception" function
               (:documentation "Format a stack trace and the exception information.

    The arguments have the same meaning as the corresponding arguments
    to print_exception().  The return value is a list of strings, each
    ending in a newline and some containing internal newlines.  When
    these lines are concatenated and printed, exactly the same text is
    printed as does print_exception().
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [4747 4752])
                    ("value" variable nil (reparse-symbol function_parameters) [4754 4759])
                    ("tb" variable nil (reparse-symbol function_parameters) [4761 4763])
                    ("limit" variable nil (reparse-symbol function_parameters) [4765 4770]))                  )
                nil [4726 5377])
            ("format_exception_only" function
               (:documentation "Format the exception part of a traceback.

    The arguments are the exception type and value such as given by
    sys.last_type and sys.last_value. The return value is a list of
    strings, each ending in a newline.

    Normally, the list contains a single string; however, for
    SyntaxError exceptions, it contains several lines that (when
    printed) display detailed information about where the syntax
    error occurred.

    The message indicating which exception occurred is always the last
    string in the list.

    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [5404 5409])
                    ("value" variable nil (reparse-symbol function_parameters) [5411 5416]))                  )
                nil [5378 7488])
            ("_format_final_exc_line" function
               (:documentation "Return a list of a single line -- normal case for format_exception_only"
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [7516 7521])
                    ("value" variable nil (reparse-symbol function_parameters) [7523 7528]))                  )
                nil [7489 7785])
            ("_some_str" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [7800 7805]))              ) nil [7786 8070])
            ("print_exc" function
               (:documentation "Shorthand for 'print_exception(sys.exc_type, sys.exc_value, sys.exc_traceback, limit, file)'.
    (In fact, it uses sys.exc_info() to retrieve the same information
    in a thread-safe way.)"
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8086 8091])
                    ("file" variable nil (reparse-symbol function_parameters) [8098 8102]))                  )
                nil [8072 8511])
            ("format_exc" function
               (:documentation "Like print_exc() but return a string."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8528 8533]))                  )
                nil [8513 8753])
            ("print_last" function
               (:documentation "This is a shorthand for 'print_exception(sys.last_type,
    sys.last_value, sys.last_traceback, limit, file)'."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8770 8775])
                    ("file" variable nil (reparse-symbol function_parameters) [8782 8786]))                  )
                nil [8755 9150])
            ("print_stack" function
               (:documentation "Print a stack trace from its invocation point.

    The optional 'f' argument can be used to specify an alternate
    stack frame at which to start. The optional 'limit' and 'file'
    arguments have the same meaning as for print_exception().
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9168 9169])
                    ("limit" variable nil (reparse-symbol function_parameters) [9176 9181])
                    ("file" variable nil (reparse-symbol function_parameters) [9188 9192]))                  )
                nil [9152 9655])
            ("format_stack" function
               (:documentation "Shorthand for 'format_list(extract_stack(f, limit))'."
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9673 9674])
                    ("limit" variable nil (reparse-symbol function_parameters) [9681 9686]))                  )
                nil [9656 9957])
            ("extract_stack" function
               (:documentation "Extract the raw traceback from the current stack frame.

    The return value has the same format as for extract_tb().  The
    optional 'f' and 'limit' arguments have the same meaning as for
    print_stack().  Each item in the list is a quadruple (filename,
    line number, function name, text), and the entries are in order
    from oldest to newest stack frame.
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9976 9977])
                    ("limit" variable nil (reparse-symbol function_parameters) [9984 9989]))                  )
                nil [9958 11118])
            ("tb_lineno" function
               (:documentation "Calculate correct line number of traceback given in tb.

    Obsolete in 2.3.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [11133 11135]))                  )
                nil [11119 11255]))          
      :file "traceback.py"
      :pointmax 11255
      :fsize 11254
      :lastmodtime '(21149 51618 182875 917000)
      :unmatched-syntax nil)
    (semanticdb-table "struct.py"
      :major-mode 'python-mode
      :tags 
        '( ("_struct" include nil nil [1 22])
            ("_struct" include nil nil [23 54])
            ("_struct" include nil nil [55 82]))          
      :file "struct.py"
      :pointmax 83
      :fsize 82
      :lastmodtime '(21149 51618 156875 796000)
      :unmatched-syntax nil)
    (semanticdb-table "stat.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Constants/functions for interpreting results of os.stat() and os.lstat().

Suggested usage: from stat import *
\"\"\"" code nil nil [1 118])
            ("ST_MODE" variable nil nil [190 202])
            ("ST_INO" variable nil nil [203 215])
            ("ST_DEV" variable nil nil [216 228])
            ("ST_NLINK" variable nil nil [229 241])
            ("ST_UID" variable nil nil [242 254])
            ("ST_GID" variable nil nil [255 267])
            ("ST_SIZE" variable nil nil [268 280])
            ("ST_ATIME" variable nil nil [281 293])
            ("ST_MTIME" variable nil nil [294 306])
            ("ST_CTIME" variable nil nil [307 319])
            ("S_IMODE" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [363 367]))              ) nil [351 394])
            ("S_IFMT" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [406 410]))              ) nil [395 439])
            ("S_IFDIR" variable nil nil [536 554])
            ("S_IFCHR" variable nil nil [555 573])
            ("S_IFBLK" variable nil nil [574 592])
            ("S_IFREG" variable nil nil [593 611])
            ("S_IFIFO" variable nil nil [612 630])
            ("S_IFLNK" variable nil nil [631 649])
            ("S_IFSOCK" variable nil nil [650 668])
            ("S_ISDIR" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [722 726]))              ) nil [710 764])
            ("S_ISCHR" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [777 781]))              ) nil [765 819])
            ("S_ISBLK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [832 836]))              ) nil [820 874])
            ("S_ISREG" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [887 891]))              ) nil [875 929])
            ("S_ISFIFO" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [943 947]))              ) nil [930 985])
            ("S_ISLNK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [998 1002]))              ) nil [986 1040])
            ("S_ISSOCK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [1054 1058]))              ) nil [1041 1097])
            ("S_ISUID" variable nil nil [1127 1142])
            ("S_ISGID" variable nil nil [1143 1158])
            ("S_ENFMT" variable nil nil [1159 1176])
            ("S_ISVTX" variable nil nil [1177 1192])
            ("S_IREAD" variable nil nil [1193 1208])
            ("S_IWRITE" variable nil nil [1209 1225])
            ("S_IEXEC" variable nil nil [1226 1241])
            ("S_IRWXU" variable nil nil [1242 1257])
            ("S_IRUSR" variable nil nil [1258 1273])
            ("S_IWUSR" variable nil nil [1274 1289])
            ("S_IXUSR" variable nil nil [1290 1305])
            ("S_IRWXG" variable nil nil [1306 1321])
            ("S_IRGRP" variable nil nil [1322 1337])
            ("S_IWGRP" variable nil nil [1338 1353])
            ("S_IXGRP" variable nil nil [1354 1369])
            ("S_IRWXO" variable nil nil [1370 1385])
            ("S_IROTH" variable nil nil [1386 1401])
            ("S_IWOTH" variable nil nil [1402 1417])
            ("S_IXOTH" variable nil nil [1418 1433])
            ("UF_NODUMP" variable nil nil [1459 1484])
            ("UF_IMMUTABLE" variable nil nil [1485 1510])
            ("UF_APPEND" variable nil nil [1511 1536])
            ("UF_OPAQUE" variable nil nil [1537 1562])
            ("UF_NOUNLINK" variable nil nil [1563 1588])
            ("UF_COMPRESSED" variable nil nil [1589 1615])
            ("UF_HIDDEN" variable nil nil [1648 1673])
            ("SF_ARCHIVED" variable nil nil [1713 1738])
            ("SF_IMMUTABLE" variable nil nil [1739 1764])
            ("SF_APPEND" variable nil nil [1765 1790])
            ("SF_NOUNLINK" variable nil nil [1791 1816])
            ("SF_SNAPSHOT" variable nil nil [1817 1842]))          
      :file "stat.py"
      :pointmax 1843
      :fsize 1842
      :lastmodtime '(21149 51618 147875 754000)
      :unmatched-syntax nil)
    (semanticdb-table "genericpath.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
Path operations common to more than one OS
Do not use directly.  The OS specific modules import the appropriate
functions from this module themselves.
\"\"\"" code nil nil [1 159])
            ("os" include nil nil [160 169])
            ("stat" include nil nil [170 181])
            ("__all__" variable nil nil [183 296])
            ("exists" function
               (:documentation "Test whether a path exists.  Returns False for broken symbolic links"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [405 409]))                  )
                nil [394 580])
            ("isfile" function
               (:documentation "Test whether a path is a regular file"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [718 722]))                  )
                nil [707 887])
            ("isdir" function
               (:documentation "Return true if the pathname refers to an existing directory."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1049 1050]))                  )
                nil [1039 1235])
            ("getsize" function
               (:documentation "Return the size of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1249 1257]))                  )
                nil [1237 1357])
            ("getmtime" function
               (:documentation "Return the last modification time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1372 1380]))                  )
                nil [1359 1499])
            ("getatime" function
               (:documentation "Return the last access time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1514 1522]))                  )
                nil [1501 1635])
            ("getctime" function
               (:documentation "Return the metadata change time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1650 1658]))                  )
                nil [1637 1775])
            ("commonprefix" function (:arguments 
              ( ("m" variable nil (reparse-symbol function_parameters) [1844 1845]))              ) nil [1827 2076])
            ("_splitext" function
               (:documentation "Split the extension from a pathname.

    Extension is everything from the last dot to the end, ignoring
    leading dots.  Returns \"(root, ext)\"; ext may be empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [2376 2377])
                    ("sep" variable nil (reparse-symbol function_parameters) [2379 2382])
                    ("altsep" variable nil (reparse-symbol function_parameters) [2384 2390])
                    ("extsep" variable nil (reparse-symbol function_parameters) [2392 2398]))                  )
                nil [2362 3015]))          
      :file "genericpath.py"
      :pointmax 3015
      :fsize 3014
      :lastmodtime '(21149 51617 962874 896000)
      :unmatched-syntax nil)
    (semanticdb-table "__future__.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Record of phased-in incompatible language changes.

Each line is of the form:

    FeatureName = \"_Feature(\" OptionalRelease \",\" MandatoryRelease \",\"
                              CompilerFlag \")\"

where, normally, OptionalRelease < MandatoryRelease, and both are 5-tuples
of the same form as sys.version_info:

    (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int
     PY_MINOR_VERSION, # the 1; an int
     PY_MICRO_VERSION, # the 0; an int
     PY_RELEASE_LEVEL, # \"alpha\", \"beta\", \"candidate\" or \"final\"; string
     PY_RELEASE_SERIAL # the 3; an int
    )

OptionalRelease records the first release in which

    from __future__ import FeatureName

was accepted.

In the case of MandatoryReleases that have not yet occurred,
MandatoryRelease predicts the release in which the feature will become part
of the language.

Else MandatoryRelease records when the feature became part of the language;
in releases at or after that, modules no longer need

    from __future__ import FeatureName

to use the feature in question, but may continue to use such imports.

MandatoryRelease may also be None, meaning that a planned feature got
dropped.

Instances of class _Feature have two corresponding methods,
.getOptionalRelease() and .getMandatoryRelease().

CompilerFlag is the (bitfield) flag that should be passed in the fourth
argument to the builtin function compile() to enable the feature in
dynamically compiled code.  This flag is stored in the .compiler_flag
attribute on _Future instances.  These values must match the appropriate
#defines of CO_xxx flags in Include/compile.h.

No feature line is ever to be deleted from this file.
\"\"\"" code nil nil [1 1645])
            ("all_feature_names" variable nil nil [1647 1816])
            ("__all__" code nil nil [1818 1869])
            ("CO_NESTED" variable nil nil [2093 2122])
            ("CO_GENERATOR_ALLOWED" variable nil nil [2141 2165])
            ("CO_FUTURE_DIVISION" variable nil nil [2209 2238])
            ("CO_FUTURE_ABSOLUTE_IMPORT" variable nil nil [2252 2286])
            ("CO_FUTURE_WITH_STATEMENT" variable nil nil [2325 2359])
            ("CO_FUTURE_PRINT_FUNCTION" variable nil nil [2379 2414])
            ("CO_FUTURE_UNICODE_LITERALS" variable nil nil [2434 2470])
            ("_Feature" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2596 2627])
                            ("self" variable nil (reparse-symbol indented_block_body) [2636 2669])
                            ("self" variable nil (reparse-symbol indented_block_body) [2678 2712]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2531 2535])
                            ("optionalRelease" variable nil (reparse-symbol function_parameters) [2537 2552])
                            ("mandatoryRelease" variable nil (reparse-symbol function_parameters) [2554 2570])
                            ("compiler_flag" variable nil (reparse-symbol function_parameters) [2572 2585]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2518 2713])
                    ("getOptionalRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2741 2745]))                          
                        :documentation "Return first release in which this feature was recognized.

        This is a 5-tuple, of the same form as sys.version_info.
        ")
                        (reparse-symbol indented_block_body) [2718 2926])
                    ("getMandatoryRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2955 2959]))                          
                        :documentation "Return release in which this feature will become mandatory.

        This is a 5-tuple, of the same form as sys.version_info, or, if
        the feature was dropped, is None.
        ")
                        (reparse-symbol indented_block_body) [2931 3191])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3209 3213]))                          )
                        (reparse-symbol indented_block_body) [3196 3370]))                  
                :type "class")
                nil [2498 3370])
            ("nested_scopes" variable nil nil [3371 3502])
            ("generators" variable nil nil [3504 3637])
            ("division" variable nil nil [3639 3764])
            ("absolute_import" variable nil nil [3766 3919])
            ("with_statement" variable nil nil [3921 4070])
            ("print_function" variable nil nil [4072 4221])
            ("unicode_literals" variable nil nil [4223 4380]))          
      :file "__future__.py"
      :pointmax 4381
      :fsize 4380
      :lastmodtime '(21149 51617 958874 877000)
      :unmatched-syntax nil)
    (semanticdb-table "functools.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"functools.py - Tools for working with functions and callable objects
\"\"\"" code nil nil [1 76])
            ("_functools" include nil nil [358 396])
            ("WRAPPER_ASSIGNMENTS" variable nil nil [510 569])
            ("WRAPPER_UPDATES" variable nil nil [570 601])
            ("update_wrapper" function
               (:documentation "Update a wrapper function to look like the wrapped function

       wrapper is the function to be updated
       wrapped is the original function
       assigned is a tuple naming the attributes assigned directly
       from the wrapped function to the wrapper function (defaults to
       functools.WRAPPER_ASSIGNMENTS)
       updated is a tuple naming the attributes of the wrapper that
       are updated with the corresponding attribute from the wrapped
       function (defaults to functools.WRAPPER_UPDATES)
    "
                :arguments 
                  ( ("wrapper" variable nil (reparse-symbol function_parameters) [621 628])
                    ("wrapped" variable nil (reparse-symbol function_parameters) [649 656])
                    ("assigned" variable nil (reparse-symbol function_parameters) [677 685])
                    ("updated" variable nil (reparse-symbol function_parameters) [728 735]))                  )
                nil [602 1550])
            ("wraps" function
               (:documentation "Decorator factory to apply update_wrapper() to a wrapper function

       Returns a decorator that invokes update_wrapper() with the decorated
       function as the wrapper argument and the arguments to wraps() as the
       remaining arguments. Default arguments are as for update_wrapper().
       This is a convenience function to simplify applying partial() to
       update_wrapper().
    "
                :arguments 
                  ( ("wrapped" variable nil (reparse-symbol function_parameters) [1561 1568])
                    ("assigned" variable nil (reparse-symbol function_parameters) [1580 1588])
                    ("updated" variable nil (reparse-symbol function_parameters) [1622 1629]))                  )
                nil [1551 2163])
            ("total_ordering" function
               (:documentation "Class decorator that fills in missing ordering methods"
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2183 2186]))                  )
                nil [2164 3689])
            ("cmp_to_key" function
               (:documentation "Convert a cmp= function into a key= function"
                :arguments 
                  ( ("mycmp" variable nil (reparse-symbol function_parameters) [3705 3710]))                  )
                nil [3690 4479]))          
      :file "functools.py"
      :pointmax 4479
      :fsize 4478
      :lastmodtime '(21149 51617 955874 863000)
      :unmatched-syntax nil)
    (semanticdb-table "collections.py"
      :major-mode 'python-mode
      :tags 
        '( ("__all__" variable nil nil [1 75])
            ("_abcoll" include nil nil [224 245])
            ("_abcoll" include nil nil [246 260])
            ("__all__" variable nil nil [261 287])
            ("_collections" include nil nil [289 332])
            ("operator" include nil nil [333 390])
            ("keyword" include nil nil [391 434])
            ("sys" include nil nil [435 453])
            ("heapq" include nil nil [454 476])
            ("itertools" include nil nil [477 554])
            ("itertools" include nil nil [555 590])
            ("try" code nil nil [592 717])
            ("OrderedDict" type
               (:superclasses ("dict")
                :members 
                  ( ("'Dictionary that remembers insertion order'" code nil (reparse-symbol indented_block_body) [927 970])
                    ("__init__" function
                       (:suite 
                          ( ("'''Initialize an ordered dictionary.  The signature is the same as
        regular dictionaries, but keyword arguments are not recommended because
        their insertion order is arbitrary.

        '''" code nil (reparse-symbol indented_block_body) [1579 1782])
                            ("if" code nil (reparse-symbol indented_block_body) [1791 1889])
                            ("try" code nil (reparse-symbol indented_block_body) [1897 2098])
                            ("self" code nil (reparse-symbol indented_block_body) [2106 2134]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1549 1553])
                            ("args" variable nil (reparse-symbol function_parameters) [1555 1560])
                            ("kwds" variable nil (reparse-symbol function_parameters) [1562 1568]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1536 2135])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2156 2160])
                            ("key" variable nil (reparse-symbol function_parameters) [2162 2165])
                            ("value" variable nil (reparse-symbol function_parameters) [2167 2172])
                            ("dict_setitem" variable nil (reparse-symbol function_parameters) [2174 2186]))                          )
                        (reparse-symbol indented_block_body) [2140 2608])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2629 2633])
                            ("key" variable nil (reparse-symbol function_parameters) [2635 2638])
                            ("dict_delitem" variable nil (reparse-symbol function_parameters) [2640 2652]))                          )
                        (reparse-symbol indented_block_body) [2613 3123])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3141 3145]))                          )
                        (reparse-symbol indented_block_body) [3128 3526])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3548 3552]))                          )
                        (reparse-symbol indented_block_body) [3531 3952])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3967 3971]))                          )
                        (reparse-symbol indented_block_body) [3957 4147])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4236 4240]))                          )
                        (reparse-symbol indented_block_body) [4227 4311])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4327 4331]))                          )
                        (reparse-symbol indented_block_body) [4316 4423])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4438 4442]))                          )
                        (reparse-symbol indented_block_body) [4428 4552])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4570 4574]))                          )
                        (reparse-symbol indented_block_body) [4557 4662])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4682 4686]))                          )
                        (reparse-symbol indented_block_body) [4667 4799])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4818 4822]))                          )
                        (reparse-symbol indented_block_body) [4804 4951])
                    ("update" variable nil (reparse-symbol indented_block_body) [4956 4986])
                    ("__update" variable nil (reparse-symbol indented_block_body) [4992 5009])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [5074 5093])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5107 5111])
                            ("key" variable nil (reparse-symbol function_parameters) [5113 5116])
                            ("default" variable nil (reparse-symbol function_parameters) [5118 5125]))                          )
                        (reparse-symbol indented_block_body) [5099 5529])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5549 5553])
                            ("key" variable nil (reparse-symbol function_parameters) [5555 5558])
                            ("default" variable nil (reparse-symbol function_parameters) [5560 5567]))                          )
                        (reparse-symbol indented_block_body) [5534 5758])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5775 5779])
                            ("last" variable nil (reparse-symbol function_parameters) [5781 5785]))                          )
                        (reparse-symbol indented_block_body) [5763 6147])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6165 6169])
                            ("_repr_running" variable nil (reparse-symbol function_parameters) [6171 6184]))                          )
                        (reparse-symbol indented_block_body) [6152 6593])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6613 6617]))                          )
                        (reparse-symbol indented_block_body) [6598 6943])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6957 6961]))                          )
                        (reparse-symbol indented_block_body) [6948 7044])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7079 7082])
                            ("iterable" variable nil (reparse-symbol function_parameters) [7084 7092])
                            ("value" variable nil (reparse-symbol function_parameters) [7094 7099]))                          )
                        (reparse-symbol indented_block_body) [7049 7349])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7365 7369])
                            ("other" variable nil (reparse-symbol function_parameters) [7371 7376]))                          )
                        (reparse-symbol indented_block_body) [7354 7701])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7717 7721])
                            ("other" variable nil (reparse-symbol function_parameters) [7723 7728]))                          )
                        (reparse-symbol indented_block_body) [7706 7798])
                    ("viewkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7893 7897]))                          )
                        (reparse-symbol indented_block_body) [7880 8005])
                    ("viewvalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8025 8029]))                          )
                        (reparse-symbol indented_block_body) [8010 8135])
                    ("viewitems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8154 8158]))                          )
                        (reparse-symbol indented_block_body) [8140 8269]))                  
                :type "class")
                nil [898 8269])
            ("_class_template" variable nil nil [8449 9897])
            ("_repr_template" variable nil nil [9899 9927])
            ("_field_template" variable nil nil [9929 10042])
            ("namedtuple" function
               (:documentation "Returns a new subclass of tuple with named fields.

    >>> Point = namedtuple('Point', ['x', 'y'])
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessable by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)

    "
                :arguments 
                  ( ("typename" variable nil (reparse-symbol function_parameters) [10059 10067])
                    ("field_names" variable nil (reparse-symbol function_parameters) [10069 10080])
                    ("verbose" variable nil (reparse-symbol function_parameters) [10082 10089])
                    ("rename" variable nil (reparse-symbol function_parameters) [10097 10103]))                  )
                nil [10044 14096])
            ("Counter" type
               (:superclasses ("dict")
                :members 
                  ( ("'''Dict subclass for counting hashable items.  Sometimes called a bag
    or multiset.  Elements are stored as dictionary keys and their counts
    are stored as dictionary values.

    >>> c = Counter('abcdeabcdabcaba')  # count elements from a string

    >>> c.most_common(3)                # three most common elements
    [('a', 5), ('b', 4), ('c', 3)]
    >>> sorted(c)                       # list all unique elements
    ['a', 'b', 'c', 'd', 'e']
    >>> ''.join(sorted(c.elements()))   # list elements with repetitions
    'aaaaabbbbcccdde'
    >>> sum(c.values())                 # total of all counts
    15

    >>> c['a']                          # count of letter 'a'
    5
    >>> for elem in 'shazam':           # update counts from an iterable
    ...     c[elem] += 1                # by adding 1 to each element's count
    >>> c['a']                          # now there are seven 'a'
    7
    >>> del c['b']                      # remove all 'b'
    >>> c['b']                          # now there are zero 'b'
    0

    >>> d = Counter('simsalabim')       # make another counter
    >>> c.update(d)                     # add in the second counter
    >>> c['a']                          # now there are nine 'a'
    9

    >>> c.clear()                       # empty the counter
    >>> c
    Counter()

    Note:  If a count is set to zero or reduced to zero, it will remain
    in the counter until the entry is deleted or the counter is cleared:

    >>> c = Counter('aaabbc')
    >>> c['b'] -= 2                     # reduce the count of 'b' by two
    >>> c.most_common()                 # 'b' is still in, but its count is zero
    [('a', 3), ('c', 1), ('b', 0)]

    '''" code nil (reparse-symbol indented_block_body) [14283 15984])
                    ("__init__" function
                       (:suite 
                          ( ("'''Create a new, empty Counter object.  And if given, count elements
        from an input iterable.  Or, initialize the count from another mapping
        of elements to their counts.

        >>> c = Counter()                           # a new, empty counter
        >>> c = Counter('gallahad')                 # a new counter from an iterable
        >>> c = Counter({'a': 4, 'b': 2})           # a new counter from a mapping
        >>> c = Counter(a=4, b=2)                   # a new counter from keyword args

        '''" code nil (reparse-symbol indented_block_body) [16369 16896])
                            ("super" code nil (reparse-symbol indented_block_body) [16905 16936])
                            ("self" code nil (reparse-symbol indented_block_body) [16945 16974]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16331 16335])
                            ("iterable" variable nil (reparse-symbol function_parameters) [16337 16345])
                            ("kwds" variable nil (reparse-symbol function_parameters) [16352 16358]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16318 16975])
                    ("__missing__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16996 17000])
                            ("key" variable nil (reparse-symbol function_parameters) [17002 17005]))                          )
                        (reparse-symbol indented_block_body) [16980 17153])
                    ("most_common" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17174 17178])
                            ("n" variable nil (reparse-symbol function_parameters) [17180 17181]))                          )
                        (reparse-symbol indented_block_body) [17158 17667])
                    ("elements" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17685 17689]))                          )
                        (reparse-symbol indented_block_body) [17672 18490])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [18570 18573])
                            ("iterable" variable nil (reparse-symbol function_parameters) [18575 18583])
                            ("v" variable nil (reparse-symbol function_parameters) [18585 18586]))                          )
                        (reparse-symbol indented_block_body) [18540 18849])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18865 18869])
                            ("iterable" variable nil (reparse-symbol function_parameters) [18871 18879])
                            ("kwds" variable nil (reparse-symbol function_parameters) [18886 18892]))                          )
                        (reparse-symbol indented_block_body) [18854 20395])
                    ("subtract" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20413 20417])
                            ("iterable" variable nil (reparse-symbol function_parameters) [20419 20427])
                            ("kwds" variable nil (reparse-symbol function_parameters) [20434 20440]))                          )
                        (reparse-symbol indented_block_body) [20400 21536])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21550 21554]))                          )
                        (reparse-symbol indented_block_body) [21541 21626])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21646 21650]))                          )
                        (reparse-symbol indented_block_body) [21631 21698])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21719 21723])
                            ("elem" variable nil (reparse-symbol function_parameters) [21725 21729]))                          )
                        (reparse-symbol indented_block_body) [21703 21890])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21908 21912]))                          )
                        (reparse-symbol indented_block_body) [21895 22118])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22475 22479])
                            ("other" variable nil (reparse-symbol function_parameters) [22481 22486]))                          )
                        (reparse-symbol indented_block_body) [22463 23036])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23053 23057])
                            ("other" variable nil (reparse-symbol function_parameters) [23059 23064]))                          )
                        (reparse-symbol indented_block_body) [23041 23643])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23659 23663])
                            ("other" variable nil (reparse-symbol function_parameters) [23665 23670]))                          )
                        (reparse-symbol indented_block_body) [23648 24317])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24334 24338])
                            ("other" variable nil (reparse-symbol function_parameters) [24340 24345]))                          )
                        (reparse-symbol indented_block_body) [24322 24841]))                  
                :type "class")
                nil [14258 24841])
            ("if" code nil nil [24843 26010]))          
      :file "collections.py"
      :pointmax 26010
      :fsize 26009
      :lastmodtime '(21149 51617 896874 590000)
      :unmatched-syntax '((NAME 25468 . 25478) (PAREN_BLOCK 25478 . 25494) (NAME 25126 . 25136) (PAREN_BLOCK 25136 . 25152) (NAME 24693 . 24701) (IF 24710 . 24712) (ELSE 24733 . 24737) (NAME 24043 . 24051) (IF 24066 . 24068) (ELSE 24089 . 24093) (INDENT_BLOCK 13534 . 13598) (NEWLINE 13533 . 13534) (COLON 13532 . 13533) (TRY 13457 . 13460) (AS 13528 . 13530)))
    (semanticdb-table "linecache.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Cache lines from files.

This is intended to read lines from modules imported -- hence if a filename
is not found, it will look down the module search path for a file by
that name.
\"\"\"" code nil nil [1 188])
            ("sys" include nil nil [190 200])
            ("os" include nil nil [201 210])
            ("__all__" variable nil nil [212 261])
            ("getline" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [275 283])
                ("lineno" variable nil (reparse-symbol function_parameters) [285 291])
                ("module_globals" variable nil (reparse-symbol function_parameters) [293 307]))              ) nil [263 455])
            ("cache" variable nil nil [470 480])
            ("clearcache" function (:documentation "Clear the cache entirely.") nil [495 582])
            ("getlines" function
               (:documentation "Get the lines for a file from the cache.
    Update the cache if it doesn't contain an entry for this file already."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [597 605])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [607 621]))                  )
                nil [584 879])
            ("checkcache" function
               (:documentation "Discard cache entries that are out of date.
    (This is not checked upon each call!)"
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [896 904]))                  )
                nil [881 1572])
            ("updatecache" function
               (:documentation "Update a cache entry and return its list of lines.
    If something's wrong, print a message, discard the cache entry,
    and return an empty list."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1590 1598])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [1600 1614]))                  )
                nil [1574 3965]))          
      :file "linecache.py"
      :pointmax 3965
      :fsize 3964
      :lastmodtime '(21149 51617 997875 58000)
      :unmatched-syntax nil)
    (semanticdb-table "string.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"A collection of string operations (most are no longer used).

Warning: most of the code you see here isn't normally used nowadays.
Beginning with Python 1.6, many of these functions are implemented as
methods on the standard string object. They used to be implemented by
a built-in module called strop, but strop is now obsolete itself.

Public module variables:

whitespace -- a string containing all characters considered whitespace
lowercase -- a string containing all characters considered lowercase letters
uppercase -- a string containing all characters considered uppercase letters
letters -- a string containing all characters considered letters
digits -- a string containing all characters considered decimal digits
hexdigits -- a string containing all characters considered hexadecimal digits
octdigits -- a string containing all characters considered octal digits
punctuation -- a string containing all characters considered punctuation
printable -- a string containing all characters considered printable

\"\"\"" code nil nil [1 1025])
            ("whitespace" variable nil nil [1083 1109])
            ("lowercase" variable nil nil [1110 1150])
            ("uppercase" variable nil nil [1151 1191])
            ("letters" code nil nil [1192 1223])
            ("ascii_lowercase" variable nil nil [1224 1251])
            ("ascii_uppercase" variable nil nil [1252 1279])
            ("ascii_letters" code nil nil [1280 1329])
            ("digits" variable nil nil [1330 1351])
            ("hexdigits" code nil nil [1352 1392])
            ("octdigits" variable nil nil [1393 1415])
            ("punctuation" variable nil nil [1416 1468])
            ("printable" code nil nil [1469 1524])
            ("l" variable nil nil [1603 1628])
            ("_idmap" variable nil nil [1629 1653])
            ("del" code nil nil [1654 1659])
            ("capwords" function
               (:documentation "capwords(s [,sep]) -> string

    Split the argument into words using split, capitalize each
    word using capitalize, and join the capitalized words using
    join.  If the optional second argument sep is absent or None,
    runs of whitespace characters are replaced by a single space
    and leading and trailing whitespace are removed, otherwise
    sep is used to split and join the words.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1797 1798])
                    ("sep" variable nil (reparse-symbol function_parameters) [1800 1803]))                  )
                nil [1784 2290])
            ("_idmapL" variable nil nil [2325 2339])
            ("maketrans" function
               (:documentation "maketrans(frm, to) -> string

    Return a translation table (a string of 256 bytes long)
    suitable for use in string.translate.  The strings frm and to
    must be of the same length.

    "
                :arguments 
                  ( ("fromstr" variable nil (reparse-symbol function_parameters) [2354 2361])
                    ("tostr" variable nil (reparse-symbol function_parameters) [2363 2368]))                  )
                nil [2340 2890])
            ("re" include nil nil [2962 2978])
            ("_multimap" type
               (:documentation "Helper class for combining multiple mappings.

    Used by .{safe_,}substitute() to combine the mapping and keyword
    arguments.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3195 3218])
                            ("self" variable nil (reparse-symbol indented_block_body) [3227 3254]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3160 3164])
                            ("primary" variable nil (reparse-symbol function_parameters) [3166 3173])
                            ("secondary" variable nil (reparse-symbol function_parameters) [3175 3184]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3147 3255])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3276 3280])
                            ("key" variable nil (reparse-symbol function_parameters) [3282 3285]))                          )
                        (reparse-symbol indented_block_body) [3260 3404]))                  
                :type "class")
                nil [2980 3404])
            ("_TemplateMetaclass" type
               (:superclasses ("type")
                :members 
                  ( ("pattern" variable nil (reparse-symbol indented_block_body) [3442 3762])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [3813 3870])
                            ("if" code nil (reparse-symbol indented_block_body) [3879 4113])
                            ("cls" variable nil (reparse-symbol indented_block_body) [4121 4185]))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3781 3784])
                            ("name" variable nil (reparse-symbol function_parameters) [3786 3790])
                            ("bases" variable nil (reparse-symbol function_parameters) [3792 3797])
                            ("dct" variable nil (reparse-symbol function_parameters) [3799 3802]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3768 4186]))                  
                :type "class")
                nil [3406 4186])
            ("Template" type
               (:documentation "A string class for supporting $-substitutions."
                :members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [4265 4299])
                    ("delimiter" variable nil (reparse-symbol indented_block_body) [4305 4320])
                    ("idpattern" variable nil (reparse-symbol indented_block_body) [4325 4356])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4400 4424]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4375 4379])
                            ("template" variable nil (reparse-symbol function_parameters) [4381 4389]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4362 4425])
                    ("_invalid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4510 4514])
                            ("mo" variable nil (reparse-symbol function_parameters) [4516 4518]))                          )
                        (reparse-symbol indented_block_body) [4497 4884])
                    ("substitute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4904 4908])
                            ("args" variable nil (reparse-symbol function_parameters) [4910 4915])
                            ("kws" variable nil (reparse-symbol function_parameters) [4917 4922]))                          )
                        (reparse-symbol indented_block_body) [4889 5933])
                    ("safe_substitute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5958 5962])
                            ("args" variable nil (reparse-symbol function_parameters) [5964 5969])
                            ("kws" variable nil (reparse-symbol function_parameters) [5971 5976]))                          )
                        (reparse-symbol indented_block_body) [5938 7244]))                  
                :type "class")
                nil [4188 7244])
            ("index_error" variable nil nil [7475 7499])
            ("atoi_error" variable nil nil [7500 7523])
            ("atof_error" variable nil nil [7524 7547])
            ("atol_error" variable nil nil [7548 7571])
            ("lower" function
               (:documentation "lower(s) -> string

    Return a copy of the string s converted to lowercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7626 7627]))                  )
                nil [7616 7745])
            ("upper" function
               (:documentation "upper(s) -> string

    Return a copy of the string s converted to uppercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7799 7800]))                  )
                nil [7789 7918])
            ("swapcase" function
               (:documentation "swapcase(s) -> string

    Return a copy of the string s with upper case characters
    converted to lowercase and vice versa.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7973 7974]))                  )
                nil [7960 8144])
            ("strip" function
               (:documentation "strip(s [,chars]) -> string

    Return a copy of the string s with leading and trailing
    whitespace removed.
    If chars is given and not None, remove characters in chars instead.
    If chars is unicode, S will be converted to unicode before stripping.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8200 8201])
                    ("chars" variable nil (reparse-symbol function_parameters) [8203 8208]))                  )
                nil [8190 8517])
            ("lstrip" function
               (:documentation "lstrip(s [,chars]) -> string

    Return a copy of the string s with leading whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8561 8562])
                    ("chars" variable nil (reparse-symbol function_parameters) [8564 8569]))                  )
                nil [8550 8789])
            ("rstrip" function
               (:documentation "rstrip(s [,chars]) -> string

    Return a copy of the string s with trailing whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8834 8835])
                    ("chars" variable nil (reparse-symbol function_parameters) [8837 8842]))                  )
                nil [8823 9063])
            ("split" function
               (:documentation "split(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string.  If maxsplit is given, splits at no more than
    maxsplit places (resulting in at most maxsplit+1 words).  If sep
    is not specified or is None, any whitespace string is a separator.

    (split and splitfields are synonymous)

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9133 9134])
                    ("sep" variable nil (reparse-symbol function_parameters) [9136 9139])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9146 9154]))                  )
                nil [9123 9575])
            ("splitfields" variable nil nil [9575 9594])
            ("rsplit" function
               (:documentation "rsplit(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string, starting at the end of the string and working
    to the front.  If maxsplit is given, at most maxsplit splits are
    done. If sep is not specified or is None, any whitespace string
    is a separator.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9665 9666])
                    ("sep" variable nil (reparse-symbol function_parameters) [9668 9671])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9678 9686]))                  )
                nil [9654 10081])
            ("join" function
               (:documentation "join(list [,sep]) -> string

    Return a string composed of the words in list, with
    intervening occurrences of sep.  The default separator is a
    single space.

    (joinfields and join are synonymous)

    "
                :arguments 
                  ( ("words" variable nil (reparse-symbol function_parameters) [10129 10134])
                    ("sep" variable nil (reparse-symbol function_parameters) [10136 10139]))                  )
                nil [10120 10400])
            ("joinfields" variable nil nil [10400 10417])
            ("index" function
               (:documentation "index(s, sub [,start [,end]]) -> int

    Like find but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10476 10477])
                    ("args" variable nil (reparse-symbol function_parameters) [10479 10484]))                  )
                nil [10466 10636])
            ("rindex" function
               (:documentation "rindex(s, sub [,start [,end]]) -> int

    Like rfind but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10700 10701])
                    ("args" variable nil (reparse-symbol function_parameters) [10703 10708]))                  )
                nil [10689 10863])
            ("count" function
               (:documentation "count(s, sub[, start[,end]]) -> int

    Return the number of occurrences of substring sub in string
    s[start:end].  Optional arguments start and end are
    interpreted as in slice notation.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10923 10924])
                    ("args" variable nil (reparse-symbol function_parameters) [10926 10931]))                  )
                nil [10913 11171])
            ("find" function
               (:documentation "find(s, sub [,start [,end]]) -> in

    Return the lowest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11222 11223])
                    ("args" variable nil (reparse-symbol function_parameters) [11225 11230]))                  )
                nil [11213 11528])
            ("rfind" function
               (:documentation "rfind(s, sub [,start [,end]]) -> int

    Return the highest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11585 11586])
                    ("args" variable nil (reparse-symbol function_parameters) [11588 11593]))                  )
                nil [11575 11895])
            ("_float" variable nil nil [11917 11931])
            ("_int" variable nil nil [11932 11942])
            ("_long" variable nil nil [11943 11955])
            ("atof" function
               (:documentation "atof(s) -> float

    Return the floating point number represented by the string s.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11992 11993]))                  )
                nil [11983 12117])
            ("atoi" function
               (:documentation "atoi(s [,base]) -> int

    Return the integer represented by the string s in the given
    base, which defaults to 10.  The string s must consist of one
    or more digits, possibly preceded by a sign.  If base is 0, it
    is chosen from the leading characters of s, 0 for octal, 0x or
    0X for hexadecimal.  If base is 16, a preceding 0x or 0X is
    accepted.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12156 12157])
                    ("base" variable nil (reparse-symbol function_parameters) [12160 12164]))                  )
                nil [12147 12577])
            ("atol" function
               (:documentation "atol(s [,base]) -> long

    Return the long integer represented by the string s in the
    given base, which defaults to 10.  The string s must consist
    of one or more digits, possibly preceded by a sign.  If base
    is 0, it is chosen from the leading characters of s, 0 for
    octal, 0x or 0X for hexadecimal.  If base is 16, a preceding
    0x or 0X is accepted.  A trailing L or l is not accepted,
    unless base is 0.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12621 12622])
                    ("base" variable nil (reparse-symbol function_parameters) [12624 12628]))                  )
                nil [12612 13106])
            ("ljust" function
               (:documentation "ljust(s, width[, fillchar]) -> string

    Return a left-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13142 13143])
                    ("width" variable nil (reparse-symbol function_parameters) [13145 13150])
                    ("args" variable nil (reparse-symbol function_parameters) [13152 13157]))                  )
                nil [13132 13449])
            ("rjust" function
               (:documentation "rjust(s, width[, fillchar]) -> string

    Return a right-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13485 13486])
                    ("width" variable nil (reparse-symbol function_parameters) [13488 13493])
                    ("args" variable nil (reparse-symbol function_parameters) [13495 13500]))                  )
                nil [13475 13793])
            ("center" function
               (:documentation "center(s, width[, fillchar]) -> string

    Return a center version of s, in a field of the specified
    width. padded with spaces as needed.  The string is never
    truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13823 13824])
                    ("width" variable nil (reparse-symbol function_parameters) [13826 13831])
                    ("args" variable nil (reparse-symbol function_parameters) [13833 13838]))                  )
                nil [13812 14124])
            ("zfill" function
               (:documentation "zfill(x, width) -> string

    Pad a numeric string x with zeros on the left, to fill a field
    of the specified width.  The string x is never truncated.

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [14336 14337])
                    ("width" variable nil (reparse-symbol function_parameters) [14339 14344]))                  )
                nil [14326 14603])
            ("expandtabs" function
               (:documentation "expandtabs(s [,tabsize]) -> string

    Return a copy of the string s with all tab characters replaced
    by the appropriate number of spaces, depending on the current
    column, and the tabsize (default 8).

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [14718 14719])
                    ("tabsize" variable nil (reparse-symbol function_parameters) [14721 14728]))                  )
                nil [14703 14992])
            ("translate" function
               (:documentation "translate(s,table [,deletions]) -> string

    Return a copy of the string s, where all characters occurring
    in the optional argument deletions are removed, and the
    remaining characters have been mapped through the given
    translation table, which must be a string of length 256.  The
    deletions argument is not allowed for Unicode strings.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [15054 15055])
                    ("table" variable nil (reparse-symbol function_parameters) [15057 15062])
                    ("deletions" variable nil (reparse-symbol function_parameters) [15064 15073]))                  )
                nil [15040 15803])
            ("capitalize" function
               (:documentation "capitalize(s) -> string

    Return a copy of the string s with only its first character
    capitalized.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [15873 15874]))                  )
                nil [15858 16025])
            ("replace" function
               (:documentation "replace (str, old, new[, maxreplace]) -> string

    Return a copy of string str with all occurrences of substring
    old replaced by new. If the optional argument maxreplace is
    given, only the first maxreplace occurrences are replaced.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [16071 16072])
                    ("old" variable nil (reparse-symbol function_parameters) [16074 16077])
                    ("new" variable nil (reparse-symbol function_parameters) [16079 16082])
                    ("maxreplace" variable nil (reparse-symbol function_parameters) [16084 16094]))                  )
                nil [16059 16401])
            ("try" code nil nil [16643 16848])
            ("Formatter" type
               (:superclasses ("object")
                :members 
                  ( ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17294 17298])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17300 17313])
                            ("args" variable nil (reparse-symbol function_parameters) [17315 17320])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17322 17330]))                          )
                        (reparse-symbol indented_block_body) [17283 17390])
                    ("vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17407 17411])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17413 17426])
                            ("args" variable nil (reparse-symbol function_parameters) [17428 17432])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17434 17440]))                          )
                        (reparse-symbol indented_block_body) [17395 17621])
                    ("_vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17639 17643])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17645 17658])
                            ("args" variable nil (reparse-symbol function_parameters) [17660 17664])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17666 17672])
                            ("used_args" variable nil (reparse-symbol function_parameters) [17674 17683])
                            ("recursion_depth" variable nil (reparse-symbol function_parameters) [17685 17700]))                          )
                        (reparse-symbol indented_block_body) [17626 18930])
                    ("get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18950 18954])
                            ("key" variable nil (reparse-symbol function_parameters) [18956 18959])
                            ("args" variable nil (reparse-symbol function_parameters) [18961 18965])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18967 18973]))                          )
                        (reparse-symbol indented_block_body) [18936 19091])
                    ("check_unused_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19119 19123])
                            ("used_args" variable nil (reparse-symbol function_parameters) [19125 19134])
                            ("args" variable nil (reparse-symbol function_parameters) [19136 19140])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19142 19148]))                          )
                        (reparse-symbol indented_block_body) [19097 19164])
                    ("format_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19187 19191])
                            ("value" variable nil (reparse-symbol function_parameters) [19193 19198])
                            ("format_spec" variable nil (reparse-symbol function_parameters) [19200 19211]))                          )
                        (reparse-symbol indented_block_body) [19170 19256])
                    ("convert_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19280 19284])
                            ("value" variable nil (reparse-symbol function_parameters) [19286 19291])
                            ("conversion" variable nil (reparse-symbol function_parameters) [19293 19303]))                          )
                        (reparse-symbol indented_block_body) [19262 19621])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19996 20000])
                            ("format_string" variable nil (reparse-symbol function_parameters) [20002 20015]))                          )
                        (reparse-symbol indented_block_body) [19986 20067])
                    ("get_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20344 20348])
                            ("field_name" variable nil (reparse-symbol function_parameters) [20350 20360])
                            ("args" variable nil (reparse-symbol function_parameters) [20362 20366])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20368 20374]))                          )
                        (reparse-symbol indented_block_body) [20330 20757]))                  
                :type "class")
                nil [17254 20757]))          
      :file "string.py"
      :pointmax 20757
      :fsize 20756
      :lastmodtime '(21149 51618 153875 782000)
      :unmatched-syntax nil)
    (semanticdb-table "sre_constants.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [296 333])
            ("MAGIC" variable nil nil [381 397])
            ("try" code nil nil [399 510])
            ("error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [617 621]))                  
                :type "class")
                nil [589 622])
            ("FAILURE" variable nil nil [636 655])
            ("SUCCESS" variable nil nil [656 675])
            ("ANY" variable nil nil [677 688])
            ("ANY_ALL" variable nil nil [689 708])
            ("ASSERT" variable nil nil [709 726])
            ("ASSERT_NOT" variable nil nil [727 752])
            ("AT" variable nil nil [753 762])
            ("BIGCHARSET" variable nil nil [763 788])
            ("BRANCH" variable nil nil [789 806])
            ("CALL" variable nil nil [807 820])
            ("CATEGORY" variable nil nil [821 842])
            ("CHARSET" variable nil nil [843 862])
            ("GROUPREF" variable nil nil [863 884])
            ("GROUPREF_IGNORE" variable nil nil [885 920])
            ("GROUPREF_EXISTS" variable nil nil [921 956])
            ("IN" variable nil nil [957 966])
            ("IN_IGNORE" variable nil nil [967 990])
            ("INFO" variable nil nil [991 1004])
            ("JUMP" variable nil nil [1005 1018])
            ("LITERAL" variable nil nil [1019 1038])
            ("LITERAL_IGNORE" variable nil nil [1039 1072])
            ("MARK" variable nil nil [1073 1086])
            ("MAX_REPEAT" variable nil nil [1087 1112])
            ("MAX_UNTIL" variable nil nil [1113 1136])
            ("MIN_REPEAT" variable nil nil [1137 1162])
            ("MIN_UNTIL" variable nil nil [1163 1186])
            ("NEGATE" variable nil nil [1187 1204])
            ("NOT_LITERAL" variable nil nil [1205 1232])
            ("NOT_LITERAL_IGNORE" variable nil nil [1233 1274])
            ("RANGE" variable nil nil [1275 1290])
            ("REPEAT" variable nil nil [1291 1308])
            ("REPEAT_ONE" variable nil nil [1309 1334])
            ("SUBPATTERN" variable nil nil [1335 1360])
            ("MIN_REPEAT_ONE" variable nil nil [1361 1394])
            ("AT_BEGINNING" variable nil nil [1408 1437])
            ("AT_BEGINNING_LINE" variable nil nil [1438 1477])
            ("AT_BEGINNING_STRING" variable nil nil [1478 1521])
            ("AT_BOUNDARY" variable nil nil [1522 1549])
            ("AT_NON_BOUNDARY" variable nil nil [1550 1585])
            ("AT_END" variable nil nil [1586 1603])
            ("AT_END_LINE" variable nil nil [1604 1631])
            ("AT_END_STRING" variable nil nil [1632 1663])
            ("AT_LOC_BOUNDARY" variable nil nil [1664 1699])
            ("AT_LOC_NON_BOUNDARY" variable nil nil [1700 1743])
            ("AT_UNI_BOUNDARY" variable nil nil [1744 1779])
            ("AT_UNI_NON_BOUNDARY" variable nil nil [1780 1823])
            ("CATEGORY_DIGIT" variable nil nil [1838 1871])
            ("CATEGORY_NOT_DIGIT" variable nil nil [1872 1913])
            ("CATEGORY_SPACE" variable nil nil [1914 1947])
            ("CATEGORY_NOT_SPACE" variable nil nil [1948 1989])
            ("CATEGORY_WORD" variable nil nil [1990 2021])
            ("CATEGORY_NOT_WORD" variable nil nil [2022 2061])
            ("CATEGORY_LINEBREAK" variable nil nil [2062 2103])
            ("CATEGORY_NOT_LINEBREAK" variable nil nil [2104 2153])
            ("CATEGORY_LOC_WORD" variable nil nil [2154 2193])
            ("CATEGORY_LOC_NOT_WORD" variable nil nil [2194 2241])
            ("CATEGORY_UNI_DIGIT" variable nil nil [2242 2283])
            ("CATEGORY_UNI_NOT_DIGIT" variable nil nil [2284 2333])
            ("CATEGORY_UNI_SPACE" variable nil nil [2334 2375])
            ("CATEGORY_UNI_NOT_SPACE" variable nil nil [2376 2425])
            ("CATEGORY_UNI_WORD" variable nil nil [2426 2465])
            ("CATEGORY_UNI_NOT_WORD" variable nil nil [2466 2513])
            ("CATEGORY_UNI_LINEBREAK" variable nil nil [2514 2563])
            ("CATEGORY_UNI_NOT_LINEBREAK" variable nil nil [2564 2621])
            ("OPCODES" variable nil nil [2623 3120])
            ("ATCODES" variable nil nil [3122 3346])
            ("CHCODES" variable nil nil [3348 3762])
            ("makedict" function (:arguments 
              ( ("list" variable nil (reparse-symbol function_parameters) [3777 3781]))              ) nil [3764 3878])
            ("OPCODES" variable nil nil [3879 3906])
            ("ATCODES" variable nil nil [3907 3934])
            ("CHCODES" variable nil nil [3935 3962])
            ("OP_IGNORE" variable nil nil [4012 4142])
            ("AT_MULTILINE" variable nil nil [4144 4223])
            ("AT_LOCALE" variable nil nil [4225 4315])
            ("AT_UNICODE" variable nil nil [4317 4408])
            ("CH_LOCALE" variable nil nil [4410 4764])
            ("CH_UNICODE" variable nil nil [4766 5145])
            ("SRE_FLAG_TEMPLATE" variable nil nil [5155 5176])
            ("SRE_FLAG_IGNORECASE" variable nil nil [5216 5239])
            ("SRE_FLAG_LOCALE" variable nil nil [5259 5278])
            ("SRE_FLAG_MULTILINE" variable nil nil [5302 5324])
            ("SRE_FLAG_DOTALL" variable nil nil [5360 5380])
            ("SRE_FLAG_UNICODE" variable nil nil [5415 5436])
            ("SRE_FLAG_VERBOSE" variable nil nil [5458 5479])
            ("SRE_FLAG_DEBUG" variable nil nil [5513 5533])
            ("SRE_INFO_PREFIX" variable nil nil [5574 5593])
            ("SRE_INFO_LITERAL" variable nil nil [5607 5627])
            ("SRE_INFO_CHARSET" variable nil nil [5674 5694])
            ("if" code nil nil [5743 7198]))          
      :file "sre_constants.py"
      :pointmax 7198
      :fsize 7197
      :lastmodtime '(21149 51618 137875 708000)
      :unmatched-syntax nil)
    (semanticdb-table "abc.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) according to PEP 3119.\"\"\"" code nil nil [102 159])
            ("types" include nil nil [161 173])
            ("_weakrefset" include nil nil [175 206])
            ("_C" type
               (:members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [238 253])
            ("_InstanceType" variable nil nil [253 279])
            ("abstractmethod" function
               (:documentation "A decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractmethod
            def my_abstract_method(self, ...):
                ...
    "
                :arguments 
                  ( ("funcobj" variable nil (reparse-symbol function_parameters) [301 308]))                  )
                nil [282 876])
            ("abstractproperty" type
               (:documentation "A decorator indicating abstract properties.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract properties are overridden.
    The abstract properties can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractproperty
            def my_abstract_property(self):
                ...

    This defines a read-only property; you can also define a read-write
    abstract property using the 'long' form of property declaration:

        class C:
            __metaclass__ = ABCMeta
            def getx(self): ...
            def setx(self, value): ...
            x = abstractproperty(getx, setx)
    "
                :superclasses ("property")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1742 1769]))                  
                :type "class")
                nil [878 1770])
            ("ABCMeta" type
               (:documentation "Metaclass for defining Abstract Base Classes (ABCs).

    Use this metaclass to create an ABC.  An ABC can be subclassed
    directly, and then acts as a mix-in class.  You can also register
    unrelated concrete classes (even built-in classes) and unrelated
    ABCs as 'virtual subclasses' -- these and their descendants will
    be considered subclasses of the registering ABC by the built-in
    issubclass() function, but the registering ABC won't show up in
    their MRO (Method Resolution Order) nor will method
    implementations defined by the registering ABC be callable (not
    even via super()).

    "
                :superclasses ("type")
                :members 
                  ( ("_abc_invalidation_counter" variable nil (reparse-symbol indented_block_body) [2614 2643])
                    ("__new__" function (:arguments 
                      ( ("mcls" variable nil (reparse-symbol function_parameters) [2661 2665])
                        ("name" variable nil (reparse-symbol function_parameters) [2667 2671])
                        ("bases" variable nil (reparse-symbol function_parameters) [2673 2678])
                        ("namespace" variable nil (reparse-symbol function_parameters) [2680 2689]))                      ) (reparse-symbol indented_block_body) [2649 3526])
                    ("register" function
                       (:documentation "Register a virtual subclass of an ABC."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3544 3547])
                            ("subclass" variable nil (reparse-symbol function_parameters) [3549 3557]))                          )
                        (reparse-symbol indented_block_body) [3531 4266])
                    ("_dump_registry" function
                       (:documentation "Debug helper to print the ABC registry."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4290 4293])
                            ("file" variable nil (reparse-symbol function_parameters) [4295 4299]))                          )
                        (reparse-symbol indented_block_body) [4271 4698])
                    ("__instancecheck__" function
                       (:documentation "Override for isinstance(instance, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4725 4728])
                            ("instance" variable nil (reparse-symbol function_parameters) [4730 4738]))                          )
                        (reparse-symbol indented_block_body) [4703 5559])
                    ("__subclasscheck__" function
                       (:documentation "Override for issubclass(subclass, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5586 5589])
                            ("subclass" variable nil (reparse-symbol function_parameters) [5591 5599]))                          )
                        (reparse-symbol indented_block_body) [5564 7146]))                  
                :type "class")
                nil [1772 7146]))          
      :file "abc.py"
      :pointmax 7146
      :fsize 7145
      :lastmodtime '(21149 51617 853874 390000)
      :unmatched-syntax nil)
    (semanticdb-table "_abcoll.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) for collections, according to PEP 3119.

DON'T USE THIS MODULE DIRECTLY!  The classes here should be imported
via collections; they are defined here only to alleviate certain
bootstrapping issues.  Unit tests are in test_collections.
\"\"\"" code nil nil [102 371])
            ("abc" include nil nil [373 412])
            ("sys" include nil nil [413 423])
            ("__all__" variable nil nil [425 708])
            ("_hasattr" function (:arguments 
              ( ("C" variable nil (reparse-symbol function_parameters) [749 750])
                ("attr" variable nil (reparse-symbol function_parameters) [752 756]))              ) nil [736 911])
            ("Hashable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [933 956])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [995 999]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [962 1019])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1062 1065])
                            ("C" variable nil (reparse-symbol function_parameters) [1067 1068]))                          )
                        (reparse-symbol indented_block_body) [1024 1502]))                  
                :type "class")
                nil [913 1502])
            ("Iterable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [1524 1547])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1586 1590]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1553 1637])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1680 1683])
                            ("C" variable nil (reparse-symbol function_parameters) [1685 1686]))                          )
                        (reparse-symbol indented_block_body) [1642 1815]))                  
                :type "class")
                nil [1504 1815])
            ("Iterable" code nil nil [1816 1838])
            ("Iterator" type
               (:superclasses ("Iterable")
                :members 
                  ( ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1901 1905]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1872 2022])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2040 2044]))                          )
                        (reparse-symbol indented_block_body) [2027 2067])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2110 2113])
                            ("C" variable nil (reparse-symbol function_parameters) [2115 2116]))                          )
                        (reparse-symbol indented_block_body) [2072 2269]))                  
                :type "class")
                nil [1841 2269])
            ("Sized" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2288 2311])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2349 2353]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2317 2373])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2416 2419])
                            ("C" variable nil (reparse-symbol function_parameters) [2421 2422]))                          )
                        (reparse-symbol indented_block_body) [2378 2547]))                  
                :type "class")
                nil [2271 2547])
            ("Container" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2570 2593])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2636 2640])
                            ("x" variable nil (reparse-symbol function_parameters) [2642 2643]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2599 2667])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2710 2713])
                            ("C" variable nil (reparse-symbol function_parameters) [2715 2716]))                          )
                        (reparse-symbol indented_block_body) [2672 2850]))                  
                :type "class")
                nil [2549 2850])
            ("Callable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2872 2895])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2934 2938])
                            ("args" variable nil (reparse-symbol function_parameters) [2940 2945])
                            ("kwds" variable nil (reparse-symbol function_parameters) [2947 2953]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2901 2977])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3020 3023])
                            ("C" variable nil (reparse-symbol function_parameters) [3025 3026]))                          )
                        (reparse-symbol indented_block_body) [2982 3155]))                  
                :type "class")
                nil [2852 3155])
            ("Set" type
               (:documentation "A set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__ and __len__.

    To override the comparisons (presumably for speed, as the
    semantics are fixed), all you have to do is redefine __le__ and
    then the other operations will automatically follow suit.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3598 3602])
                            ("other" variable nil (reparse-symbol function_parameters) [3604 3609]))                          )
                        (reparse-symbol indented_block_body) [3587 3854])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3870 3874])
                            ("other" variable nil (reparse-symbol function_parameters) [3876 3881]))                          )
                        (reparse-symbol indented_block_body) [3859 4018])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4034 4038])
                            ("other" variable nil (reparse-symbol function_parameters) [4040 4045]))                          )
                        (reparse-symbol indented_block_body) [4023 4149])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4165 4169])
                            ("other" variable nil (reparse-symbol function_parameters) [4171 4176]))                          )
                        (reparse-symbol indented_block_body) [4154 4281])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4297 4301])
                            ("other" variable nil (reparse-symbol function_parameters) [4303 4308]))                          )
                        (reparse-symbol indented_block_body) [4286 4446])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4462 4466])
                            ("other" variable nil (reparse-symbol function_parameters) [4468 4473]))                          )
                        (reparse-symbol indented_block_body) [4451 4511])
                    ("_from_iterable" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4552 4555])
                            ("it" variable nil (reparse-symbol function_parameters) [4557 4559]))                          )
                        (reparse-symbol indented_block_body) [4516 4788])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4805 4809])
                            ("other" variable nil (reparse-symbol function_parameters) [4811 4816]))                          )
                        (reparse-symbol indented_block_body) [4793 4975])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4995 4999])
                            ("other" variable nil (reparse-symbol function_parameters) [5001 5006]))                          )
                        (reparse-symbol indented_block_body) [4980 5176])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5192 5196])
                            ("other" variable nil (reparse-symbol function_parameters) [5198 5203]))                          )
                        (reparse-symbol indented_block_body) [5181 5380])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5397 5401])
                            ("other" variable nil (reparse-symbol function_parameters) [5403 5408]))                          )
                        (reparse-symbol indented_block_body) [5385 5700])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5717 5721])
                            ("other" variable nil (reparse-symbol function_parameters) [5723 5728]))                          )
                        (reparse-symbol indented_block_body) [5705 5950])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [6026 6041])
                    ("_hash" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6057 6061]))                          
                        :documentation "Compute the hash value of a set.

        Note that we don't define __hash__: not all sets are hashable.
        But if you define a hashable set type, its __hash__ should
        call this function.

        This must be compatible __eq__.

        All sets ought to compare equal if they contain the same
        elements, regardless of how they are implemented, and
        regardless of the order of the elements; so there's not much
        freedom for __eq__ or __hash__.  We match the algorithm used
        by the built-in frozenset type.
        ")
                        (reparse-symbol indented_block_body) [6047 7050]))                  
                :type "class")
                nil [3172 7050])
            ("Set" code nil nil [7051 7074])
            ("MutableSet" type
               (:documentation "A mutable set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__, __len__,
    add(), and discard().

    To override the comparisons (presumably for speed, as the
    semantics are fixed), all you have to do is redefine __le__ and
    then the other operations will automatically follow suit.
    "
                :superclasses ("Set")
                :members 
                  ( ("add" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7535 7539])
                            ("value" variable nil (reparse-symbol function_parameters) [7541 7546]))                          
                        :documentation "Add an element.")
                        (reparse-symbol indented_block_body) [7507 7613])
                    ("discard" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7650 7654])
                            ("value" variable nil (reparse-symbol function_parameters) [7656 7661]))                          
                        :documentation "Remove an element.  Do not raise an exception if absent.")
                        (reparse-symbol indented_block_body) [7618 7769])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7785 7789])
                            ("value" variable nil (reparse-symbol function_parameters) [7791 7796]))                          
                        :documentation "Remove an element. If not a member, raise a KeyError.")
                        (reparse-symbol indented_block_body) [7774 7959])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7972 7976]))                          
                        :documentation "Return the popped value.  Raise KeyError if empty.")
                        (reparse-symbol indented_block_body) [7964 8216])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8231 8235]))                          
                        :documentation "This is slow (creates N new iterators!) but effective.")
                        (reparse-symbol indented_block_body) [8221 8413])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8430 8434])
                            ("it" variable nil (reparse-symbol function_parameters) [8436 8438]))                          )
                        (reparse-symbol indented_block_body) [8418 8514])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8532 8536])
                            ("it" variable nil (reparse-symbol function_parameters) [8538 8540]))                          )
                        (reparse-symbol indented_block_body) [8519 8629])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8647 8651])
                            ("it" variable nil (reparse-symbol function_parameters) [8653 8655]))                          )
                        (reparse-symbol indented_block_body) [8634 8986])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9004 9008])
                            ("it" variable nil (reparse-symbol function_parameters) [9010 9012]))                          )
                        (reparse-symbol indented_block_body) [8991 9162]))                  
                :type "class")
                nil [7077 9162])
            ("MutableSet" code nil nil [9163 9187])
            ("Mapping" type
               (:documentation "A Mapping is a generic container for associating key/value
    pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __iter__, and __len__.

    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9504 9508])
                            ("key" variable nil (reparse-symbol function_parameters) [9510 9513]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9468 9539])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9552 9556])
                            ("key" variable nil (reparse-symbol function_parameters) [9558 9561])
                            ("default" variable nil (reparse-symbol function_parameters) [9563 9570]))                          )
                        (reparse-symbol indented_block_body) [9544 9743])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9765 9769])
                            ("key" variable nil (reparse-symbol function_parameters) [9771 9774]))                          )
                        (reparse-symbol indented_block_body) [9748 9900])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9918 9922]))                          )
                        (reparse-symbol indented_block_body) [9905 10008])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10028 10032]))                          )
                        (reparse-symbol indented_block_body) [10013 10149])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10168 10172]))                          )
                        (reparse-symbol indented_block_body) [10154 10307])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10321 10325]))                          )
                        (reparse-symbol indented_block_body) [10312 10393])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10408 10412]))                          )
                        (reparse-symbol indented_block_body) [10398 10532])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10548 10552]))                          )
                        (reparse-symbol indented_block_body) [10537 10641])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [10721 10736])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10753 10757])
                            ("other" variable nil (reparse-symbol function_parameters) [10759 10764]))                          )
                        (reparse-symbol indented_block_body) [10742 10901])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10917 10921])
                            ("other" variable nil (reparse-symbol function_parameters) [10923 10928]))                          )
                        (reparse-symbol indented_block_body) [10906 10966]))                  
                :type "class")
                nil [9209 10966])
            ("MappingView" type
               (:superclasses ("Sized")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11035 11058]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11011 11015])
                            ("mapping" variable nil (reparse-symbol function_parameters) [11017 11024]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10998 11059])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11076 11080]))                          )
                        (reparse-symbol indented_block_body) [11064 11117])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11135 11139]))                          )
                        (reparse-symbol indented_block_body) [11122 11211]))                  
                :type "class")
                nil [10967 11211])
            ("KeysView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11288 11292])
                            ("it" variable nil (reparse-symbol function_parameters) [11294 11296]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11252 11322])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11344 11348])
                            ("key" variable nil (reparse-symbol function_parameters) [11350 11353]))                          )
                        (reparse-symbol indented_block_body) [11327 11392])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11410 11414]))                          )
                        (reparse-symbol indented_block_body) [11397 11473]))                  
                :type "class")
                nil [11213 11473])
            ("ItemsView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11551 11555])
                            ("it" variable nil (reparse-symbol function_parameters) [11557 11559]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11515 11585])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11607 11611])
                            ("item" variable nil (reparse-symbol function_parameters) [11613 11617]))                          )
                        (reparse-symbol indented_block_body) [11590 11788])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11806 11810]))                          )
                        (reparse-symbol indented_block_body) [11793 11891]))                  
                :type "class")
                nil [11475 11891])
            ("ValuesView" type
               (:superclasses ("MappingView")
                :members 
                  ( ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11946 11950])
                            ("value" variable nil (reparse-symbol function_parameters) [11952 11957]))                          )
                        (reparse-symbol indented_block_body) [11929 12087])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12105 12109]))                          )
                        (reparse-symbol indented_block_body) [12092 12183]))                  
                :type "class")
                nil [11893 12183])
            ("MutableMapping" type
               (:documentation "A MutableMapping is a generic container for associating
    key/value pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __setitem__, __delitem__,
    __iter__, and __len__.

    "
                :superclasses ("Mapping")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12505 12509])
                            ("key" variable nil (reparse-symbol function_parameters) [12511 12514])
                            ("value" variable nil (reparse-symbol function_parameters) [12516 12521]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12469 12547])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12588 12592])
                            ("key" variable nil (reparse-symbol function_parameters) [12594 12597]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12552 12623])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [12628 12647])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12661 12665])
                            ("key" variable nil (reparse-symbol function_parameters) [12667 12670])
                            ("default" variable nil (reparse-symbol function_parameters) [12672 12679]))                          )
                        (reparse-symbol indented_block_body) [12653 13098])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13115 13119]))                          )
                        (reparse-symbol indented_block_body) [13103 13447])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13462 13466]))                          )
                        (reparse-symbol indented_block_body) [13452 13634])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [13650 13655])
                        ("kwds" variable nil (reparse-symbol function_parameters) [13657 13663]))                      ) (reparse-symbol indented_block_body) [13639 14724])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14744 14748])
                            ("key" variable nil (reparse-symbol function_parameters) [14750 14753])
                            ("default" variable nil (reparse-symbol function_parameters) [14755 14762]))                          )
                        (reparse-symbol indented_block_body) [14729 14967]))                  
                :type "class")
                nil [12185 14967])
            ("MutableMapping" code nil nil [14968 14997])
            ("Sequence" type
               (:documentation "All the operations on a read-only sequence.

    Concrete subclasses must override __new__ or __init__,
    __getitem__, and __len__.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15254 15258])
                            ("index" variable nil (reparse-symbol function_parameters) [15260 15265]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15218 15293])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15311 15315]))                          )
                        (reparse-symbol indented_block_body) [15298 15490])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15512 15516])
                            ("value" variable nil (reparse-symbol function_parameters) [15518 15523]))                          )
                        (reparse-symbol indented_block_body) [15495 15625])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15647 15651]))                          )
                        (reparse-symbol indented_block_body) [15630 15725])
                    ("index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15740 15744])
                            ("value" variable nil (reparse-symbol function_parameters) [15746 15751]))                          )
                        (reparse-symbol indented_block_body) [15730 16007])
                    ("count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16022 16026])
                            ("value" variable nil (reparse-symbol function_parameters) [16028 16033]))                          )
                        (reparse-symbol indented_block_body) [16012 16163]))                  
                :type "class")
                nil [15020 16163])
            ("Sequence" code nil nil [16164 16188])
            ("Sequence" code nil nil [16189 16218])
            ("Sequence" code nil nil [16219 16244])
            ("Sequence" code nil nil [16245 16270])
            ("MutableSequence" type
               (:documentation "All the operations on a read-only sequence.

    Concrete subclasses must provide __new__ or __init__,
    __getitem__, __setitem__, __delitem__, __len__, and insert().

    "
                :superclasses ("Sequence")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16533 16537])
                            ("index" variable nil (reparse-symbol function_parameters) [16539 16544])
                            ("value" variable nil (reparse-symbol function_parameters) [16546 16551]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16497 16579])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16620 16624])
                            ("index" variable nil (reparse-symbol function_parameters) [16626 16631]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16584 16659])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16695 16699])
                            ("index" variable nil (reparse-symbol function_parameters) [16701 16706])
                            ("value" variable nil (reparse-symbol function_parameters) [16708 16713]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16664 16805])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16821 16825])
                            ("value" variable nil (reparse-symbol function_parameters) [16827 16832]))                          )
                        (reparse-symbol indented_block_body) [16810 16944])
                    ("reverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16961 16965]))                          )
                        (reparse-symbol indented_block_body) [16949 17120])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17136 17140])
                            ("values" variable nil (reparse-symbol function_parameters) [17142 17148]))                          )
                        (reparse-symbol indented_block_body) [17125 17291])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17304 17308])
                            ("index" variable nil (reparse-symbol function_parameters) [17310 17315]))                          )
                        (reparse-symbol indented_block_body) [17296 17554])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17570 17574])
                            ("value" variable nil (reparse-symbol function_parameters) [17576 17581]))                          )
                        (reparse-symbol indented_block_body) [17559 17753])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17771 17775])
                            ("values" variable nil (reparse-symbol function_parameters) [17777 17783]))                          )
                        (reparse-symbol indented_block_body) [17758 17834]))                  
                :type "class")
                nil [16273 17834])
            ("MutableSequence" code nil nil [17835 17865]))          
      :file "_abcoll.py"
      :pointmax 17866
      :fsize 17865
      :lastmodtime '(21149 51617 852874 386000)
      :unmatched-syntax '((NAME 14305 . 14310) (IF 14321 . 14323) (ELSE 14339 . 14343)))
    (semanticdb-table "keyword.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Keywords (from \"graminit.c\")

This file is automatically generated; please don't muck it up!

To update the symbols in this file, 'cd' to the top directory of
the python source tree after building the interpreter and run:

    ./python Lib/keyword.py
\"\"\"" code nil nil [25 282])
            ("__all__" variable nil nil [284 317])
            ("kwlist" variable nil nil [319 882])
            ("iskeyword" variable nil nil [884 926])
            ("main" function nil nil [928 1958])
            ("if" code nil nil [1959 1997]))          
      :file "keyword.py"
      :pointmax 1997
      :fsize 1996
      :lastmodtime '(21149 51617 996875 53000)
      :unmatched-syntax nil)
    (semanticdb-table "heapq.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Heap queue algorithm (a.k.a. priority queue).

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

Usage:

heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged

Our API differs from textbook heap algorithms as follows:

- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.

- Our heappop() method returns the smallest item, not the largest.

These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!
\"\"\"" code nil nil [28 1297])
            ("__about__" variable nil nil [1381 6118])
            ("__all__" variable nil nil [6120 6239])
            ("itertools" include nil nil [6241 6300])
            ("operator" include nil nil [6301 6332])
            ("cmp_lt" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6345 6346])
                ("y" variable nil (reparse-symbol function_parameters) [6348 6349]))              ) nil [6334 6511])
            ("heappush" function
               (:documentation "Push item onto heap, maintaining the heap invariant."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [6525 6529])
                    ("item" variable nil (reparse-symbol function_parameters) [6531 6535]))                  )
                nil [6512 6659])
            ("heappop" function
               (:documentation "Pop the smallest item off the heap, maintaining the heap invariant."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [6672 6676]))                  )
                nil [6660 6988])
            ("heapreplace" function
               (:documentation "Pop and return the current smallest value, and add the new item.

    This is more efficient than heappop() followed by heappush(), and can be
    more appropriate when using a fixed-size heap.  Note that the value
    returned may be larger than item!  That constrains reasonable uses of
    this routine unless written as part of a conditional replacement:

        if item > heap[0]:
            item = heapreplace(heap, item)
    "
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [7005 7009])
                    ("item" variable nil (reparse-symbol function_parameters) [7011 7015]))                  )
                nil [6989 7602])
            ("heappushpop" function
               (:documentation "Fast version of a heappush followed by a heappop."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [7619 7623])
                    ("item" variable nil (reparse-symbol function_parameters) [7625 7629]))                  )
                nil [7603 7810])
            ("heapify" function
               (:documentation "Transform list into a heap, in-place, in O(len(x)) time."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7823 7824]))                  )
                nil [7811 8339])
            ("_heappushpop_max" function
               (:documentation "Maxheap version of a heappush followed by a heappop."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [8361 8365])
                    ("item" variable nil (reparse-symbol function_parameters) [8367 8371]))                  )
                nil [8340 8559])
            ("_heapify_max" function
               (:documentation "Transform list into a maxheap, in-place, in O(len(x)) time."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [8577 8578]))                  )
                nil [8560 8728])
            ("nlargest" function
               (:documentation "Find the n largest elements in a dataset.

    Equivalent to:  sorted(iterable, reverse=True)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [8742 8743])
                    ("iterable" variable nil (reparse-symbol function_parameters) [8745 8753]))                  )
                nil [8729 9153])
            ("nsmallest" function
               (:documentation "Find the n smallest elements in a dataset.

    Equivalent to:  sorted(iterable)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [9168 9169])
                    ("iterable" variable nil (reparse-symbol function_parameters) [9171 9179]))                  )
                nil [9154 9564])
            ("_siftdown" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [9748 9752])
                ("startpos" variable nil (reparse-symbol function_parameters) [9754 9762])
                ("pos" variable nil (reparse-symbol function_parameters) [9764 9767]))              ) nil [9734 10598])
            ("_siftup" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [12214 12218])
                ("pos" variable nil (reparse-symbol function_parameters) [12220 12223]))              ) nil [12202 12942])
            ("_siftdown_max" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [12961 12965])
                ("startpos" variable nil (reparse-symbol function_parameters) [12967 12975])
                ("pos" variable nil (reparse-symbol function_parameters) [12977 12980]))              ) nil [12943 13387])
            ("_siftup_max" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [13404 13408])
                ("pos" variable nil (reparse-symbol function_parameters) [13410 13413]))              ) nil [13388 14166])
            ("try" code nil nil [14204 14263])
            ("merge" function (:arguments 
              ( ("iterables" variable nil (reparse-symbol function_parameters) [14274 14284]))              ) nil [14264 15564])
            ("_nsmallest" variable nil nil [15643 15665])
            ("nsmallest" function
               (:documentation "Find the n smallest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [15680 15681])
                    ("iterable" variable nil (reparse-symbol function_parameters) [15683 15691])
                    ("key" variable nil (reparse-symbol function_parameters) [15693 15696]))                  )
                nil [15666 16817])
            ("_nlargest" variable nil nil [16818 16838])
            ("nlargest" function
               (:documentation "Find the n largest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key, reverse=True)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [16852 16853])
                    ("iterable" variable nil (reparse-symbol function_parameters) [16855 16863])
                    ("key" variable nil (reparse-symbol function_parameters) [16865 16868]))                  )
                nil [16839 18015])
            ("if" code nil nil [18016 18297]))          
      :file "heapq.py"
      :pointmax 18297
      :fsize 18296
      :lastmodtime '(21149 51617 978874 970000)
      :unmatched-syntax '((RETURN 6454 . 6460) (IF 6469 . 6471) (ELSE 6493 . 6497)))
    (semanticdb-table "_weakrefset.py"
      :major-mode 'python-mode
      :tags 
        '( ("_weakref" include nil nil [145 169])
            ("__all__" variable nil nil [171 192])
            ("_IterationGuard" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [543 582]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [483 487])
                            ("weakcontainer" variable nil (reparse-symbol function_parameters) [489 502]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [470 583])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [602 606]))                          )
                        (reparse-symbol indented_block_body) [588 723])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [741 745])
                            ("e" variable nil (reparse-symbol function_parameters) [747 748])
                            ("t" variable nil (reparse-symbol function_parameters) [750 751])
                            ("b" variable nil (reparse-symbol function_parameters) [753 754]))                          )
                        (reparse-symbol indented_block_body) [728 931]))                  
                :type "class")
                nil [195 931])
            ("WeakSet" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [999 1016])
                            ("_remove" function (:arguments 
                              ( ("item" variable nil (reparse-symbol function_parameters) [1037 1041])
                                ("selfref" variable nil (reparse-symbol function_parameters) [1043 1050]))                              ) (reparse-symbol indented_block_body) [1025 1283])
                            ("self" variable nil (reparse-symbol indented_block_body) [1291 1313])
                            ("self" variable nil (reparse-symbol indented_block_body) [1361 1388])
                            ("self" variable nil (reparse-symbol indented_block_body) [1397 1420])
                            ("if" code nil (reparse-symbol indented_block_body) [1429 1480]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [973 977])
                            ("data" variable nil (reparse-symbol function_parameters) [979 983]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [960 1480])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1506 1510]))                          )
                        (reparse-symbol indented_block_body) [1485 1630])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1648 1652]))                          )
                        (reparse-symbol indented_block_body) [1635 1830])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1847 1851]))                          )
                        (reparse-symbol indented_block_body) [1835 1914])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1936 1940])
                            ("item" variable nil (reparse-symbol function_parameters) [1942 1946]))                          )
                        (reparse-symbol indented_block_body) [1919 2071])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2091 2095]))                          )
                        (reparse-symbol indented_block_body) [2076 2194])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [2199 2214])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2228 2232])
                            ("item" variable nil (reparse-symbol function_parameters) [2234 2238]))                          )
                        (reparse-symbol indented_block_body) [2220 2359])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2374 2378]))                          )
                        (reparse-symbol indented_block_body) [2364 2478])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2492 2496]))                          )
                        (reparse-symbol indented_block_body) [2483 2535])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2548 2552]))                          )
                        (reparse-symbol indented_block_body) [2540 2881])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2897 2901])
                            ("item" variable nil (reparse-symbol function_parameters) [2903 2907]))                          )
                        (reparse-symbol indented_block_body) [2886 3017])
                    ("discard" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3034 3038])
                            ("item" variable nil (reparse-symbol function_parameters) [3040 3044]))                          )
                        (reparse-symbol indented_block_body) [3022 3155])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3171 3175])
                            ("other" variable nil (reparse-symbol function_parameters) [3177 3182]))                          )
                        (reparse-symbol indented_block_body) [3160 3316])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3333 3337])
                            ("other" variable nil (reparse-symbol function_parameters) [3339 3344]))                          )
                        (reparse-symbol indented_block_body) [3321 3394])
                    ("difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3414 3418])
                            ("other" variable nil (reparse-symbol function_parameters) [3420 3425]))                          )
                        (reparse-symbol indented_block_body) [3399 3519])
                    ("__sub__" variable nil (reparse-symbol indented_block_body) [3523 3543])
                    ("difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3571 3575])
                            ("other" variable nil (reparse-symbol function_parameters) [3577 3582]))                          )
                        (reparse-symbol indented_block_body) [3549 3614])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3631 3635])
                            ("other" variable nil (reparse-symbol function_parameters) [3637 3642]))                          )
                        (reparse-symbol indented_block_body) [3618 3875])
                    ("intersection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3897 3901])
                            ("other" variable nil (reparse-symbol function_parameters) [3903 3908]))                          )
                        (reparse-symbol indented_block_body) [3880 3981])
                    ("__and__" variable nil (reparse-symbol indented_block_body) [3985 4007])
                    ("intersection_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4037 4041])
                            ("other" variable nil (reparse-symbol function_parameters) [4043 4048]))                          )
                        (reparse-symbol indented_block_body) [4013 4080])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4097 4101])
                            ("other" variable nil (reparse-symbol function_parameters) [4103 4108]))                          )
                        (reparse-symbol indented_block_body) [4084 4269])
                    ("issubset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4287 4291])
                            ("other" variable nil (reparse-symbol function_parameters) [4293 4298]))                          )
                        (reparse-symbol indented_block_body) [4274 4364])
                    ("__le__" variable nil (reparse-symbol indented_block_body) [4368 4385])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4402 4406])
                            ("other" variable nil (reparse-symbol function_parameters) [4408 4413]))                          )
                        (reparse-symbol indented_block_body) [4391 4476])
                    ("issuperset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4496 4500])
                            ("other" variable nil (reparse-symbol function_parameters) [4502 4507]))                          )
                        (reparse-symbol indented_block_body) [4481 4575])
                    ("__ge__" variable nil (reparse-symbol indented_block_body) [4579 4598])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4615 4619])
                            ("other" variable nil (reparse-symbol function_parameters) [4621 4626]))                          )
                        (reparse-symbol indented_block_body) [4604 4689])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4705 4709])
                            ("other" variable nil (reparse-symbol function_parameters) [4711 4716]))                          )
                        (reparse-symbol indented_block_body) [4694 4864])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4880 4884])
                            ("other" variable nil (reparse-symbol function_parameters) [4886 4891]))                          )
                        (reparse-symbol indented_block_body) [4869 5033])
                    ("symmetric_difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5063 5067])
                            ("other" variable nil (reparse-symbol function_parameters) [5069 5074]))                          )
                        (reparse-symbol indented_block_body) [5038 5178])
                    ("__xor__" variable nil (reparse-symbol indented_block_body) [5182 5212])
                    ("symmetric_difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5250 5254])
                            ("other" variable nil (reparse-symbol function_parameters) [5256 5261]))                          )
                        (reparse-symbol indented_block_body) [5218 5293])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5310 5314])
                            ("other" variable nil (reparse-symbol function_parameters) [5316 5321]))                          )
                        (reparse-symbol indented_block_body) [5297 5578])
                    ("union" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5593 5597])
                            ("other" variable nil (reparse-symbol function_parameters) [5599 5604]))                          )
                        (reparse-symbol indented_block_body) [5583 5674])
                    ("__or__" variable nil (reparse-symbol indented_block_body) [5678 5692])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5713 5717])
                            ("other" variable nil (reparse-symbol function_parameters) [5719 5724]))                          )
                        (reparse-symbol indented_block_body) [5698 5777]))                  
                :type "class")
                nil [933 5777]))          
      :file "_weakrefset.py"
      :pointmax 5777
      :fsize 5776
      :lastmodtime '(21149 51618 214876 65000)
      :unmatched-syntax nil))
  :file "!usr!lib64!python2.7!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
