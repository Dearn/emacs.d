;; Object emacs-lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "emacs-lisp/"
  :tables
  (list
    (semanticdb-table "byte-run.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("macro-declaration-function" variable (:default-value (function macro-declaration-function)) nil [1223 1555])
            ("defalias" code nil nil [1557 2699])
            ("defun-declarations-alist" variable (:default-value (list (list (quote advertised-calling-convention) (function (lambda (f _args arglist when) (list (quote set-advertised-calling-convention) (list (quote quote) f) (list (quote quote) arglist) (list (quote quote) when))))) (list (quote obsolete) (function (lambda (f _args new-name when) (list (quote make-obsolete) (list (quote quote) f) (list (quote quote) new-name) (list (quote quote) when))))) (list (quote compiler-macro) (function (lambda (f args compiler-function) (\` (eval-and-compile (put (quote (\, f)) (quote compiler-macro) (\, (if (eq (car-safe compiler-function) (quote lambda)) (\` (lambda (\, (append (cadr compiler-function) args)) (\,@ (cddr compiler-function)))) (\` (function (\, compiler-function))))))))))) (list (quote doc-string) (function (lambda (f _args pos) (list (quote put) (list (quote quote) f) (quote (quote doc-string-elt)) (list (quote quote) pos))))) (list (quote indent) (function (lambda (f _args val) (list (quote put) (list (quote quote) f) (quote (quote lisp-indent-function)) (list (quote quote) val))))))) nil [2896 4508])
            ("macro-declarations-alist" variable (:default-value (cons (list (quote debug) (function (lambda (name _args spec) (list (quote progn) :autoload-end (list (quote put) (list (quote quote) name) (quote (quote edebug-form-spec)) (list (quote quote) spec)))))) defun-declarations-alist)) nil [4510 5137])
            ("put" code nil nil [5139 5172])
            ("put" code nil nil [5173 5212])
            ("defalias" code nil nil [5213 6932])
            ("defun" function (:arguments ("name" "arglist" "docstring" "body")) nil [6981 9358])
            ("fset" code nil nil [9464 9485])
            ("defsubst" function (:arguments ("name" "arglist" "body")) nil [10496 10967])
            ("advertised-signature-table" variable (:default-value (make-hash-table :test (quote eq) :weakness (quote key))) nil [10969 11047])
            ("set-advertised-calling-convention" function (:arguments ("function" "signature" "_when")) nil [11049 11419])
            ("make-obsolete" function (:arguments ("obsolete-name" "current-name" "when")) nil [11421 12314])
            ("define-obsolete-function-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [12316 13133])
            ("make-obsolete-variable" function (:arguments ("obsolete-name" "current-name" "when" "access-type")) nil [13135 13966])
            ("define-obsolete-variable-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [13969 15664])
            ("define-obsolete-face-alias" function (:arguments ("obsolete-face" "current-face" "when")) nil [15994 16380])
            ("dont-compile" function (:arguments ("body")) nil [16382 16691])
            ("eval-when-compile" function (:arguments ("body")) nil [16934 17295])
            ("eval-and-compile" function (:arguments ("body")) nil [17297 17675])
            ("with-no-warnings" function (:arguments ("body")) nil [17677 17885])
            ("make-obsolete-variable" code nil nil [19180 19289])
            ("make-obsolete" code nil nil [19290 19381]))          
      :file "byte-run.el"
      :pointmax 19409
      :fsize 19408
      :lastmodtime '(21187 50982 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "cl.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1047 1064])
            ("macroexp" include nil nil [1065 1084])
            ("cl-unload-function" function nil nil [3580 3738])
            ("dolist" code nil nil [3775 4488])
            ("dolist" code nil nil [4490 9681])
            ("cl--wrap-in-nil-block" function (:arguments ("fun" "args")) nil [9683 9765])
            ("advice-add" code nil nil [9766 9818])
            ("advice-add" code nil nil [9819 9872])
            ("cl--pass-args-to-cl-declare" function (:arguments ("specs")) nil [9874 9962])
            ("advice-add" code nil nil [9963 10021])
            ("cl-closure-vars" variable nil nil [10181 10209])
            ("cl--function-convert-cache" variable nil nil [10210 10249])
            ("cl--function-convert" function (:arguments ("f")) nil [10251 12564])
            ("lexical-let" function (:arguments ("bindings" "body")) nil [12566 14596])
            ("lexical-let*" function (:arguments ("bindings" "body")) nil [14598 15128])
            ("flet" function (:arguments ("bindings" "body")) nil [15207 16961])
            ("labels" function (:arguments ("bindings" "body")) nil [16963 17907])
            ("cl--gv-adapt" function (:arguments ("cl-gv" "do")) nil [18103 18993])
            ("define-setf-expander" function (:arguments ("name" "arglist" "body")) nil [18995 19898])
            ("defsetf" function (:arguments ("name" "arg1" "args")) nil [19900 21515])
            ("make-obsolete" code nil nil [23429 23481])
            ("define-modify-macro" function (:arguments ("name" "arglist" "func" "doc")) nil [23483 24242])
            ("define-obsolete-function-alias" code nil nil [24344 24412])
            ("define-obsolete-variable-alias" code nil nil [24413 24505])
            ("define-obsolete-function-alias" code nil nil [24506 24582])
            ("cl-not-hash-table" function (:arguments ("x" "y" "_z")) nil [24720 24869])
            ("cl-builtin-gethash" variable (:default-value (symbol-function (quote gethash))) nil [24871 24925])
            ("make-obsolete-variable" code nil nil [24926 24981])
            ("cl-builtin-remhash" variable (:default-value (symbol-function (quote remhash))) nil [24982 25036])
            ("make-obsolete-variable" code nil nil [25037 25092])
            ("cl-builtin-clrhash" variable (:default-value (symbol-function (quote clrhash))) nil [25093 25147])
            ("make-obsolete-variable" code nil nil [25148 25203])
            ("cl-builtin-maphash" variable (:default-value (symbol-function (quote maphash))) nil [25204 25258])
            ("make-obsolete-variable" code nil nil [25260 25315])
            ("define-obsolete-function-alias" code nil nil [25316 25382])
            ("define-obsolete-function-alias" code nil nil [25383 25447])
            ("define-obsolete-function-alias" code nil nil [25448 25508])
            ("define-obsolete-function-alias" code nil nil [25509 25569])
            ("define-obsolete-function-alias" code nil nil [25570 25630])
            ("define-obsolete-function-alias" code nil nil [25631 25691])
            ("define-obsolete-function-alias" code nil nil [25692 25752])
            ("define-obsolete-function-alias" code nil nil [25753 25829])
            ("define-obsolete-function-alias" code nil nil [25830 25900])
            ("define-obsolete-function-alias" code nil nil [25901 25979])
            ("define-obsolete-function-alias" code nil nil [25981 26077])
            ("define-obsolete-function-alias" code nil nil [26078 26154])
            ("define-obsolete-function-alias" code nil nil [26155 26228])
            ("define-obsolete-function-alias" code nil nil [26229 26295])
            ("cl-maclisp-member" function (:arguments ("item" "list")) nil [26297 26452])
            ("cl-struct-setf-expander" function (:arguments ("x" "name" "accessor" "pred-form" "pos")) nil [26503 27437])
            ("cl" package nil nil [27439 27452])
            ("run-hooks" code nil nil [27454 27479]))          
      :file "cl.el"
      :pointmax 27501
      :fsize 27502
      :lastmodtime '(21187 50982 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "cl-lib.el"
      :file "cl-lib.el"
      :fsize 28016
      :lastmodtime '(21187 50982 0 0))
    (semanticdb-table "macroexp.el"
      :file "macroexp.el"
      :fsize 18827
      :lastmodtime '(21187 50982 0 0))
    (semanticdb-table "derived.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("derived-mode-hook-name" function (:arguments ("mode")) nil [4233 4373])
            ("derived-mode-map-name" function (:arguments ("mode")) nil [4375 4507])
            ("derived-mode-syntax-table-name" function (:arguments ("mode")) nil [4509 4668])
            ("derived-mode-abbrev-table-name" function (:arguments ("mode")) nil [4670 4830])
            ("define-derived-mode" function (:arguments ("child" "parent" "name" "docstring" "body")) nil [4920 11142])
            ("derived-mode-class" function (:arguments ("mode")) nil [11199 11643])
            ("derived-mode-make-docstring" function (:arguments ("parent" "child" "docstring" "syntax" "abbrev")) nil [11660 13644])
            ("derived-mode-setup-function-name" function (:arguments ("mode")) nil [13804 13960])
            ("derived-mode-init-mode-variables" function (:arguments ("mode")) nil [14030 15247])
            ("derived-mode-set-keymap" function (:arguments ("mode")) nil [15300 15695])
            ("derived-mode-set-syntax-table" function (:arguments ("mode")) nil [15697 16123])
            ("derived-mode-set-abbrev-table" function (:arguments ("mode")) nil [16125 16512])
            ("derived-mode-run-hooks" function (:arguments ("mode")) nil [16514 16700])
            ("derived-mode-merge-keymaps" function (:arguments ("old" "new")) nil [16742 17889])
            ("derived-mode-merge-syntax-tables" function (:arguments ("old" "new")) nil [17891 18099])
            ("derived-mode-merge-abbrev-tables" function (:arguments ("old" "new")) nil [18371 18633])
            ("derived" package nil nil [18635 18653]))          
      :file "derived.el"
      :pointmax 18680
      :fsize 18679
      :lastmodtime '(21187 50982 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "package.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [7284 7301])
            ("tabulated-list" include nil nil [7304 7329])
            ("package" customgroup (:user-visible-flag t) nil [7331 7431])
            ("package-enable-at-startup" variable (:default-value t) nil [7448 7891])
            ("package-load-list" variable (:default-value (quote (all))) nil [7893 8637])
            ("Info-directory-list" variable nil nil [8639 8667])
            ("declare-function" code nil nil [8668 8712])
            ("declare-function" code nil nil [8713 8769])
            ("declare-function" code nil nil [8770 8828])
            ("declare-function" code nil nil [8829 8877])
            ("declare-function" code nil nil [8878 8938])
            ("url-http-end-of-headers" variable nil nil [8939 8971])
            ("declare-function" code nil nil [8972 9028])
            ("url-http-target-url" variable nil nil [9029 9057])
            ("package-archives" variable (:default-value (quote (("gnu" . "http://elpa.gnu.org/packages/")))) nil [9059 9810])
            ("package-pinned-packages" variable nil nil [9812 10363])
            ("package-archive-version" variable
               (:constant-flag t
                :default-value 1)
                nil [10365 10537])
            ("package-archive-contents" variable nil nil [10602 10798])
            ("put" code nil nil [10799 10854])
            ("package-user-dir" variable (:default-value (locate-user-emacs-file "elpa")) nil [10856 11176])
            ("package-directory-list" variable (:default-value (let (result) (dolist (f load-path) (and (stringp f) (equal (file-name-nondirectory f) "site-lisp") (push (expand-file-name "elpa" f) result))) (nreverse result))) nil [11178 11773])
            ("package-check-signature" variable (:default-value (quote allow-unsigned)) nil [11775 12054])
            ("package-unsigned-archives" variable nil nil [12056 12250])
            ("package--default-summary" variable (:default-value "No description available.") nil [12252 12313])
            ("cl-defstruct" code nil nil [12315 15040])
            ("package-desc-full-name" function (:arguments ("pkg-desc")) nil [15060 15224])
            ("package-desc-suffix" function (:arguments ("pkg-desc")) nil [15226 15392])
            ("package-desc--keywords" function (:arguments ("pkg-desc")) nil [15394 15592])
            ("cl-defstruct" code nil nil [15668 15827])
            ("package--builtins" variable nil nil [15829 16175])
            ("put" code nil nil [16176 16224])
            ("package-alist" variable nil nil [16226 16659])
            ("put" code nil nil [16660 16704])
            ("package-activated-list" variable nil nil [16706 16861])
            ("put" code nil nil [16862 16915])
            ("package-version-join" function (:arguments ("vlist")) nil [16917 17888])
            ("package-load-descriptor" function (:arguments ("pkg-dir")) nil [17890 18551])
            ("package-load-all-descriptors" function nil nil [18553 19263])
            ("package-disabled-p" function (:arguments ("pkg-name" "version")) nil [19265 19994])
            ("package-activate-1" function (:arguments ("pkg-desc")) nil [19996 21086])
            ("package-built-in-p" function (:arguments ("package" "min-version")) nil [21088 21681])
            ("package--from-builtin" function (:arguments ("bi-desc")) nil [21683 21937])
            ("package-activate" function (:arguments ("package" "force")) nil [22180 23645])
            ("define-package" function (:arguments ("_name-string" "_version-string" "_docstring" "_requirements" "_extra-properties")) nil [23647 24295])
            ("package-process-define-package" function (:arguments ("exp" "origin")) nil [24297 25190])
            ("package-autoload-ensure-default-file" function (:arguments ("file")) nil [25247 25893])
            ("generated-autoload-file" variable nil nil [25895 25927])
            ("version-control" variable nil nil [25928 25952])
            ("package-generate-autoloads" function (:arguments ("name" "pkg-dir")) nil [25954 26414])
            ("tar-parse-info" variable nil nil [26416 26439])
            ("declare-function" code nil nil [26440 26489])
            ("declare-function" code nil nil [26490 26550])
            ("declare-function" code nil nil [26551 26616])
            ("package-untar-buffer" function (:arguments ("dir")) nil [26618 27444])
            ("package-generate-description-file" function (:arguments ("pkg-desc" "pkg-dir")) nil [27446 28584])
            ("package--alist-to-plist" function (:arguments ("alist")) nil [28586 28703])
            ("package-unpack" function (:arguments ("pkg-desc")) nil [28705 29944])
            ("package--make-autoloads-and-stuff" function (:arguments ("pkg-desc" "pkg-dir")) nil [29946 30372])
            ("package--compile" function (:arguments ("pkg-desc")) nil [30374 30547])
            ("package--write-file-no-coding" function (:arguments ("file-name")) nil [30549 30716])
            ("package--with-work-buffer" function (:arguments ("location" "file" "body")) nil [30718 31904])
            ("package-handle-response" function nil nil [31906 32537])
            ("package--archive-file-exists-p" function (:arguments ("location" "file")) nil [32539 32799])
            ("declare-function" code nil nil [32801 32973])
            ("declare-function" code nil nil [32974 33049])
            ("declare-function" code nil nil [33050 33143])
            ("declare-function" code nil nil [33144 33206])
            ("declare-function" code nil nil [33207 33264])
            ("declare-function" code nil nil [33265 33325])
            ("package--check-signature" function (:arguments ("location" "file")) nil [33327 34455])
            ("package-install-from-archive" function (:arguments ("pkg-desc")) nil [34457 35984])
            ("package--initialized" variable nil nil [35986 36019])
            ("package-installed-p" function (:arguments ("package" "min-version")) nil [36021 36506])
            ("package-compute-transaction" function (:arguments ("packages" "requirements")) nil [36508 39746])
            ("package-read-from-string" function (:arguments ("str")) nil [39748 40219])
            ("package--read-archive-file" function (:arguments ("file")) nil [40221 40820])
            ("package-read-all-archive-contents" function nil nil [40822 41085])
            ("package-read-archive-contents" function (:arguments ("archive")) nil [41087 41612])
            ("cl-defstruct" code nil nil [41776 41989])
            ("package--add-to-archive-contents" function (:arguments ("package" "archive")) nil [41991 43863])
            ("package-download-transaction" function (:arguments ("packages")) nil [43865 44206])
            ("package-install" function
               (:user-visible-flag t
                :arguments ("pkg"))
                nil [44223 45179])
            ("package-strip-rcs-id" function (:arguments ("str")) nil [45181 45553])
            ("declare-function" code nil nil [45555 45613])
            ("package--prepare-dependencies" function (:arguments ("deps")) nil [45615 46214])
            ("package-buffer-info" function nil nil [46216 47754])
            ("declare-function" code nil nil [47756 47816])
            ("declare-function" code nil nil [47817 47872])
            ("package-tar-file-info" function nil nil [47874 48944])
            ("package-install-from-buffer" function (:user-visible-flag t) nil [48962 49685])
            ("package-install-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [49702 50019])
            ("package-delete" function (:arguments ("pkg-desc")) nil [50021 50935])
            ("package-archive-base" function (:arguments ("desc")) nil [50937 51085])
            ("package--download-one-archive" function (:arguments ("archive" "file")) nil [51087 52600])
            ("declare-function" code nil nil [52602 52696])
            ("declare-function" code nil nil [52697 52749])
            ("declare-function" code nil nil [52750 52815])
            ("package-import-keyring" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [52832 53330])
            ("package-refresh-contents" function (:user-visible-flag t) nil [53347 54278])
            ("package-initialize" function
               (:user-visible-flag t
                :arguments ("no-activate"))
                nil [54295 54762])
            ("describe-package" function
               (:user-visible-flag t
                :arguments ("package"))
                nil [54815 56106])
            ("describe-package-1" function (:arguments ("pkg")) nil [56108 62701])
            ("package-install-button-action" function (:arguments ("button")) nil [62703 63013])
            ("package-keyword-button-action" function (:arguments ("button")) nil [63015 63175])
            ("package-make-button" function (:arguments ("text" "props")) nil [63177 63646])
            ("package-menu-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap "Package"))) (set-keymap-parent map tabulated-list-mode-map) (define-key map "" (quote package-menu-describe-package)) (define-key map "u" (quote package-menu-mark-unmark)) (define-key map "" (quote package-menu-backup-unmark)) (define-key map "d" (quote package-menu-mark-delete)) (define-key map "i" (quote package-menu-mark-install)) (define-key map "U" (quote package-menu-mark-upgrades)) (define-key map "r" (quote package-menu-refresh)) (define-key map "f" (quote package-menu-filter-interactive)) (define-key map "~" (quote package-menu-mark-obsolete-for-deletion)) (define-key map "x" (quote package-menu-execute)) (define-key map "h" (quote package-menu-quick-help)) (define-key map "?" (quote package-menu-describe-package)) (define-key map [menu-bar package-menu] (cons "Package" menu-map)) (define-key menu-map [mq] (quote (menu-item "Quit" quit-window :help "Quit package selection"))) (define-key menu-map [mf] (quote (menu-item "Filter" package-menu-filter-interactive :help "Filter package selection (q to go back)"))) (define-key menu-map [s1] (quote ("--"))) (define-key menu-map [mn] (quote (menu-item "Next" next-line :help "Next Line"))) (define-key menu-map [mp] (quote (menu-item "Previous" previous-line :help "Previous Line"))) (define-key menu-map [s2] (quote ("--"))) (define-key menu-map [mu] (quote (menu-item "Unmark" package-menu-mark-unmark :help "Clear any marks on a package and move to the next line"))) (define-key menu-map [munm] (quote (menu-item "Unmark Backwards" package-menu-backup-unmark :help "Back up one line and clear any marks on that package"))) (define-key menu-map [md] (quote (menu-item "Mark for Deletion" package-menu-mark-delete :help "Mark a package for deletion and move to the next line"))) (define-key menu-map [mi] (quote (menu-item "Mark for Install" package-menu-mark-install :help "Mark a package for installation and move to the next line"))) (define-key menu-map [mupgrades] (quote (menu-item "Mark Upgradable Packages" package-menu-mark-upgrades :help "Mark packages that have a newer version for upgrading"))) (define-key menu-map [s3] (quote ("--"))) (define-key menu-map [mg] (quote (menu-item "Update Package List" revert-buffer :help "Update the list of packages"))) (define-key menu-map [mr] (quote (menu-item "Refresh Package List" package-menu-refresh :help "Download the ELPA archive"))) (define-key menu-map [s4] (quote ("--"))) (define-key menu-map [mt] (quote (menu-item "Mark Obsolete Packages" package-menu-mark-obsolete-for-deletion :help "Mark all obsolete packages for deletion"))) (define-key menu-map [mx] (quote (menu-item "Execute Actions" package-menu-execute :help "Perform all the marked actions"))) (define-key menu-map [s5] (quote ("--"))) (define-key menu-map [mh] (quote (menu-item "Help" package-menu-quick-help :help "Show short key binding help for package-menu-mode"))) (define-key menu-map [mc] (quote (menu-item "View Commentary" package-menu-view-commentary :help "Display information about this package"))) map)) nil [63675 66909])
            ("package-menu--new-package-list" variable nil nil [66911 67030])
            ("define-derived-mode" code nil nil [67032 67765])
            ("package--push" function (:arguments ("pkg-desc" "status" "listname")) nil [67767 68135])
            ("package-list-unversioned" variable nil nil [68137 68251])
            ("package-desc-status" function (:arguments ("pkg-desc")) nil [68253 69628])
            ("package-menu--refresh" function (:arguments ("packages" "keywords")) nil [69630 71350])
            ("package-all-keywords" function nil nil [71352 71642])
            ("package--mapc" function (:arguments ("function" "packages")) nil [71644 72889])
            ("package--has-keyword-p" function (:arguments ("desc" "keywords")) nil [72891 73310])
            ("package-menu--generate" function (:arguments ("remember-pos" "packages" "keywords")) nil [73312 74112])
            ("package-menu--print-info" function (:arguments ("pkg")) nil [74114 75537])
            ("package-menu-refresh" function (:user-visible-flag t) nil [75539 75910])
            ("package-menu-describe-package" function
               (:user-visible-flag t
                :arguments ("button"))
                nil [75912 76267])
            ("package-menu-mark-delete" function
               (:user-visible-flag t
                :arguments ("_num"))
                nil [76295 76558])
            ("package-menu-mark-install" function
               (:user-visible-flag t
                :arguments ("_num"))
                nil [76560 76812])
            ("package-menu-mark-unmark" function
               (:user-visible-flag t
                :arguments ("_num"))
                nil [76814 76976])
            ("package-menu-backup-unmark" function (:user-visible-flag t) nil [76978 77140])
            ("package-menu-mark-obsolete-for-deletion" function (:user-visible-flag t) nil [77142 77433])
            ("package-menu-quick-help" function (:user-visible-flag t) nil [77435 77614])
            ("define-obsolete-function-alias" code nil nil [77616 77718])
            ("package-menu-get-status" function nil nil [77720 77893])
            ("package-menu--find-upgrades" function nil nil [77895 78790])
            ("package-menu-mark-upgrades" function (:user-visible-flag t) nil [78792 79811])
            ("package-menu-execute" function
               (:user-visible-flag t
                :arguments ("noquery"))
                nil [79813 81745])
            ("package-menu--version-predicate" function (:arguments ("A" "B")) nil [81747 81967])
            ("package-menu--status-predicate" function (:arguments ("A" "B")) nil [81969 82595])
            ("package-menu--description-predicate" function (:arguments ("A" "B")) nil [82597 82786])
            ("package-menu--name-predicate" function (:arguments ("A" "B")) nil [82788 82930])
            ("package-menu--archive-predicate" function (:arguments ("A" "B")) nil [82932 83071])
            ("list-packages" function
               (:user-visible-flag t
                :arguments ("no-fetch"))
                nil [83088 84673])
            ("defalias" code nil nil [84690 84738])
            ("package-show-package-list" function
               (:user-visible-flag t
                :arguments ("packages" "keywords"))
                nil [84761 85349])
            ("package-menu-filter-interactive" function
               (:user-visible-flag t
                :arguments ("keyword"))
                nil [85351 85557])
            ("package-list-packages-no-fetch" function (:user-visible-flag t) nil [85559 85785])
            ("package" package nil nil [85787 85805]))          
      :file "package.el"
      :pointmax 85832
      :fsize 85831
      :lastmodtime '(21216 6789 0 0)
      :unmatched-syntax '((close-paren 7301 . 7302) (symbol 7266 . 7283) (open-paren 7265 . 7266)))
    (semanticdb-table "tabulated-list.el"
      :file "tabulated-list.el"
      :fsize 21392
      :lastmodtime '(21187 50982 0 0))
    (semanticdb-table "generic.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("pcase" include nil nil [3549 3565])
            ("define-obsolete-variable-alias" code nil nil [3713 3810])
            ("generic-font-lock-keywords" variable nil nil [3811 3907])
            ("make-variable-buffer-local" code nil nil [3908 3964])
            ("generic-mode-list" variable nil nil [3981 4145])
            ("define-generic-mode" function (:arguments ("mode" "comment-list" "keyword-list" "font-lock-list" "auto-mode-list" "function-list" "docstring")) nil [4298 6771])
            ("generic-mode-internal" function (:arguments ("mode" "comment-list" "keyword-list" "font-lock-list" "function-list")) nil [6788 7716])
            ("generic-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [7733 8214])
            ("generic--normalize-comments" function (:arguments ("comment-list")) nil [8243 8698])
            ("generic-set-comment-syntax" function (:arguments ("st" "comment-list")) nil [8700 10462])
            ("generic-set-comment-vars" function (:arguments ("comment-list")) nil [10464 10962])
            ("generic-mode-set-comments" function (:arguments ("comment-list")) nil [10964 11283])
            ("generic-bracket-support" function nil nil [11285 11506])
            ("generic-make-keywords-list" function (:arguments ("keyword-list" "face" "prefix" "suffix")) nil [11523 12245])
            ("generic" package nil nil [12247 12265]))          
      :file "generic.el"
      :pointmax 12292
      :fsize 12291
      :lastmodtime '(21202 10279 0 0)
      :unmatched-syntax '((close-paren 3565 . 3566) (symbol 3531 . 3548) (open-paren 3530 . 3531)))
    (semanticdb-table "pcase.el"
      :file "pcase.el"
      :fsize 35050
      :lastmodtime '(21190 16190 0 0))
    (semanticdb-table "easy-mmode.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("easy-mmode-pretty-mode-name" function (:arguments ("mode" "lighter")) nil [2074 3502])
            ("defalias" code nil nil [3519 3578])
            ("define-minor-mode" function (:arguments ("mode" "doc" "init-value" "lighter" "keymap" "body")) nil [3594 13517])
            ("defalias" code nil nil [13571 13642])
            ("defalias" code nil nil [13658 13724])
            ("define-globalized-minor-mode" function (:arguments ("global-mode" "mode" "turn-on" "keys")) nil [13740 19238])
            ("easy-mmode-set-keymap-parents" function (:arguments ("m" "parents")) nil [19271 19411])
            ("easy-mmode-define-keymap" function (:arguments ("bs" "name" "m" "args")) nil [19428 21138])
            ("easy-mmode-defmap" function (:arguments ("m" "bs" "doc" "args")) nil [21155 21487])
            ("easy-mmode-define-syntax" function (:arguments ("css" "args")) nil [21525 21967])
            ("easy-mmode-defsyntax" function (:arguments ("st" "css" "doc" "args")) nil [21984 22297])
            ("easy-mmode-define-navigation" function (:arguments ("base" "re" "name" "endfun" "narrowfun" "body")) nil [22344 25290])
            ("easy-mmode" package nil nil [25293 25314]))          
      :file "easy-mmode.el"
      :pointmax 25344
      :fsize 25343
      :lastmodtime '(21187 50982 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "advice.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("macroexp" include nil nil [68018 68037])
            ("cl-lib" include nil nil [68135 68152])
            ("advice" customgroup (:user-visible-flag t) nil [68212 68372])
            ("ad-version" variable
               (:constant-flag t
                :default-value "2.14")
                nil [68374 68402])
            ("ad-redefinition-action" variable (:default-value (quote warn)) nil [68419 69185])
            ("ad-default-compilation-action" variable (:default-value (quote maybe)) nil [69202 69870])
            ("ad-substitute-tree" function (:arguments ("sUbTrEe-TeSt" "fUnCtIoN" "tReE")) nil [70046 70914])
            ("ad-advised-functions" variable nil nil [71592 71625])
            ("ad-pushnew-advised-function" function (:arguments ("function")) nil [71627 71914])
            ("ad-pop-advised-function" function (:arguments ("function")) nil [71916 72131])
            ("ad-do-advised-functions" function (:arguments ("varform" "body")) nil [72133 72525])
            ("ad-get-advice-info" function (:arguments ("function")) nil [72527 72597])
            ("ad-get-advice-info-macro" function (:arguments ("function")) nil [72599 72680])
            ("ad-set-advice-info" function (:arguments ("function" "advice-info")) nil [72682 73055])
            ("ad-copy-advice-info" function (:arguments ("function")) nil [73057 73145])
            ("ad-is-advised" function (:arguments ("function")) nil [73147 73344])
            ("ad-initialize-advice-info" function (:arguments ("function")) nil [73346 73582])
            ("ad-get-advice-info-field" function (:arguments ("function" "field")) nil [73584 73757])
            ("ad-set-advice-info-field" function (:arguments ("function" "field" "value")) nil [73759 74254])
            ("ad-is-active" function (:arguments ("function")) nil [74316 74450])
            ("ad-make-advice" function (:arguments ("name" "protect" "enable" "definition")) nil [74592 74953])
            ("ad-advice-name" function (:arguments ("advice")) nil [75053 75100])
            ("ad-advice-protected" function (:arguments ("advice")) nil [75101 75155])
            ("ad-advice-enabled" function (:arguments ("advice")) nil [75156 75208])
            ("ad-advice-definition" function (:arguments ("advice")) nil [75209 75264])
            ("ad-advice-set-enabled" function (:arguments ("advice" "flag")) nil [75266 75344])
            ("ad-advice-classes" variable (:default-value (quote (before around after activation deactivation))) nil [75346 75455])
            ("ad-class-p" function (:arguments ("thing")) nil [75457 75516])
            ("ad-name-p" function (:arguments ("thing")) nil [75517 75572])
            ("ad-position-p" function (:arguments ("thing")) nil [75573 75658])
            ("ad-has-enabled-advice" function (:arguments ("function" "class")) nil [75724 75953])
            ("ad-has-redefining-advice" function (:arguments ("function")) nil [75955 76315])
            ("ad-has-any-advice" function (:arguments ("function")) nil [76317 76569])
            ("ad-get-enabled-advices" function (:arguments ("function" "class")) nil [76571 76870])
            ("defalias" code nil nil [77346 77391])
            ("ad-make-advicefunname" function (:arguments ("function")) nil [77393 77541])
            ("ad-get-orig-definition" function (:arguments ("function")) nil [77543 77844])
            ("ad-clear-advicefunname-definition" function (:arguments ("function")) nil [77846 78050])
            ("declare-function" code nil nil [78124 78175])
            ("ad-read-advised-function" function (:arguments ("prompt" "predicate" "default")) nil [78177 79767])
            ("ad-advice-class-completion-table" variable (:default-value (mapcar (lambda (class) (list (symbol-name class))) ad-advice-classes)) nil [79769 79886])
            ("ad-read-advice-class" function (:arguments ("function" "prompt" "default")) nil [79888 80585])
            ("ad-read-advice-name" function (:arguments ("function" "class" "prompt")) nil [80587 81320])
            ("ad-read-advice-specification" function (:arguments ("prompt")) nil [81322 81728])
            ("ad-last-regexp" variable nil nil [81767 81793])
            ("ad-read-regexp" function (:arguments ("prompt")) nil [81795 82136])
            ("ad-find-advice" function (:arguments ("function" "class" "name")) nil [82266 82431])
            ("ad-advice-position" function (:arguments ("function" "class" "name")) nil [82433 82747])
            ("ad-find-some-advice" function (:arguments ("function" "class" "name")) nil [82749 83499])
            ("ad-enable-advice-internal" function (:arguments ("function" "class" "name" "flag")) nil [83501 84469])
            ("ad-enable-advice" function
               (:user-visible-flag t
                :arguments ("function" "class" "name"))
                nil [84486 84905])
            ("ad-disable-advice" function
               (:user-visible-flag t
                :arguments ("function" "class" "name"))
                nil [84922 85347])
            ("ad-enable-regexp-internal" function (:arguments ("regexp" "class" "flag")) nil [85349 85831])
            ("ad-enable-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [85833 86251])
            ("ad-disable-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [86253 86676])
            ("ad-remove-advice" function
               (:user-visible-flag t
                :arguments ("function" "class" "name"))
                nil [86678 87335])
            ("ad-add-advice" function (:arguments ("function" "advice" "class" "position")) nil [87352 89437])
            ("ad-macrofy" function (:arguments ("definition")) nil [89551 89680])
            ("ad-lambdafy" function (:arguments ("definition")) nil [89682 89804])
            ("ad-lambda-p" function (:arguments ("definition")) nil [89806 89932])
            ("ad-advice-p" function (:arguments ("definition")) nil [89994 90118])
            ("ad-compiled-p" function (:arguments ("definition")) nil [90120 90360])
            ("ad-compiled-code" function (:arguments ("compiled-definition")) nil [90362 90571])
            ("ad-lambda-expression" function (:arguments ("definition")) nil [90573 90841])
            ("ad-arglist" function (:arguments ("definition")) nil [90843 91083])
            ("ad-docstring" function (:arguments ("definition")) nil [91085 91386])
            ("ad-interactive-form" function (:arguments ("definition")) nil [91388 91647])
            ("ad-body-forms" function (:arguments ("definition")) nil [91649 91945])
            ("ad-definition-type" function (:arguments ("definition")) nil [91947 92458])
            ("ad-has-proper-definition" function (:arguments ("function")) nil [92492 92760])
            ("ad-real-definition" function (:arguments ("function")) nil [92890 93174])
            ("ad-real-orig-definition" function (:arguments ("function")) nil [93176 93346])
            ("ad-is-compilable" function (:arguments ("function")) nil [93348 93649])
            ("warning-suppress-types" variable nil nil [93651 93682])
            ("ad-compile-function" function (:arguments ("function")) nil [93710 94132])
            ("ad-parse-arglist" function (:arguments ("arglist")) nil [94201 94863])
            ("ad-retrieve-args-form" function (:arguments ("arglist")) nil [94865 95768])
            ("ad-arg-binding-field" function (:arguments ("binding" "field")) nil [95770 95943])
            ("ad-list-access" function (:arguments ("position" "list")) nil [95945 96083])
            ("ad-element-access" function (:arguments ("position" "list")) nil [96085 96237])
            ("ad-access-argument" function (:arguments ("arglist" "index")) nil [96239 96789])
            ("ad-get-argument" function (:arguments ("arglist" "index")) nil [96791 97125])
            ("ad-set-argument" function (:arguments ("arglist" "index" "value-form")) nil [97127 97718])
            ("ad-get-arguments" function (:arguments ("arglist" "index")) nil [97720 98343])
            ("ad-set-arguments" function (:arguments ("arglist" "index" "values-form")) nil [98345 99956])
            ("ad-insert-argument-access-forms" function (:arguments ("definition" "arglist")) nil [99958 100866])
            ("ad-map-arglists" function (:arguments ("source-arglist" "target-arglist")) nil [101300 103339])
            ("ad-make-single-advice-docstring" function (:arguments ("advice" "class" "style")) nil [103957 104412])
            ("help-fns" include nil nil [104414 104433])
            ("ad--make-advised-docstring" function (:arguments ("function" "style")) nil [104489 106055])
            ("ad-advised-arglist" function (:arguments ("function")) nil [106179 106599])
            ("ad-advised-interactive-form" function (:arguments ("function")) nil [106601 107071])
            ("ad-make-advised-definition" function (:arguments ("function")) nil [107138 108120])
            ("ad-assemble-advised-definition" function (:arguments ("args" "docstring" "interactive" "orig" "befores" "arounds" "afters")) nil [108122 110984])
            ("ad-make-hook-form" function (:arguments ("function" "hook-name")) nil [111039 111383])
            ("ad-get-cache-definition" function (:arguments ("function")) nil [114695 114793])
            ("ad-get-cache-id" function (:arguments ("function")) nil [114795 114885])
            ("ad-set-cache" function (:arguments ("function" "definition" "id")) nil [114887 115009])
            ("ad-clear-cache" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [115011 115341])
            ("ad-make-cache-id" function (:arguments ("function")) nil [115343 116143])
            ("ad-get-cache-class-id" function (:arguments ("function" "class")) nil [116145 116417])
            ("ad-verify-cache-class-id" function (:arguments ("cache-class-id" "advices")) nil [116419 116688])
            ("ad-cache-id-verification-code" function (:arguments ("function")) nil [117086 118189])
            ("ad-verify-cache-id" function (:arguments ("function")) nil [118191 118358])
            ("ad-preactivate-advice" function (:arguments ("function" "advice" "class" "position")) nil [119683 120601])
            ("ad-should-compile" function (:arguments ("function" "compile")) nil [120689 121541])
            ("ad-activate-advised-definition" function (:arguments ("function" "compile")) nil [121543 123272])
            ("ad--defalias-fset" function (:arguments ("fsetfun" "function" "newdef")) nil [123274 125254])
            ("ad-activate" function
               (:user-visible-flag t
                :arguments ("function" "compile"))
                nil [125349 127113])
            ("defalias" code nil nil [127115 127154])
            ("ad-deactivate" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [127156 128009])
            ("ad-update" function
               (:user-visible-flag t
                :arguments ("function" "compile"))
                nil [128011 128367])
            ("ad-unadvise" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [128369 128807])
            ("ad-recover" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [128809 129472])
            ("ad-activate-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "compile"))
                nil [129474 130005])
            ("ad-deactivate-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [130007 130429])
            ("ad-update-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "compile"))
                nil [130431 130956])
            ("ad-activate-all" function
               (:user-visible-flag t
                :arguments ("compile"))
                nil [130958 131211])
            ("ad-deactivate-all" function (:user-visible-flag t) nil [131213 131373])
            ("ad-update-all" function
               (:user-visible-flag t
                :arguments ("compile"))
                nil [131375 131613])
            ("ad-unadvise-all" function (:user-visible-flag t) nil [131615 131769])
            ("ad-recover-all" function (:user-visible-flag t) nil [131771 132216])
            ("ad-defadvice-flags" variable (:default-value (quote (("protect") ("disable") ("activate") ("compile") ("preactivate")))) nil [132266 132367])
            ("defadvice" function (:arguments ("function" "args" "body")) nil [132384 137274])
            ("ad-with-originals" function (:arguments ("functions" "body")) nil [137304 138913])
            ("ad-recover-normality" function (:user-visible-flag t) nil [139059 139362])
            ("advice" package nil nil [139364 139381]))          
      :file "advice.el"
      :pointmax 139407
      :fsize 139406
      :lastmodtime '(21190 19638 0 0)
      :unmatched-syntax '((close-paren 68152 . 68153) (symbol 68117 . 68134) (open-paren 68116 . 68117)))
    (semanticdb-table "lisp.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("defun-prompt-regexp" variable nil nil [1081 1330])
            ("make-variable-buffer-local" code nil nil [1331 1380])
            ("parens-require-spaces" variable (:default-value t) nil [1382 1571])
            ("forward-sexp-function" variable nil nil [1573 2074])
            ("forward-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2076 2615])
            ("backward-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2617 2975])
            ("mark-sexp" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [2977 3802])
            ("forward-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [3804 4166])
            ("backward-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4168 4493])
            ("down-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4495 4937])
            ("backward-up-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4939 5241])
            ("up-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5243 6032])
            ("kill-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6034 6385])
            ("backward-kill-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6387 6686])
            ("kill-backward-up-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6704 7197])
            ("beginning-of-defun-function" variable nil nil [7200 7769])
            ("beginning-of-defun" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [7771 9097])
            ("beginning-of-defun-raw" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [9099 12496])
            ("end-of-defun-function" variable (:default-value (lambda nil (forward-sexp 1))) nil [12498 12866])
            ("buffer-end" function (:arguments ("arg")) nil [12868 13099])
            ("end-of-defun" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13101 15143])
            ("mark-defun" function
               (:user-visible-flag t
                :arguments ("allow-extend"))
                nil [15145 16468])
            ("narrow-to-defun" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [16470 17921])
            ("insert-pair-alist" variable (:default-value (quote ((40 41) (91 93) (123 125) (60 62) (34 34) (39 39) (96 39)))) nil [17923 18327])
            ("insert-pair" function
               (:user-visible-flag t
                :arguments ("arg" "open" "close"))
                nil [18329 20581])
            ("insert-parentheses" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20583 21147])
            ("delete-pair" function (:user-visible-flag t) nil [21149 21329])
            ("raise-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [21331 21787])
            ("move-past-close-and-reindent" function (:user-visible-flag t) nil [21789 22786])
            ("check-parens" function (:user-visible-flag t) nil [22788 23687])
            ("field-complete" function (:arguments ("table" "predicate")) nil [23690 24234])
            ("lisp-complete-symbol" function (:arguments ("predicate")) nil [24236 25324])
            ("lisp--local-variables-1" function (:arguments ("vars" "sexp")) nil [25326 26937])
            ("lisp--local-variables" function nil nil [26939 28428])
            ("lisp--local-variables-completion-table" variable (:default-value (let ((lastpos nil) (lastvars nil)) (letrec ((hookfun (lambda nil (setq lastpos nil) (remove-hook (quote post-command-hook) hookfun)))) (completion-table-dynamic (lambda (_string) (save-excursion (skip-syntax-backward "_w") (let ((newpos (cons (point) (current-buffer)))) (unless (equal lastpos newpos) (add-hook (quote post-command-hook) hookfun) (setq lastpos newpos) (setq lastvars (mapcar (function symbol-name) (lisp--local-variables)))))) lastvars))))) nil [28430 29401])
            ("lisp--company-doc-buffer" function (:arguments ("str")) nil [29987 30713])
            ("lisp--company-doc-string" function (:arguments ("str")) nil [30715 31033])
            ("declare-function" code nil nil [31035 31093])
            ("lisp--company-location" function (:arguments ("str")) nil [31095 31518])
            ("lisp-completion-at-point" function (:arguments ("_predicate")) nil [31520 35898]))          
      :file "lisp.el"
      :pointmax 35922
      :fsize 35921
      :lastmodtime '(21187 50982 0 0)
      :unmatched-syntax nil))
  :file "!usr!share!emacs!24.3.50!lisp!emacs-lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
